<?xml version="1.0" encoding="iso-8859-1"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The Life of a Radar</title>
 <link href="http://ryanbigg.com/atom.xml" rel="self"/>
 <link href="http://ryanbigg.com"/>
 <updated>2018-03-15T22:27:26+11:00</updated>
 <id>http://ryanbigg.com/</id>
 <author>
   <name>Ryan Bigg</name>
   <email>radarlistener@gmail.com</email>
 </author>

 
 <entry>
   <title>On Writing Software Well #2: Using callbacks to manage auxiliary complexity: A review</title>
   <link href="http://ryanbigg.com/2018/03/on-writing-software-well-2-a-review"/>
   <updated>2018-03-15T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2018/03/on-writing-software-well-2-a-review</id>
   <content type="html"><![CDATA[<p>A few people have asked for my opinions on DHH&#39;s recent video series. And others have bemoaned the lack of a critical take on the videos. So here&#39;s a critical take involving my opinions on <a href="https://www.youtube.com/watch?v=m1jOWu7woKM">DHH&#39;s 2nd video</a>) in the series.</p>

<p>Why not start with <a href="https://www.youtube.com/watch?v=H5i1gdwe1Ls">Video #1 in the series</a>? Because it was great! Code comments that explain why things are the way they are... those are incredibly useful to people new / unfamiliar with parts of a codebase. His points were well made and I find nothing worth commenting on. (Pun intended)</p>

<p>Video #2 though has the word &quot;callbacks&quot; in it and so I&#39;m intrigued to hear what DHH has to say about it.</p>

<p>So here&#39;s some &quot;real-time&quot; opinions that I wrote down while watching this video for a <em>third</em> time. If you like this sort of thing, let me know in the comments below.</p>

<h2>Initial reactions</h2>

<ul>
<li>Ew callbacks. I&#39;ve been bitten enough times by these -- mainly cases where callbacks are happening when I do not expect them to. Things like where I might call <code>create</code> on a model in a unit test and that causes some <em>other</em> behaviour via callback that isn&#39;t relevant to the test. I&#39;d prefer to be explicit in these cases to save surprises.</li>
<li>I&#39;ve heard mention that these talks might include Rails concerns (modules being included to add behaviour to classes), so I&#39;d suggest you stop right here, get out your favourite drink of choice and take a drink whenever you see a concern used in the Rails app.</li>
</ul>

<h2>1:35 - &quot;Side effects&quot;</h2>

<ul>
<li>&quot;Side effects .. has gotten also a bit of a bad reputation, especially in functional programming&quot; -- Yeah, because <em>random magical shit</em> happening when you call a method isn&#39;t easily predictable. Having the code be explicit about what it&#39;s doing makes it easier to understand it <em>now</em> and <em>later</em>. The later part is what I think DHH is missing here.</li>
</ul>

<h2>2:13 - Messages Controller</h2>

<ul>
<li><code>@bucket.record</code> takes <em>far</em> too many arguments. What is it doing with them all? And P.S. do you even newline your key / value pairs?</li>
</ul>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@bucket</span><span class="p">.</span><span class="nf">record</span><span class="p">(</span><span class="n">new_message</span><span class="p">,</span>
  <span class="ss">parent: </span><span class="vi">@parent_recording</span><span class="p">,</span>
  <span class="ss">status: </span><span class="n">status_param</span><span class="p">,</span>
  <span class="ss">subscribers: </span><span class="n">find_subscribers</span><span class="p">,</span>
  <span class="ss">category: </span><span class="n">find_category</span>
<span class="p">)</span>
</code></pre></div>
<p>I think that this reads a little better -- and the Git diff would be neater if a new key was added and removed. It <em>feels</em> like <code>category</code> <em>might</em> one be of those things that was added recently and just chucked onto the end here.</p>

<p>TBH a little surprised here that he&#39;s using <code>@parent_recording</code> which is setup as a  <code>before_action</code>,  but <code>find_subscribers</code> and <code>find_category</code> aren&#39;t. They&#39;re called explicitly here. I&#39;d expect some sort of consistency... but maybe there&#39;s a reason for that? The methods are folded at the bottom of the controller so I can&#39;t get a good idea of what those are doing to really judge whether or not it&#39;s a good choice.</p>

<h2>4:15 - <code>Mention</code> model</h2>

<ul>
<li>This model is pretty neat. I cringe a little (PTSD, I guess) on the sight of the <code>after_create</code> and <code>after_commit</code> uses.</li>
<li>Interesting that the model doesn&#39;t inherit from <code>ApplicationModel</code>. Probably a legacy app thing.</li>
<li>Neat use of <code>casecmp</code> in <code>callsign_matches?</code>.</li>
<li>The <code>unless</code> in <code>after_commit :deliver</code> irks me a little, but maybe it&#39;s due to me preferring to keep all the logic inside of methods? I&#39;d write it like this:</li>
</ul>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">deliver</span>
 <span class="k">return</span> <span class="k">unless</span> <span class="n">mentioner</span> <span class="o">==</span> <span class="n">mentioned</span>

<span class="p">.</span><span class="nf">.</span><span class="p">.</span>
<span class="nf">end</span>
</code></pre></div>
<h2>5:55 - <code>Recording::Mentions</code> concern</h2>

<p><em>DRINK</em> -- there&#39;s a concern here. [bad joke about it being &quot;concerning&quot;]</p>

<h3>Callbacks</h3>

<ul>
<li>Okay, so this is using more callbacks. I feel like <code>remember_to_eavesdrop</code> could be something set &quot;further up&quot; in the chain, probably in the controller. The controller itself could check to see if these things have changed, and then from there choose to send out the mentions.</li>
</ul>

<h3>Current Attributes</h3>

<p>The other thing is <code>Current</code> -- used in <code>eavesdrop_for_mentions</code> down the bottom of the code view here.</p>

<p>I already <a href="https://ryanbigg.com/2017/06/current-considered-harmful">wrote about CurrentAttributes at length</a>. Global variables magically being available <em>everywhere</em> in the application. Where is <code>Current.user</code> set? How can I be sure it&#39;s set to a value here?</p>

<h3>Abstracting out the logic for triggering the job</h3>

<p>This whole eavesdropping thing <em>feels</em> like it could be wrapped in some other logic (in a controller, perhaps). It&#39;s practically begging for it. Basecamp probably doesn&#39;t want to be persisting Messages to the database in its tests and having this job code run <em>every single time</em>, but that&#39;s exactly what&#39;s going to happen here. It&#39;d probably slow down the tests due to these side-effects.</p>

<p>It would be better abstracted out to a &quot;service object&quot; which creates the recording and then triggers this <code>EavesdroppingJob</code>. Bonus thing there is that you can pass <code>current_user</code> from the controller and hey look I just got rid of the <code>CurrentAttributes</code> global variable thing.</p>

<p>An idea of what that might look like:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Mention</span>
  <span class="k">class</span> <span class="nc">EavesdropForMentions</span>
    <span class="kp">attr_reader</span> <span class="ss">:recording</span><span class="p">,</span> <span class="ss">:params</span><span class="p">,</span> <span class="n">user</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">recording</span><span class="p">:,</span> <span class="n">params</span><span class="p">:,</span> <span class="ss">user: </span><span class="p">)</span>
      <span class="vi">@recording</span> <span class="o">=</span> <span class="n">recording</span>
      <span class="vi">@params</span> <span class="o">=</span> <span class="n">params</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">run</span>
      <span class="k">return</span> <span class="k">unless</span> <span class="n">eavesdropping?</span>

      <span class="no">Mention</span><span class="o">::</span><span class="no">EavesdroppingJob</span><span class="p">.</span><span class="nf">perform_later</span> <span class="n">recording</span><span class="p">,</span> <span class="ss">mentioner: </span><span class="n">user</span>
    <span class="k">end</span>

    <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">eavesdropping?</span>
      <span class="p">(</span><span class="n">active_or_archived_recordable_changed?</span> <span class="o">||</span> <span class="n">draft_became_active?</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
      <span class="o">!</span><span class="no">Mention</span><span class="o">::</span><span class="no">Eavesdropper</span><span class="p">.</span><span class="nf">suppressed?</span> <span class="o">&amp;&amp;</span>
      <span class="n">recording</span><span class="p">.</span><span class="nf">has_mentions?</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">active_or_archived_recordable_changed?</span>
      <span class="c1"># code here to check change using recordable + params</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">draft_became_active?</span>
      <span class="c1"># code here to check change using recordable + params</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>I don&#39;t have the big Basecamp app to play with, so i don&#39;t know for certain if this code will or won&#39;t work. What I do know is that it neatly encapsulates <em>potentially</em> performing the <code>Mention::EavesdroppingJob</code> later and avoids the issue where saving a <code>Recording</code> in <em>any</em> context might queue up a job as a side-effect.  My approach here decouples those two things, allowing them to happen independently.</p>

<p>Essentially, it accomplishes the same thing in (probably) as many lines, but disconnecting it from the saving of the model is the big win in my mind.</p>

<h3>Callback suppression</h3>

<p>Yay more global state appearing out of the blue (<code>Mention::Eavesdropper.suppressed?</code>). What could possibly go wrong? How can I track down easily where this might be toggled in the codepath that leads to this method? This looks like it would make debugging hard.</p>

<p>DHH himself says (at ~11mins) he thinks that there might be situations where you don&#39;t want callbacks to happen. Okay, great. So make it so that it can be an optional part of your code (as above), rather than this spooky-action-at-a-distance <code>Mention::Eavesdropper.suppressed?</code>.</p>

<p>Re-organising the code to <em>optionally</em> trigger this eavesdropping behaviour would lead to a lower cognitive overhead for working with this code.</p>

<h3><code>has_mentions?</code></h3>

<p>Special mention (ha) of <code>has_mentions?</code> at the bottom of this module which does seem to at least abstract the behaviour of checking if something has mentions.</p>

<h2>13:23 - <code>Mention::EavesdroppingJob</code></h2>

<p>It feels a lot like <code>Current.set</code> here is a cheap way of passing account through to <code>mention::Eavesdropper</code> and its associated things. I am not sure why this is wrapped this way, given that the account would be accessible in the <code>Eavesdropper</code> class -- assuming it&#39;s setup like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Mention</span>
  <span class="k">class</span> <span class="nc">Eavesdropper</span>
    <span class="kp">attr_reader</span> <span class="ss">:recording</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">recording</span><span class="p">)</span>
      <span class="vi">@recording</span> <span class="o">=</span> <span class="n">recording</span>
    <span class="k">end</span>

    <span class="p">.</span><span class="nf">.</span><span class="p">.</span>
  <span class="nf">end</span>
<span class="k">end</span>
</code></pre></div>
<p>But at least, this <code>Eavesdropper</code> class is abstracted away and isn&#39;t a concern. There feels to me like concerns are used as a bit of a &quot;golden hammer&quot; in this application.</p>

<h2>13:45 - run-through of all the parts</h2>

<p>DHH jumps straight from the controller to the <code>Recording::Mentions</code> concern here. (DRINK)</p>

<p>My initial thought here was: how is someone unfamiliar with this application supposed to know that the <code>Recording::Mentions</code> concern is where to look for this eavesdropping behaviour if they were to go about debugging it?</p>

<p>This is spooky-action-at-a-distance and it&#39;s the kind of code that I might&#39;ve written a few years ago and felt very smart <em>at the time</em>, but then months later when I&#39;ve gone back to visit it I&#39;ve asked myself: &quot;wtf was past-Ryan taking?&quot;</p>

<p>DHH says around the 14:10 mark that &quot;there&#39;s a fair amount of indirection here but it provides a very clear path of reading what&#39;s going on in the method&quot;. Out of anything else in this video, this is the #1 thing that I disagree with the <em>most</em>. The path is completely ambiguous to my &quot;untrained&quot; eye -- I am unfamiliar with this application.</p>

<p>It is &quot;clever code&quot; and that is dangerous because future-you will come back and look at the code in a few months time and wonder how it all fit together again.</p>

<h2>14:20 - <code>Mention::Eavesdropper</code></h2>

<p>And now we get to a class which actually has an idea of what the Single Responsibility Principle is.</p>

<p>(Interestingly, DHH can&#39;t navigate his own code at the ~14:30 mark)</p>

<p>I&#39;ve already talked about CurrentAttributes before, so what I&#39;ll do here is just sigh longingly, wishing wistfully for the death of global state in any and all applications.</p>

<p>&quot;Globals is not something that you should just litter over your application&quot; -- MY MAN! This is what you&#39;re doing here. &quot;Passing around this stuff isn&#39;t helpful&quot;. Ok, here&#39;s the #2 thing I disagree with. When passing things around, you gain an inkling for <em>where</em> the thing came from and if you followed the chain high enough you might find where it was originally defined. This <code>Current.person</code> mumbojumbo hides all of that for no real good reason.</p>

<p>Not sure I can state my thoughts clearer than this: <em>DEATH TO GLOBAL STATE.</em></p>

<h2>16:24 - <code>Mention::Scanner</code></h2>

<p>Ok so that <code>Mention::Scanner</code> approach looks pretty good. It&#39;s great that this code wasn&#39;t just thrown into <code>Eavesdropper</code> because it was <em>somewhat</em> related. It&#39;s a separate concern, and moving that logic into <code>Mention::Scanner</code> is a good approach.</p>

<h2>18:10 - <code>Mention</code> <code>after_commit</code> hook</h2>

<p>I still feel strongly that this could just be a method call in the controller after the <code>@bucket.record</code> is called.</p>

<h2>19:20 - <code>ProjectCopier</code> + suppression</h2>

<p>The suppression chain underneath <code>suppress_events_and_deliveries</code> wouldn&#39;t be necessary if this code previously opted-in explicitly to making these &quot;events&quot; and &quot;deliveries&quot;. It <em>still</em> feels like a poor work around for something that could be tidied up with half an hour&#39;s worth of effort.</p>

<p>And at the ~20:10 mark, DHH can&#39;t find where the suppressible behaviour is brought in. This thing where the code is hard-to-navigate  is a massive code smell. Again: if the &quot;callbacks&quot; were explicit rather than implicit, the suppression wouldn&#39;t be needed. The overall code footprint would be smaller, more explicit, and therefore easier to understand. The code does A, B, and C. No magic.</p>

<h2>20:39 - Wrap Up</h2>

<p>&quot;I hope it&#39;s clear&quot; -- it isn&#39;t. I&#39;ve been doing this Rails stuff for <em>10 years</em> now and if I saw this code in a codebase I would look into ways of making this more explicit to make it easier to work with.</p>

<p>As I&#39;ve said previously: this code feels like &quot;clever code&quot;. &quot;Look at me using all these cool Ruby features! I am so smart!&quot;. Well, yeah. You are smart.</p>

<p>But then in several months time of this thing chugging along working perfectly, you&#39;ll encounter a bug, look at the code and wonder how the hell it all fit together. There is far too much magic here.</p>

<p>But I guess that&#39;s The Rails Way&trade;.</p>

<hr>

<p>20:46: &quot;take all this logic and jam it into, what? The controller? A service object?&quot; -- No. A transaction object (see my example back at 5:55) that created the recording AND explicitly triggered the mention scanner + deliveries.</p>

<p>Another approach would be to use <a href="http://dry-rb.org/gems/dry-transaction/">dry-transaction</a>. This gem provides a very neat DSL for setting up such a thing. I&#39;d imagine it would go like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CreateRecording</span>

<span class="n">step</span> <span class="ss">:create</span>
<span class="n">step</span> <span class="ss">:scan_for_mentions</span>
<span class="n">step</span> <span class="ss">:deliver_notifications</span>

<span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="ss">bucket: </span><span class="n">bucket</span><span class="p">,</span> <span class="p">.</span><span class="nf">.</span><span class="o">.</span><span class="p">)</span>
  <span class="c1"># @bucket.record code goes here</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">scan_for_mentions</span>
  <span class="c1"># MentionScanner goes here</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">deliver_notifications</span>
  <span class="c1"># Delivery code goes here</span>
<span class="k">end</span>
</code></pre></div>
<p>It&#39;ll all be wrapped up neatly in the one class. <em>This</em> is where it should go. Not a controller. Not a service object. But a transaction object, that clearly delineates the steps involved in the transaction. There&#39;s no magic here. The steps are run in the order they are specified in. And it&#39;s possible to abort the transaction at each step.</p>

<p>This is my preferred approach. Callbacks and their implicitness have caused so much harm in previous codebases that I would never reach for them again. Transaction objects with explicit orders of operations are what I will be doing instead.</p>
]]></content>
 </entry>
 
 <entry>
   <title>My thoughts on Hanami</title>
   <link href="http://ryanbigg.com/2018/03/my-thoughts-on-hanami"/>
   <updated>2018-03-07T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2018/03/my-thoughts-on-hanami</id>
   <content type="html"><![CDATA[<p>(<a href='https://www.reddit.com/r/rails/comments/81z9oe/what_are_your_opinions_about_hanami_framework/dvale8q/?st=jegb17z5&sh=e9d18fa1'>This was originally posted as a comment on Reddit</a>)</p>

<p>I&#39;ve been toying around with Hanami for a few weeks now and imo it <em>feels</em> better than Rails.  If you want to see some code rather than text, <a href="http://github.com/radar/hanami-example">here&#39;s my little example app I&#39;ve been building with Hanami</a>.</p>

<p>Here are the top three things that I like about Hanami, in long form:</p>

<h2>Repository pattern instead of Active Record</h2>

<p>Documentation link: <a href="http://hanamirb.org/guides/1.1/models/overview/">Hanami | Guides - Models Overview</a></p>

<p>The Active Record pattern encourages you to throw everything into the model. Think: callbacks, validations, persistence, database logic (queries) and business logic.</p>

<p>In contrast, the repository pattern (through ROM) leads to a cleaner separation between your database and your application. I <em>especially</em> like how validations are handled by <code>dry-validation</code>, a completely separate library to ROM. This <em>enforces</em> a separation between your models, persistence and validation layers, allowing you to pick and choose which ones you wish to use.</p>

<p>My <em>favourite</em> part about the repository pattern is that it&#39;s incredibly difficult to make database queries from a view. This helps prevent things like N+1 queries.</p>

<p>Also: ROM has no such thing as callbacks, and that&#39;s a huge plus in my eyes too. Callbacks are <em>way</em> too magical and -- using DHH&#39;s words -- too sharp a knife for developers to have. Explicitness in code leads to a much better understanding.</p>

<h2>Action classes</h2>

<p>Documentation link: <a href="http://hanamirb.org/guides/1.1/actions/overview/">Hanami | Guides - Actions Overview</a></p>

<p>Rather than throwing all your actions into the same controller, they&#39;re separated out into their own classes.  This helps keep each action isolated from one another, leading to overall a cleaner application architecture.</p>

<p>If you want to share things across actions, it&#39;s very easy to create a module for that functionality and to include it into those action classes. For instance, if you wanted a <code>find_post</code> method for <code>show</code>, <code>edit</code>, <code>update</code> and <code>destroy</code> actions, you can define this in a module and only include it in the actions you want.</p>

<p>A Rails controller is typically made messier by the addition of &quot;helper&quot; methods like this. It&#39;s not uncommon to have Rails controllers of multiple hundreds of lines, due to the complexity of the actions and these helper methods. Separating out each action into its own class indeed makes them easier to work with.</p>

<p>You&#39;re also able to test the action in complete isolation from the routing layer, as it is simply a class. I think this is what was attempted with Rails&#39; controller specs... but those never really felt &quot;right&quot; to me and I typically go to Request Specs these days instead. Hanami brings me back to testing the actions easily. I like that.</p>

<h3>Params validation for actions</h3>

<p>Documentation link: <a href="http://hanamirb.org/guides/1.1/actions/parameters/">Hanami | Guides - Action Parameters</a></p>

<p>Somewhat related to the previous point:</p>

<p>Actions in Hanami also use parameter validation (with the help of <code>dry-validation</code>, I think). This means that each action can uniquely validate the parameters. Rather than having <code>create_project_params</code> and <code>update_project_params</code> defined within a controller -- as you might do in Rails -- you can define what constitutes valid parameters right there in the action class.</p>

<p>In my Hanami experiments, I&#39;ve not found a use for this yet, but I can think of several places where I&#39;ve needed this sort of thing in a Rails app.</p>

<h2>View classes</h2>

<p>Documentation link: <a href="http://hanamirb.org/guides/1.1/views/overview/">Hanami | Guides - Views Overview</a></p>

<p>Similarly to Action classes, Hanami also has the concept of a view class.  I like these because they separate the logic of view &quot;helper&quot; methods and the templates very cleanly.</p>

<p>In a Rails application, you define a helper in a module named after the controller. I never liked this approach for two main reasons: 1) normally I would only ever use the helper in <em>one</em> particular view and 2) the helper is made <em>globally available</em> across <em>all</em> views in the application, which means I can&#39;t have a similarly named method in another helper module. A quite horrible design decision.</p>

<p>In Hanami, the view classes are a <em>great</em> place to put these little helper methods <em>and</em> because they&#39;re just small, isolated classes, you can test these without involving the router, controller or model.</p>

<h2>Conclusion</h2>

<p>As I said at the beginning: Hanami <em>feels</em> right. It&#39;s &quot;familiar&quot; enough -- still somewhat following the Model-View-Controller architecture we know-and-love Rails -- that it feels comfortable to use. There&#39;s a few places where your mind has to change into the &quot;Hanami Way&quot;, but ultimately once your mind does that you&#39;ll realise that the Hanami way <em>is</em> better.</p>

<p>Hanami has demonstrably learned the very hard lessons of big Rails application development and presents a robust, well-developed alternative web framework for Ruby.</p>

<p>In fact, it is so robust and well-developed that if I was to develop a Ruby web application from scratch for production use, I would use Hanami over Rails -- despite my 10 years Rails experience.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Hiring Juniors (RubyConf AU Talk)</title>
   <link href="http://ryanbigg.com/2018/03/hiring-juniors"/>
   <updated>2018-03-07T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2018/03/hiring-juniors</id>
   <content type="html"><![CDATA[<p><em>This is the transcript for a talk that I gave at RubyConf AU in March 2018. Video will be uploaded soon-ish</em>.</p>

<p><a href="https://speakerdeck.com/radar/hiring-juniors-1">Slides are on Speakerdeck</a></p>

<p>I have seen the future.</p>

<p>Five years from now, someone will get on a stage like this one (or perhaps
midseven this one) and <em>blow your freaking minds</em>. This person will <em>astound</em> you
with a radical talk on a subject we, in the present, can only guess at. That
person is not going to be Sandi,  or any of the other speakers here. It&#39;s
not even going to be me -- as much as I (and my ego) would like that.</p>

<p>In fact, the person who will <em>blow your minds</em> knows a model today as someone
who would walk down a catwalk in some ostentatious outfit. They think that a
view is what you get from that lookout up in the mountains. They think that
&quot;Ruby on Rails&quot; is a cause for concern, as enough Rubies of significant sizes on
enough Rails might derail a train. And what a waste of good jewels!</p>

<p>Today, this person has just started on Chris Pine&#39;s Learn to Program. They have
invoked the <code>puts</code> method for the very first time.</p>

<p>Tomorrow, they will attempt the Ruby Koans. Next week, they will dabble a bit
in HTML and CSS. A few months from now, they might learn that Ruby On Rails
puts the HTML and the CSS and the Rubies together and it gives them those nice
shivers of excitement when it all Just Works™.</p>

<p>And five years from now they will <em>blow your freaking minds</em> with a talk of
astonishing brilliance, eloquently delivered with perfectly timed (and
tasteful) jokes.</p>

<p>And five years from now, we will know very clearly who this person is. This is
because they will be on stage, blowing our collective minds. And they will have
a name badge and the badge will tell us who they are. But hopefully, they will
tell us themselves.</p>

<p>But right now, we couldn&#39;t pick this person out from a crowd, or even a small
gathering for that matter. In our minds, this person simultaneously does and
does not exist. We can picture who they might be, but I guarantee you: the
picture doesn&#39;t match the eventual reality.</p>

<p>I&#39;m not one to give out spoilers freely, so I won&#39;t tell you who they are.
You&#39;ll just have to wait and see.</p>

<p>What I can tell you is that one of you will hire this person as a junior
developer and that will be their very first programming job. You will kick-
start the programming career of someone astonishingly brilliant and it&#39;s going
to be all because of what I&#39;m about to tell you, so pay close attention.</p>

<hr>

<p>If there was one thing that I want to stick in your minds it would be this:
hire juniors. Because those juniors you hire today will turn out to be the
people blowing our minds in 5 years time. Hire and train these juniors to be
mind-blowingly awesome.</p>

<h2>Hiring seniors</h2>

<p>&quot;But Ryan, we only hire senior Ruby developers!&quot; -- ahh the classic
ActiveMantra in the Rails community: &quot;Hiring senior Ruby developers. Hiring
senior Ruby developers. Hiring senior Ruby developers.&quot;. Maybe if we say it
enough and click our heels together our dreams might come true.</p>

<p>Yeah but how&#39;s that working out for you at the moment? Probably not so great.
It&#39;s well known that there are only three hard problems in computer science:
cache invalidation, naming things and hiring more senior Ruby developers.</p>

<p>We have drained the talent pool dry. And yet our obsession and our Active
Mantra continues. We only hire seniors. But why do we have this obsession?</p>

<p>Well, we want a senior developer -- but we might be happy to take a mid
too -- because they have the skills to instantly dive straight into our
application with little-to-no guidance and they can start shipping code. That
old expression: &quot;they can hit the ground running&quot;.</p>

<p>This is because our code is so brilliantly well-structured and organized
according to the Rails best practices. Nobody will have to upskill on any
single part of the codebase at all because we follow the Laws of Sandi and
Commandments of Avdi to the letter. There is no legacy code with their legacy
decisions that meta-programs the constants from Java, written in a hurry
because we needed to ship that thing <em>fast</em>. HA.</p>

<p>You may think that you need to hire only these best-of-the-best badasses
because your application is a large unmaintable collection of microservices
written in obscure languages surrounding a ginormous monolith and only the
badasses can understand it. That you need seniors to navigate the spaghetti
that is your legacy code. Maybe you use technologies that only <em>true</em> geniuses
can understand, like Node or Go. Or the Rails Asset Pipeline.</p>

<p>That may indeed be the case. After all, if our code was simple, elegant and only
written in a single Ruby monolith, would as many of us still be employed?</p>

<p>Companies spend thousands of dollars hunting the elusive 10x Developer
Rockstar Unicorns (note: term used ironically), but the Unicorns are no longer
out grazing in the sunny meadows, readily available for capture.  They&#39;re
already working somewhere else and the conditions of where they work are
extremely competitive. To keep with the analogy: the meadows are filled with
the greenest of grasses and the brightest of rainbows. You will have a hard
time luring these unicorns away.</p>

<p>We&#39;re out of freely available Rockstar Unicorns because they&#39;re already employed
elsewhere. Attempting to hire them is an exercise in futility. And so it&#39;s time
that we started to grow our own. It&#39;s time that we started to hire and train our
own 10x Developer Rockstar Unicorns.</p>

<hr>

<p>But where do we find these developers? Well, to start with need to lower our
bar for engineering talent and not be so caught up on hiring the
best-of-the-best <em>now</em>, but instead we should be investing more in people&#39;s
future potential.</p>

<p>Your next Rockstar Unicorn isn&#39;t within today&#39;s current top 5-10% of all
developers. The top 5-10% already works elsewhere. Your Next Rockstar Unicorn
is hanging out with the rest of their peers in the other part of this totally
scientific graph that I made up. These people need some mentoring in order to
grow into the next generation of brilliant people.</p>

<p>There isn&#39;t an endless supply of brilliant people -- sorry, I mean Developer
Rockstar Unicorns -- that we can just keep harvesting today. This talent pool
of amazingly talented and gifted developers, as we&#39;re painfully finding out,
is not limitless.</p>

<p>We must lower the bar for our hiring, and hire outside of the top 5-10%. We
must hire juniors. We must then train these juniors up to be our next
generation of brilliant minds.</p>

<p>It is very, very difficult to hire a senior developer today in Rubyland. And so
we must grow our own senior developers. This is a process that will take time.
There&#39;s no packet mix where you &quot;just add water&quot; and blammo you&#39;ve got a senior
developer. I&#39;m talking about <em>years</em> of hard work. But these are <em>vital</em> years
of hard work to ensure that our companies and this community continues to thrive
and grow. This is necessary work  to ensure that we have well-trained developers
working at our companies. We will know they&#39;re well-trained because we did the
training ourselves.</p>

<h2>Juniors make teams better</h2>

<p>We should not lower our hiring bar and hire juniors just because we can&#39;t find
seniors though. I have a much better reason for why you should hire a junior
developer and that reason is because they unequivocally make your teams better.</p>

<p>Juniors making teams better is a big claim, but I have some evidence to back it
up.</p>

<p>We know from a lot of experience that gender-diverse teams perform better than
either a team of all-men or a team of all-women. The same is true for teams that
are skill-diverse as well; teams that have a mix of people with differing
skill-levels and experiences out-perform their all-senior counterparts. The most
productive teams that I&#39;ve worked on have been teams that have had a mix of
skill-levels and experiences.</p>

<p>Juniors make your teams better because that means things will need to be
explained in simpler terms than they were before. This makes things easier to
understand for all members of the team. Concepts are no longer talked about in a
jargon-y or high-level way all the time; instead: people understand things in an
easier way.</p>

<p>Juniors make your teams better because teams that have a junior tend to document
things more. Or at all.</p>

<p>For instance, a team I was a part of recently documented the flow of an event
out of our main monolithic Rails application and into some microservices. This
documentation was done for the junior developer&#39;s benefit and it consisted of a
flowchart made up in Omnigraffle. The best part about this piece of
documentation was that we had something we could <em>physically</em> point to when
talking about things we would only normally keep in our head.</p>

<p>The funniest thing about that piece of documentation was that the <em>senior</em>
developers ended up referring to it more than the junior! We stuck it on a wall
and then talked about the structure of the system while pointing at the
different pieces in the diagram. It really helped cement the structure into our
heads and helped us know where to make improvements in the system.</p>

<p>If it wasn&#39;t for our junior developer, we wouldn&#39;t have drawn up this diagram in
the first place. We would still be talking about this system at a high-level,
with only code to point to. The diagram really helped our team become more
productive.</p>

<p>This links into my next point:</p>

<p>Communication, especially when it comes to knowledge-sharing, becomes <em>explicit</em>
out of necessity, rather than the <em>implicit</em> style of communication usually
found in all-senior developer teams. When that team I was on was only senior
developers, we communicated implicitly about the structure of the two
applications. We all just assumed everyone knew what we were talking about. As
soon as we got a junior, that communication changed to favouring explicitness
over implicitness.</p>

<p>Also on the topic of communication: more questions get asked by the junior
than the seniors on the team, usually because the junior wants to learn. It&#39;s
not the questions themselves that are the most helpful, but the answers. The
answers to these questions not only help cement the junior&#39;s knowledge, but
they give the senior developer practice in understanding and explaining
concepts that they might not have explained otherwise. I&#39;ve also learned <em>a
lot</em> from over-hearing someone else answering a question.</p>

<p>Sometimes a question from a junior can even spark a thought about how to
structure something better in the code, or how to document a part of the system
in further detail so that everyone on the team can better understand it. Those
&quot;why is this done this way?&quot; questions from juniors are my absolute favourite
because they often lead to system improvements.</p>

<p>One more thing: all of the juniors I have ever worked with have mentored senior
developers on the most important developer skill of all: patience. This is the
thing that juniors provide to your team that no senior can do. The seniors must
explain things to a junior, and that takes time. They might even have to explain
things more than once.</p>

<p>Patiently explaining something to someone, as I&#39;ve said before, helps seniors
understand their own systems better and, in my experience, makes the seniors
much better developers than if they only had to explain things to other seniors.
They need to slow down and methodically explain things, which helps solidify the
senior&#39;s knowledge.</p>

<p>Patience is a virtue that more developers should learn. The ironic thing about
me saying this is that I&#39;m a naturally impatient person (just ask anyone who&#39;s
known me for more than 5 minutes)... who&#39;s getting more patient because of the
mentoring I&#39;m doing. Huh, maybe it works.</p>

<p>This is why we should hire junior developers: it makes our teams better. Things
are better understood. Documentation exists more on teams with juniors.  Clearer
communication channels open up out of necessity. Patience is taught. The team is
better for it.</p>

<p>Better teams ship better software and better software means happier users.</p>

<h2>Hiring Juniors at Culture Amp</h2>

<p>I know that juniors make teams better because we&#39;re making it happen at Culture
Amp. I live and breath this stuff as Culture Amp&#39;s Junior Engineering Program
Lead. My entire job is to train juniors up so that they can be productive
members of their teams.</p>

<p>Last year, Culture Amp hired seven new junior developers. We now have ten junior
developers across the company. This is a ratio of about one-in-five developers
at Culture Amp being a junior developer.</p>

<p>Here are the ten juniors that we currently have at Culture Amp. Each of these
juniors comes from a diverse background: They&#39;re not all 20-35, white, and male
and yet our company is still in business. Amazing, I know.</p>

<p>These juniors are a lot more fresh-faced than I was when I was a junior
developer. Here&#39;s a photo of junior-me. Definitely not fresh-faced.</p>

<p>At the end of November last year, we started up a structured training program
for these juniors called the Culture Amp Junior Engineering Program. This
program is designed to provide an accelerated learning environment for the
juniors that we have at Culture Amp.</p>

<p>During the program, we provide structured training to these 10 juniors over
the course of 6 months. When the 6 months are up at the end of May, they&#39;ll be
fully-fledged developers, capable of shipping things mostly on their own. At
that point, they&#39;ll then be working on their teams full-time. The progress
that these juniors have made so far has been nothing short of amazing. They&#39;re
well on their way to being confident and capable developers.</p>

<p>I&#39;d like to highlight the fact that we&#39;ve hired people who aren&#39;t all white,
male, 20-35, utterly amazing, top 5-10% senior Rails developers and yet...
everything is still OK. In fact, it&#39;s better than OK: it&#39;s awesome.</p>

<p>We&#39;ve hired a mixed bunch of people with different skill levels and we train
them up and get them to work together on our applications. There&#39;s not a
single fire or brimstone as far as the eye can see.</p>

<p>We&#39;re growing the next batch of brilliant engineers today. And I can definitely
say that all of Culture Amp&#39;s teams have been made better by the addition of the
juniors.</p>

<h3>The Talent Code</h3>

<p>If all of my points so far weren&#39;t convincing enough, then I would encourage you
to read a book called &quot;The Talent Code&quot;. As the subtitle says &quot;Greatness isn&#39;t
born. It&#39;s grown.&quot; It&#39;s about 300 pages long.</p>

<p>The book covers how skills of all varieties are grown in sports, music and
plenty of other industries.</p>

<p>All of the industries that are covered in the book have active mentorship and
apprenticeship programs. Yet, this is not deeply cared about in the programming
community, and I think that&#39;s because we&#39;re still quite a young community. We
aren&#39;t mature enough to think long- and-hard about mentorship and the
sustainability of talent in this community within our companies. We haven&#39;t had
to think about potential &quot;succession plans&quot; for our codebases: Who will
maintain our code after we are gone? Our industry is not quite yet old enough to
have needed this.</p>

<p>More established industries that have been around longer have learned this
lesson. They realise that the people who are doing the work <em>today</em> are not
going to be doing the work forever. And so they have these active mentorship
and apprenticeship programs to ensure a fresh supply of talent to their
industries. I think we&#39;re on the cusp of realising this today.</p>

<p>Put another way: If Rails was a person, that person would not even be old enough
to have graduated high-school, let alone make adult decisions. This is reflected
in the design choices of the framework, but that&#39;s a conversation for another
day.</p>

<p>Back to my point: I think it might take us a touch longer to realise that
training for the future is the right thing to do. It ensures that we have a
stable talent pool that we can hire from, and overall leads to better
performance for teams.</p>

<p>Back to the book: I&#39;ll let you in on the secret that&#39;s in the Talent Code: for
anyone to get better at anything, they need to have three core components:</p>

<ol>
<li>They must practice the hell out of it</li>
<li>They must have a passion (or a drive) for whatever they&#39;re learning</li>
<li>They must have a good mentor who is encouraging and can
provide sound advice.</li>
</ol>

<p>You should definitely read this book. It really helped me understand why
it&#39;s important to mentor newbies in any community, and taught me a bit about
<em>how</em> people learn. It&#39;s definitely worthwhile to read.</p>

<p>One thing that it really highlighted for me was that the best of the best, the
Beyonces, the Kanyes, and the Ricks, didn&#39;t just one day appear out of thin air.
These people practiced the hell out of their craft, they have a passion for what
they do and they had great mentors who helped guide them. These people were
trained over <em>years</em> and that&#39;s how they got where they are today. We should do
the same for our industry to build our talent pool.</p>

<p>How do we expect to have more of our own great talent to hire if we&#39;re not
hiring juniors and letting them improve their skills by practicing on real
world applications? Remember: these people need to practice the hell out of
programming, have a passion for it and they need to have a good mentor.</p>

<p>These people do not simply pop into existence. This isn&#39;t the Matrix: we can&#39;t
just plug in, and a few seconds later we just <em>know</em> Rails like Keanu and Kung
fu. These juniors cannot just sleep on a copy of Rails 4 in Action and wake up
<em>knowing</em> Rails. These juniors have to be taught.</p>

<p>We have to grow talent if we want talent. The Talent Code helped me understand
this point very clearly.</p>

<h2>You should hire a junior</h2>

<p>I think your companies should try to hire juniors and to mentor them. I know
I&#39;ve said that a few times already, but I really want to drive that point home.</p>

<p>I&#39;m not suggesting that you should hire a batch of them all at once like Culture
Amp did. I think you should just start at hiring a single junior. Interview a
couple and pick one from that batch. If your company is at least 4 developers
and at least one of them wants to mentor, you can hire and support a junior. I
believe in you. You can do it!</p>

<p>Rather than running a structured mentorship program like Culture Amp does, you
can start by hiring a single junior and pairing with them to grow their skills
and your team. This will lay the groundwork for hiring more juniors later on.</p>

<p>Your next question might be: &quot;what do <em>we</em> (as a company) get out of hiring a
junior?&quot; Were you not paying attention at the beginning of this talk? They make
your teams better! That&#39;s what you get out of it: better <em>and bigger</em> teams. We as
a community also get some new members, and that&#39;s a big positive in my eyes too.</p>

<hr>

<h2>Finding Juniors</h2>

<p>Now that I&#39;ve hopefully convinced you to hire a junior, you might be thinking:
where do you find these juniors? What do I do with them once I have them?
Well, I have some tips!</p>

<p>Regarding finding the juniors: let&#39;s start with two places where you can find
a lot of them: Code Academies and universities.</p>

<p>Code academies and universities produce great talent, but that talent often
has a hard time finding a job afterwards because, as I mentioned earlier, the
bar for hiring at a lot of companies is too high. It feels to me like there&#39;s
a big chasm between someone graduating and getting a job at a Ruby development
shop. I hear this from a lot of junior developers that I talk to as well.</p>

<p>In fact, I even drew you a picture using my amazing powers of illustration.
The junior, shown here on the left in amazing detail, tries to make the jump
from graduating these schools to being placed in what they call &quot;a real job&quot;.
When they take this leap, they fall short, smashing into the Wall of Rejection
and leave a bloody smear as they fall down into the Pit of Depression. When we
hire and train up juniors we will begin work to close this chasm. We make it
easier for juniors to make this transition into our community.</p>

<p>Remember: senior devs don&#39;t grow on trees. We must give juniors a chance.  If
you want to hire a junior, first lower your hiring bar and then take a look at
the people coming out of code academies and universities.</p>

<p>We&#39;ve hired 3 people at Culture Amp from places like this: Jaime, Rebecca and
Jasmine. Jaime comes from Coder Academy in Melbourne, and Rebecca and Jasmine
both went to the same university, RMIT in Melbourne. All three of these junior
developers have a great talent for learning and self-development and we&#39;re glad
to have them working for us.</p>

<p>But then there are definitely juniors who have that same kind of
eagerness-to-learn and motivation who have never been to a code academy or a
university.</p>

<p>Out of the Culture Amp juniors I mentioned before, three fit this bill: Rayma,
Namibia and Julie.  While they haven&#39;t gone through intensive coding schools
or universities, they still bring to Culture Amp a great set of skills that
they&#39;ve built up themselves. Their ability to learn on their own far exceeds
those who have been classically taught, because they haven&#39;t had that support
net. Their tenacity for problem-solving and battling through things they don&#39;t
know is inspiring.</p>

<p>The people who come from coding academies, universities and who are self-
taught are the future brilliant developers of this community and we all must
hire and start training them <em>today</em>.</p>

<h3>Interviewing Juniors</h3>

<p>OK, now that you&#39;ve found a junior you&#39;re probably going to want to interview
them to get an idea about who they are.</p>

<p>When interviewing a junior, it&#39;s important to remember that it&#39;s probably going
to be one of their <em>first ever</em> programming job interviews. Treat them gentle.
Do not try to trap them with programming riddles, or vague trivia. Your
interview process should be more like a relaxed chat than an interrogation. You
want them to feel comfortable and welcome, not like you&#39;re their enemy.</p>

<p>And then after the interview, I want you to do something different: give them
some feedback on how it went. Even if you&#39;re going to reject them.</p>

<p>There are three simple rules for this feedback. It must be all of:</p>

<ul>
<li>Actionable</li>
<li>Specific</li>
<li>Kind</li>
</ul>

<p>If the feedback is Actionable and Specific but not Kind, then it might seem like a
criticism. If it is Actionable and Kind but not Specific, then the junior might
not know what they could do to do better next time. And so on.</p>

<p>We did this with Culture Amp&#39;s Junior Engineering Program, giving <em>on average</em>
7 pages of written feedback per candidate, for a total somewhere in the range
of 400 pages. We&#39;re a feedback company, and so we have a reputation to uphold.
But this wasn&#39;t the only reason why we compiled this feedback. The more
important reason is that we dind&#39;t want people to apply, only to slam into
that Wall of Rejection and fall into the Pit of Depression.</p>

<p>We used the &quot;Actionable, Specific and Kind&quot; rules because we felt that
feedback that is Actionable, Specific and Kind would motivate juniors towards
self-improvement, even if they didn&#39;t &quot;pass&quot; our interview phase. A flat &quot;no&quot;
would be incredibly de-motivating to receive as a junior. We didn&#39;t want that.
We wanted to encourage them even if we rejected them.</p>

<p>When interviewing juniors, you should give them some feedback too. It doesn&#39;t
have to be seven pages worth of feedback per candidate. Even just a single page
of feedback can be incredibly valuable for a junior.</p>

<p>Juniors <em>thrive</em> given this sort of feedback. It&#39;s vital for their future
growth. Putting in a little bit of extra effort for juniors will help them grow.
Proivde them some Actionable, Specific and Kind feedback after you interview
them.</p>

<h2>Mentorship</h2>

<p>OK, so we&#39;ve talked about where to potentially find juniors and a little tip
about interviewing them, but what do you do once you have interviewed and hired
them?</p>

<p>Well, for starters: they&#39;re going to need <em>a lot</em> of love and attention. You can&#39;t
just put them in the corner and expect them to thrive. Think more of them like a
puppy than a cactus: the puppy needs love and attention and some training, but
the cactus needs only sunshine and some water.  The cactus is indifferent to
your love, your attention or the intensity of the training you provide. Cacti
are going to Cacti.</p>

<p>Junior developers don&#39;t grow into senior developers with just sunshine and
water. And they don&#39;t do it just by practicing development by themselves,
either. They need mentorship and thrive on direction!</p>

<p>As I said before when talking about the Talent Code: Juniors need to practice
the hell out of developing things and need good mentorship to really thrive. We
must provide them these opportunities to practice, and we must provide them with
mentoring.</p>

<h3>It&#39;s OK to ask questions</h3>

<p>There&#39;s an event called the Melbourne Ruby Hack Night. This event is a
judgement-free environment where anyone and everyone can bring along a Ruby
project and work on it. Some people are even there for the first time learning
about Ruby itself, which is so great to see. These Hack Nights work because
these new developers feel safe and welcome and that no question is too &quot;dumb&quot;
to ask.</p>

<p>Just like at the Hack Night, it should be OK for anyone to ask a question
about <em>anything</em> when they work with you at your company. In fact, print this
slide up on some A1 paper and stick it to your wall.</p>

<p>Very clearly outlining to juniors that it&#39;s OK to ask <em>any</em> question about
<em>anything</em> is a great place to start. And repeat that as much as possible,
too.</p>

<h3>Pairing</h3>

<p>A great way to build that kind of hack-night-esque fostering environment is to
encourage pair programming. Pairing with juniors on small tasks initially is a
great way to build up their confidence. When I&#39;ve been mentoring juniors, the
number one thing that I find that they&#39;re lacking isn&#39;t necessarily the skill,
but the confidence. They know the answer, but they aren&#39;t sure if it&#39;s the
<em>right</em> answer. They question if they&#39;re using the right syntax or even if they
should be writing the code that particular way. When a senior pairs with a
junior, they can encourage them to try out things and learn from the things that
they try. If the junior gets it wrong, the senior can ensure them that it&#39;s OK
to get things wrong and to guide them back on track. Pairing is the quickest way
to upskill a junior and I can highly, highly recommend it.</p>

<p>Remember: puppy, not cactus. If we want talent, we have to train talent.</p>

<p>Pairing also helps reinforce your own knowledge. If you can&#39;t explain
something to someone clearly, then you do not understand it well enough
yourself. Pairing is helpful to the junior because they get knowledge out of
it, but it&#39;s also helpful to the senior: they learn how to share what&#39;s in
their brain with other people in a clearer fashion. As I said before, it also
teaches the most valuable skill of all: patience. I have benefited more than
I can count by pairing as the more &quot;senior&quot; of the pair. Not just because I get
to practice patience, but also because I have learned many new things myself
when pairing.</p>

<h3>What do you pair on with juniors?</h3>

<p>Suggesting pairing is all well and good in theory, but in reality: what should
you pair with your junior on? Well, Lydia Guarino has some good tweets about
that.</p>

<p>1) For junior devs, a good guideline for scope is something that can be
completed in 2-3 days. You want to keep your feedback loop short.</p>

<p>2) Tasks with scope of more than 3 days are tasks that are not defined well
enough. Break them down further.</p>

<p>I agree with both of these. Juniors thrive best when they&#39;re given quick wins.
You want that nice tight feedback loop to keep their confidence growing. Every
time they &quot;win&quot; at code, their confidence gets that little bit more boosted.
At Culture Amp, we started our juniors out on fixing bugs or working on little
features and then moved them up to trickier bugs and harder features from
there. Most bugs didn&#39;t take more than a day for the juniors to fix. Now we
give them harder bugs and harder features. We kept the feedback loop short
early on to build up their confidence with our codebase.</p>

<p>Once they&#39;ve built up a bit of confidence, you can let them go solo on a task.
There isn&#39;t a set timeframe for when this happens; it&#39;s all about how
confident the junior is with their own abilities. Let them loose on something
small and make it clear that they can ask any questions about what they&#39;re
doing and that there is no wrong way of doing it. They won&#39;t ship fast to
begin with. The fast comes with practice. Let them practice.</p>

<p>Once they&#39;re done, get them to submit their work in a pull request and then --
this part&#39;s important -- sit together and review it.</p>

<p>Sitting together is important here because &quot;why are you doing this?&quot; written
in text has no emotion, compared to it spoken with body language. Juniors may
interpret a &quot;why are you doing this?&quot; comment as aggressive like &quot;UGH! Why are
you doing this?&quot;.</p>

<p>Focussing on in-person communication helps establish a rapport between the
developers much better than text-based communication ever will.</p>

<p>If a junior has made a mistake in the pull request then you can discuss it
with them and talk about possible ways to correct the mistake. Pull request
reviews are great for this reason.</p>

<p>Code review also allows the senior to assess how well the junior has been
doing on the tasks they&#39;ve been given. If they&#39;re doing well on a 2-day task,
then it&#39;s probably going to be OK to give them a 4-day task too. If not, then
some more mentoring may be required. And that&#39;s perfectly OK. Give them that
mentorship and direction, and try again.</p>

<h3>Feeling welcome</h3>

<p>Ultimately, your mentorship should be about making the junior feel welcome and
safe within your team. You&#39;ve probably sensed this as a theme to my points
already, but I want to take the last few minutes of this talk to really drive
this point home: In fact, this should be what&#39;s happening with <em>everyone</em> in
your team.</p>

<p>Don&#39;t just take my word for it. Google ran a study called &quot;Project Aristotle&quot;
wherein <a href="https://rework.withgoogle.com/blog/five-keys-to-a-successful-google-%0Ateam/">they attempted to find how to build effective
teams</a>. They interviewed hundreds of their own employees and they came up with 5
things:</p>

<div class='center'>
  <img src='https://lh3.googleusercontent.com/eQ_WsRq5-q-m_41eEI6GLEObqpxBYJd1pm96gIa-eRSn-QXlPjwO5K6O-DHU8sxny3ChnIQE0mjpnXaaW7QAhQ=s0'>
</div>

<p>The #1 item on this list isn&#39;t &quot;Feeling welcome&quot;, but &quot;Psychological safety&quot;.
The text underneath says: &quot;Team members feel safe to take risks and be
vulnerable in front of each other.&quot;</p>

<p>You probably recognise that some of these things sound a lot like the
&quot;Love/belonging&quot;, &quot;Esteem&quot; and &quot;Self-actualisation&quot; parts of <a href="https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs">Maslow&#39;s
hierarchy of
needs</a>. This
indicates that Professor Maslow was probably onto something.</p>

<p>Juniors should ultimately feel safe to take risks and to be vulnerable in our
teams. Juniors will make mistakes. We&#39;ve all made mistakes. Ask me about that
time I dropped the production database for a multi-thousand user client of a
consultancy... and we had no backups. Hopefully you have processes to prevent
this sort of thing happening with your juniors when you hire them.</p>

<p>The remainder of this list is not to be discounted. Dependability, Structure &amp;
Clarity, Meaning and Impact are all vital to junior developers progressions. A
junior must be able to depend on the people around them for support. They must
have clarity on what their direction is. They must feel like they&#39;re
contributing back to a greater whole to keep them motivated; it&#39;s that drive
that I talked about earlier.</p>

<p>When you hire a junior developer, keep these things in mind and ask yourself
regularly if you&#39;re following along with them. These things should underpin
everything you do with the junior.</p>

<p>With a concerted effort to make the junior feel pyschologically safe, and some
semi-structured mentoring in place, they can grow into the future&#39;s most
brilliant developers.</p>

<hr>

<p>We must start hiring and mentoring junior developers. If not today (because
you&#39;re at a conference) then do it next week. Grow your company and this
community and make your teams better. Hiring juniors is the way to grow our
teams and this wonderful community.</p>

<p>I hope that with a concerted effort to hire juniors, our Active Mantra can
change into &quot;Hiring and mentoring junior developers&quot;. That would be wonderful.</p>
]]></content>
 </entry>
 
 <entry>
   <title>How require loads a gem</title>
   <link href="http://ryanbigg.com/2017/11/how-require-loads-a-gem"/>
   <updated>2017-11-03T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2017/11/how-require-loads-a-gem</id>
   <content type="html"><![CDATA[<p>In modern versions of Ruby, you can use the good old <code>require</code> method to load a gem.
For instance, if you&#39;ve got the gem <code>activesupport</code> installed, you can require
everything inside of activesupport (including the kitchen sink) with this line:</p>
<div class="highlight"><pre><code class="language-" data-lang="">require 'active_support/all'
</code></pre></div>
<p>You might&#39;ve just tried to open up <code>irb</code> and run that line, and it might&#39;ve
worked for you... assuming you have activesupport actually installed. It works
on my machine, at least.</p>

<p>But how does <code>require</code> know where to find gems&#39; files in Ruby? Wouldn&#39;t those
files need to be on the load path? Well, thanks to a cheeky hack in RubyGems
code, no, those files don&#39;t need to be on the load path. Instead, these gems&#39;
<code>lib</code> directories are added to the load path as they&#39;re needed. I&#39;ll show you
how.</p>

<h2>A default load path</h2>

<p>When you initialize <code>irb</code> it already has some directories added to its load
path, which you can see with this code:</p>
<div class="highlight"><pre><code class="language-" data-lang="">p $LOAD_PATH
</code></pre></div>
<p>My list looks like this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">[
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/gems/2.4.0/gems/did_you_mean-1.1.0/lib",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/site_ruby/2.4.0",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/site_ruby/2.4.0/x86_64-darwin16",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/site_ruby",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/vendor_ruby/2.4.0",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/vendor_ruby/2.4.0/x86_64-darwin16",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/vendor_ruby",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/2.4.0",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/2.4.0/x86_64-darwin16"
]
</code></pre></div>
<p>These paths make it possible for me to do things like <code>require &#39;net/http&#39;</code>
(haha just kidding I use <code>rest-client</code>) and <code>require &#39;csv&#39;</code>. At least one of
those directories contains files called <code>net/http.rb</code> and <code>csv.rb</code> which makes
this possible.</p>

<p>But none of these directories include a file called <code>active_support/all</code>, so
how does <code>require &#39;active_support/all</code> still work?!</p>

<h2>The cheeky hack</h2>

<p>The &quot;cheeky hack&quot; in the bundled RubyGems code <a href="https://github.com/ruby/ruby/blob/f7fb0867897ced531a33a014fb92998b0ed97ac0/lib/rubygems/core_ext/kernel_require.rb#L25-L138">is shown here in all its
glory</a>.
The comment at the top of this file gives away what happens: </p>

<blockquote> 
  <p>
    When you call <code>require 'x'</code>, this is what happens:
  </p>

  <ul>
  <li>If the file can be loaded from the existing Ruby loadpath, it
  is.</li>
  <li>Otherwise, installed gems are searched for a file that matches. If it's found in gem 'y', that gem is activated (added to the loadpath).</li>
  </ul>
</blockquote>

<p>I won&#39;t walk through the whole thing -- consider it homework! -- but the short
version is that RubyGems <a href="https://github.com/ruby/ruby/blob/f7fb0867897ced531a33a014fb92998b0ed97ac0/lib/rubygems/core_ext/kernel_require.rb#L57-L60">checks to see if there are any unresolved dependencies</a> and if there&#39;s not, then it will try a regular <code>require</code>. This results in  a <code>LoadError</code> being raised, which is <a href="https://github.com/ruby/ruby/blob/f7fb0867897ced531a33a014fb92998b0ed97ac0/lib/rubygems/core_ext/kernel_require.rb#L123-L138">then rescued</a> a little further down.</p>

<p>This error message is checked to see if it ends with the path that we passed
in, and if it does then it calls <code>Gem.try_activate(path)</code>. This method will
activate any gem that matches the specified path. Inside of the <code>activesupport</code>
gem, it <a href="https://github.com/rails/rails/blob/c3db9297c8886c404eddef806f40a6cb31c898c3/activesupport/lib/active_support/all.rb">has a file called
&#39;active_support/all&#39;</a>, and so the activesupport gem will be activated here. </p>

<p>Activating a gem adds that gem&#39;s <code>lib</code> directory to the load path, which will
then make requiring any of that gem&#39;s files possible.</p>

<p>Once the gem is activated, this <code>require</code> method <a href="https://github.com/ruby/ruby/blob/f7fb0867897ced531a33a014fb92998b0ed97ac0/lib/rubygems/core_ext/kernel_require.rb#L135">tries to require the path
once
more</a>. Due to the gem being activated, it is now possible to <code>require &#39;active_support/all&#39;</code>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Rails, Dropzone.js, Amazon S3 and imgix</title>
   <link href="http://ryanbigg.com/2017/08/rails-dropzone-js-amazon-s3-and-imgix"/>
   <updated>2017-08-28T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2017/08/rails-dropzone-js-amazon-s3-and-imgix</id>
   <content type="html"><![CDATA[<p>In this tutorial I&#39;ll cover how you can upload files directly to S3 by using a feature called <code>PresignedPost</code>. I&#39;ll then show how you can use <a href="https://imgix.com">imgix</a> to resize these images dynamically after they&#39;ve been uploaded.</p>

<p>The Rails app that I use for this tutorial is <a href="https://github.com/radar/dropzone-example">dropzone-example</a>, with the <a href="https://github.com/radar/dropzone-example/tree/finished">finished branch</a> being the final version of the code from this tutorial.</p>

<h3>Background</h3>

<p>I&#39;ve got a small hobby Rails app that I use to share photos with my extended family. This app had humble beginnings: it was a very light Rails application with one model that used <a href="https://rubygems.org/gems/paperclip">Paperclip</a> to handle the attachments. Paperclip works very well, and I especially love that I don&#39;t have to care about <em>how</em> my photos get resized; Paperclip just does it -- as long as you have the right things installed.</p>

<p>I got the attachments through to Paperclip by using the wonderful <a href="http://www.dropzonejs.com/">Dropzone.js</a>. A simple file input would also work, but I wanted to be able to upload multiple files from all kinds of devices. Dropzone lets me do that.</p>

<p>But then I wanted to add video support to this application. It&#39;s at this point that I should mention three things: 1) this application is hosted on Heroku 2) Heroku&#39;s request timeout is set to a hard 30 seconds 3) Australian internet is prohibitively slow and iPhone videos are so big that any video longer than 25 seconds does not upload within that 30 second window.</p>

<p>So I had to come up with an inventive solution. Googling for other people&#39;s attempts to solve or workaround this problem suggest that the best solution was to upload to s3 directly; but then I would lose the automatic resizing for images that comes with Paperclip. Fortunately, I knew about <a href="https:/imgix.com">imgix</a>.</p>

<p>A lot of the other writings on the internet don&#39;t really cover it from start-to-finish, and so I pieced all this together from many, many blog posts and documentation pages.</p>

<p>Contrary to my tweet earlier:</p>

<blockquote class="twitter-tweet" data-lang="en-gb"><p lang="en" dir="ltr">Hooked up dropzone + s3 direct file uploads and now I&#39;m going to keep all that knowledge to myself mwhahahaha</p>&mdash; A Ryan (@ryanbigg) <a href="https://twitter.com/ryanbigg/status/901668466599510017">27 August 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>I&#39;m not going to keep all this knowledge to myself, but instead I&#39;ll share with you how I did it here.</p>

<h3>Dropzone setup</h3>

<p>I&#39;m going to assume that people reading this already have at least a Rails application setup and they want to add this functionality to it. I&#39;ve got a <a href="https://github.com/radar/dropzone-example">small example app</a> with dropzone added, if you want to take a look.</p>

<p>I&#39;m going to go old-school on this: no Webpacker, no React. If you want those things I am sure you can figure it out.</p>

<p>To start with, you can download the Dropzone files from the Download link in the <a href="https://gitlab.com/meno/dropzone/blob/master/README.md">project&#39;s README</a>. This will download the latest release. Extract this zip, and then move <code>dropzone.css</code> into <code>vendor/assets/stylesheets/dropzone.css</code>, and <code>dropzone.js</code> into <code>vendor/assets/javascripts/dropzone.js</code>. These two files will need to be required in both <code>application.scss</code> and <code>application.js</code>:</p>

<p><strong>application.scss</strong></p>
<div class="highlight"><pre><code class="language-" data-lang="">*= require dropzone
</code></pre></div>
<p><strong>application.js</strong></p>
<div class="highlight"><pre><code class="language-" data-lang="">//= require dropzone
</code></pre></div>
<p>Then wherever you want the dropzone to appear, put this code:</p>

<p><strong>app/views/uploads/new.html.erb</strong></p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="cp">&lt;%=</span> <span class="n">form_tag</span> <span class="n">uploads_path</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"dropzone"</span><span class="p">,</span> <span class="ss">id: </span><span class="s2">"uploader"</span> <span class="k">do</span> <span class="cp">%&gt;</span>

<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div>
<p>The <code>dropzone</code> class is the special bit here: Dropzone will automatically apply itself to any element with this class. If you&#39;ve done this correctly, you&#39;ll see this:</p>

<p><img src="/images/dropzone/drop-files-to-upload.png" alt="Test"></p>

<p>The styling isn&#39;t exactly pretty, but that&#39;s something you can fix up later. (<a href="https://gist.github.com/radar/4e2957edf84efb40e222b43439e772a1">Here&#39;s the CSS</a> that I use for my own; I think I cribbed it from the Dropzone site.)</p>

<p>What this will do is submit files to the <code>uploads_path</code>, as if there was a file input and we had selected a file and hit &quot;submit&quot;. If we had a controller action to receive these files, it might look something like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="no">Photo</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="ss">photo: </span><span class="n">params</span><span class="p">[</span><span class="ss">:file</span><span class="p">])</span>

  <span class="n">head</span> <span class="ss">:ok</span>
<span class="k">end</span>
</code></pre></div>
<p>This action would use Paperclip to do the processing and resizing. The configuration in the <code>Photo</code> model would look like:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">has_attached_file</span> <span class="ss">:photo</span><span class="p">,</span>
  <span class="ss">styles: </span><span class="p">{</span> <span class="ss">small: </span><span class="s2">"250x250#"</span><span class="p">,</span> <span class="ss">large: </span><span class="s2">"1000x1000#"</span><span class="p">}</span>
</code></pre></div>
<p>This would all result in the files being stored locally, in the <code>public/system</code> directory of the application. This might suit some, but for an application hosted on Heroku it is a terrible idea, because Heroku&#39;s filesystem is read-only; your uploads would fail.</p>

<p>So let&#39;s assume that this application is going to be hosted on Heroku. That means that we need to find somewhere else to host our files, and one very good place for that is Amazon S3.</p>

<h3>Upload direct to S3</h3>

<p>There&#39;s an interim step here where you could configure Paperclip to upload the files to S3 after it has finished processing them on the server. In fact, there&#39;s a <a href="https://devcenter.heroku.com/articles/paperclip-s3">great Heroku tutorial</a> demonstrating just that.</p>

<p>However, as I mentioned at the beginning, we&#39;re looking to upload files <em>directly</em> to s3 to avoid Heroku&#39;s 30 second timeout. The Rails app may not have time to process the upload before the timeout if the file is sufficiently large enough. Therefore configuring Paperclip in this way won&#39;t suit us. What we&#39;ll do instead is upload this file directly to S3.</p>

<p><strong>I will assume at this stage that you&#39;ve setup an AWS account and at least one S3 bucket to receive uploads into. I will also assume that you know what an AWS access key and AWS secret key are. If you haven&#39;t configured these things, then go ahead and do that now.</strong></p>

<p><strong>I highly recommend creating a new user that only has read + write access to S3, and even then that access is limited to just this bucket. Your default user has <em>all</em> the permissions, and so if your keys leaked then someone could access your entire AWS account. Be careful.</strong></p>

<p>To let users upload to our application, we&#39;ll need to use an S3 feature called a <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html"><em>presigned post</em></a>. S3 Buckets by default are not writeable by the general public. In this particular case, we <em>do</em> want the general public to upload files to our bucket.</p>

<p>This feature will allow us to generate a URL and some fields for our upload form. The combination of this URL and these fields will allow regular users of our application to upload files straight to our S3 bucket.</p>

<p>To use any AWS feature in our application, we first need to add the <code>aws-sdk</code> gem to our Gemfile:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">'aws-sdk'</span><span class="p">,</span> <span class="s1">'~&gt; 2'</span>
</code></pre></div>
<p>We can use this gem to generate a presigned post, but before that we need to setup some credentials within our application. I like to use the <a href="https://rubygems.org/gems/dotenv-rails">dotenv-rails</a> gem for this purpose:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">'dotenv-rails'</span>
</code></pre></div>
<p>This gem will load any environment variable specified in an <code>.env</code> file. Let&#39;s create one of those now with these values:</p>
<div class="highlight"><pre><code class="language-" data-lang="">AWS_ACCESS_KEY_ID=[your access key goes here]
AWS_SECRET_KEY=[your secret key goes here]
AWS_REGION=[your region name goes here]
AWS_BUCKET=[your bucket name goes here]
</code></pre></div>
<p><strong>NOTE: Make sure to add this <code>.env</code> file to <code>.gitignore</code>. You don&#39;t want to commit your AWS access keys!</strong></p>

<p>Now let&#39;s go ahead and generate a presigned post in the Rails console:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">resource</span> <span class="o">=</span> <span class="no">Aws</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">Resource</span><span class="p">.</span><span class="nf">new</span>
<span class="n">post</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="nf">bucket</span><span class="p">(</span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"AWS_BUCKET"</span><span class="p">)).</span><span class="nf">presigned_post</span><span class="p">(</span>
  <span class="ss">key: </span><span class="s2">"uploads/</span><span class="si">#{</span><span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span><span class="si">}</span><span class="s2">/${filename}"</span>
<span class="p">)</span>
</code></pre></div>
<p>The <code>aws-sdk</code> gem will automatically reference the <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_KEY</code> and <code>AWS_REGION</code> keys from the environment to correctly configure itself. If you don&#39;t believe me, try these three methods:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">resource</span><span class="p">.</span><span class="nf">client</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">credentials</span><span class="p">.</span><span class="nf">access_key_id</span>
<span class="n">resource</span><span class="p">.</span><span class="nf">client</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">credentials</span><span class="p">.</span><span class="nf">secret_access_key</span>
<span class="n">resource</span><span class="p">.</span><span class="nf">client</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">region</span>
</code></pre></div>
<p>They will return the same values as specified in <code>.env</code>, if you&#39;ve configured all the above correctly.</p>

<p>Let&#39;s go back and look at what that <code>post</code> is. It&#39;s an instance of <code>Aws::S3::PresignedPost</code>, and it has two main methods that you need to know about: <code>url</code> and <code>fields</code>.</p>

<p>The <code>url</code> method is easy: it returns the URL to the bucket that will contain your uploaded files. Something like <code>https://[bucket].s3-[region].amazonaws.com</code>. Yours might be slightly different depending on the region you specified.</p>

<p>The <code>fields</code> method is a little more complicated. It will return a hash with the following keys:</p>

<ul>
<li><code>key</code>: The path where the file will live. We specified a timestamp and <code>${filename}</code> here. The <code>${filename}</code> part will be replaced by the name of the actual file when it has been uploaded.</li>
<li><code>policy</code>: A Base64 encoded JSON blob, listing the policy for this post. For more info, <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html">read here</a>.</li>
<li><code>x-amz-credential</code>: Specifies the access key used, the current date, and the scope to where this particular credential is used.</li>
<li><code>x-amz-algorithm</code>: The encryption algorithm used to generate the signature.</li>
<li><code>x-amz-date</code>: Today&#39;s date.</li>
<li><code>x-amz-signature</code>: The &quot;signed&quot; part of the request. A unique signature which verifies this request. For information on how this is constructed, <a href="http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html#query-string-auth-v4-signing">read this</a>.</li>
</ul>

<p>When we&#39;re building our form, we need to use both the <code>url</code> and the <code>fields</code> parts of this <code>PresignedPost</code>. The combination of these two things will authenticate users with AWS and allow them to put files in our S3 buckets. We must generate the <code>PresignedPost</code> object server-side first, which we can do in our <code>UploadsController</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">UploadsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
    <span class="n">s3</span> <span class="o">=</span> <span class="no">Aws</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">Resource</span><span class="p">.</span><span class="nf">new</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="n">s3</span><span class="p">.</span><span class="nf">bucket</span><span class="p">(</span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s1">'AWS_BUCKET'</span><span class="p">)).</span><span class="nf">presigned_post</span><span class="p">(</span>
      <span class="ss">key: </span><span class="s2">"uploads/</span><span class="si">#{</span><span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span><span class="si">}</span><span class="s2">/${filename}"</span><span class="p">,</span>
      <span class="ss">allow_any: </span><span class="p">[</span><span class="s1">'utf8'</span><span class="p">,</span> <span class="s1">'authenticity_token'</span><span class="p">],</span>
      <span class="ss">acl: </span><span class="s2">"authenticated-read"</span><span class="p">,</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>We&#39;re generating that <code>PresignedPost</code> here the same way as we&#39;ve done in the console, with two small differences: we&#39;re using an <code>allow_any</code> and an <code>acl</code> key.</p>

<p>Rails forms automatically insert two fields called <code>utf8</code> and <code>authenticity_token</code>. AWS uses the fields of the request to build the signature, and if any extra fields are added to the request then that may alter the signature. By using <code>allow_any</code> here, we&#39;re saying that it&#39;s OK for these fields to be <em>present</em>, and we don&#39;t -- and AWS shouldn&#39;t -- necessarily care about what those fields&#39; values are.</p>

<p>If we didn&#39;t specify this <code>allow_any</code> key, our upload would fail with a &quot;403 Forbidden&quot; status, and the response body would say:</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Error&gt;</span>
  <span class="nt">&lt;Code&gt;</span>AccessDenied<span class="nt">&lt;/Code&gt;</span>
    <span class="nt">&lt;Message&gt;</span>Invalid according to Policy: Extra input fields: utf8<span class="nt">&lt;/Message&gt;</span>
    ...
<span class="nt">&lt;/Error&gt;</span>
</code></pre></div>
<p>By setting up this little bit of configuration now, we avoid those issues later on.</p>

<p>The <code>acl</code> key will configure our uploaded objects permissions in such a way that only signed S3 requests can read those files.</p>

<p>Now with the <code>PresignedPost</code> generated server-side, we&#39;re going to need to change our upload form to use that <code>PresignedPost</code>&#39;s <code>url</code> and <code>fields</code>. Let&#39;s change <code>app/views/uploads/new.html.erb</code> to this:</p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="cp">&lt;%=</span> <span class="n">form_tag</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">url</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"dropzone"</span><span class="p">,</span> <span class="ss">id: </span><span class="s2">"uploader"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">fields</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">hidden_field_tag</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div>
<p>These simple changes will now use the <code>PresignedPost</code> object&#39;s <code>url</code> and <code>fields</code> to build out our form. When files are uploaded, they will go to the S3 bucket that we specified with <code>AWS_BUCKET</code> in <code>.env</code>.</p>

<p>There&#39;s one more small configuration change that we need to make on the AWS side of things before this will all work, and that&#39;s CORS (Cross-Origin Resource Sharing). Open up your S3 bucket in the AWS console, go to Permissions, and then CORS Configuration and paste in this:</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;CORSConfiguration&gt;</span>
 <span class="nt">&lt;CORSRule&gt;</span>
   <span class="nt">&lt;AllowedOrigin&gt;</span>*<span class="nt">&lt;/AllowedOrigin&gt;</span>

   <span class="nt">&lt;AllowedMethod&gt;</span>PUT<span class="nt">&lt;/AllowedMethod&gt;</span>
   <span class="nt">&lt;AllowedMethod&gt;</span>POST<span class="nt">&lt;/AllowedMethod&gt;</span>
   <span class="nt">&lt;AllowedMethod&gt;</span>GET<span class="nt">&lt;/AllowedMethod&gt;</span>

   <span class="nt">&lt;AllowedHeader&gt;</span>*<span class="nt">&lt;/AllowedHeader&gt;</span>
 <span class="nt">&lt;/CORSRule&gt;</span>
<span class="nt">&lt;/CORSConfiguration&gt;</span>
</code></pre></div>
<p>You may want to set the <code>AllowedOrigin</code> to your website here; I&#39;ve just left it as an asterisk to make it easier for myself. This configuration allows any authenticated website&#39;s users to issue <code>PUT</code>, <code>POST</code> and <code>GET</code> requests to this S3 bucket. If we tried to do an upload without this configuration, we would see an error that said:</p>

<blockquote>
<p>XMLHttpRequest cannot load https://[bucket].s3-[region].amazonaws.com/. Response to preflight request doesn&#39;t pass access control check: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http://localhost:3000&#39; is therefore not allowed access. The response had HTTP status code 403.</p>
</blockquote>

<p>With this configuration in place, it should now be possible to upload a file to the bucket:</p>

<p><img src="/images/dropzone/successful-upload.gif" alt="Successful upload"></p>

<p>This is what you should see too with your upload.</p>

<h3>Recording the upload</h3>

<p>Our upload now arrives safely on S3, but we currently do not have any record of it within our application. With Paperclip, when a file is uploaded we have to attach it to a particular model&#39;s instance, and through that model instance we track the location of the file. When we upload directly to S3, we don&#39;t have that same kind of &quot;automatic&quot; tracking that Paperclip provides.</p>

<p>We&#39;re going to have to come up with another way of recording this upload within our application. Some hipster ops would probably recommend that you trigger an AWS lambda event whenever a file is uploaded to the bucket, and then that event posts back to your application... but I think that is a touch too complicated.</p>

<p>What we&#39;ll do instead is to get S3 to report back after the file has been successfully uploaded. S3 will do this in the response it returns from a file upload request, as long as we configure it to do so. This response will contain the location of the file that has been uploaded, and then with that information we can then create an <code>Upload</code> record.</p>

<p>To make S3 report back information about the upload, we need to make a small change to our controller. We&#39;ll need to add an extra key to our <code>presigned_post</code> call:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@post</span> <span class="o">=</span> <span class="n">s3</span><span class="p">.</span><span class="nf">bucket</span><span class="p">(</span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s1">'AWS_BUCKET'</span><span class="p">)).</span><span class="nf">presigned_post</span><span class="p">(</span>
  <span class="ss">key: </span><span class="s2">"uploads/</span><span class="si">#{</span><span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span><span class="si">}</span><span class="s2">/${filename}"</span><span class="p">,</span>
  <span class="ss">allow_any: </span><span class="p">[</span><span class="s1">'utf8'</span><span class="p">,</span> <span class="s1">'authenticity_token'</span><span class="p">],</span>
  <span class="ss">success_action_status: </span><span class="mi">201</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div>
<p>This small change tells S3 that we would like a response back. By default, S3 returns a &quot;204 No Content&quot; status. This configuration option changes that to a &quot;201 Created&quot;, which will contain a response body that contains the file information.</p>

<p>The next issue that we have to deal with is that Dropzone + S3 are handling the upload, and we don&#39;t currently have a way to intercept the response back from S3. Fortunately, Dropzone is easily configurable and so we can get it perform an action once a file has been uploaded successfully.</p>

<p>Let&#39;s configure Dropzone like this now:</p>

<p><strong>app/assets/javascripts/uploads.js</strong></p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Dropzone</span><span class="p">.</span><span class="nx">autoDiscover</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

<span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">myDropzone</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dropzone</span><span class="p">(</span><span class="s1">'#uploader'</span><span class="p">,</span> <span class="p">{</span> <span class="na">timeout</span><span class="p">:</span> <span class="mi">0</span> <span class="p">});</span>

  <span class="nx">myDropzone</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">"success"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">request</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">resp</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">parseXML</span><span class="p">(</span><span class="nx">request</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">filePath</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">resp</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">"Key"</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>

    <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'/uploads'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">authenticity_token</span><span class="p">:</span> <span class="nx">$</span><span class="p">.</span><span class="nx">rails</span><span class="p">.</span><span class="nx">csrfToken</span><span class="p">(),</span>
      <span class="na">upload</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">filePath</span><span class="p">,</span>
        <span class="na">file_type</span><span class="p">:</span> <span class="nx">file</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span>
        <span class="na">last_modified</span><span class="p">:</span> <span class="nx">file</span><span class="p">.</span><span class="nx">lastModified</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div>
<p>Again, I&#39;m going a bit &quot;old-school&quot; with the jQuery usage. Sorry, JS hipsters. This could very well <a href="https://github.com/founderlab/react-dropzone-s3-uploader">just as easily be a React component</a>, but I&#39;m wanting to keep it relatively simple here.</p>

<p>The first thing that we do here is to turn off Dropzone&#39;s autodiscovery. We do this because we want to configure a custom dropzone component, but at the same time we want to keep the styling provided by <code>dropzone.css</code>. This styling refers to the class <code>dropzone</code>, but Dropzone&#39;s autodiscovery feature applies dropzone to any element with that class. So to have the styling but <em>not</em> the autodiscovery, we disable this option.</p>

<p>Then we go about configuring the custom Dropzone component. We start by linking it to the <code>#uploader</code> element (our <code>form_tag</code>), and setting the timeout to 0. By default Dropzone&#39;s timeout is 30 seconds, just like Heroku&#39;s. If we have a large file that we&#39;re uploading through Dropzone and/or a slow (read: Australian) internet connection, then Dropzone will cancel the request after 30 seconds. This option disables that feature.</p>

<p>The <code>on</code> function call then sets a handler for a &quot;success&quot; event, which is what happens right after a file has been uploaded. The first argument to this callback is the <code>file</code> which has just been uploaded, and contains some handy information like the file&#39;s content type and its last modification date.</p>

<p>The content type can come in handy if you want to display different files differently. For instance, for images you might want to display a smallnail but for a video or a PDF file you might want to display an icon.</p>

<p>The <code>request</code> argument represents the response that we get back from S3 after the file has been uploaded. Because of that <code>success_action_status</code> configuration in our controller, this response will be a short XML document.</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;PostResponse&gt;</span>
  <span class="nt">&lt;Location&gt;</span>https://[bucket].s3-[region].amazonaws.com/[file]<span class="nt">&lt;/Location&gt;</span>
  <span class="nt">&lt;Bucket&gt;</span>[bucket]<span class="nt">&lt;/Bucket&gt;</span>
  <span class="nt">&lt;Key&gt;</span>[file]<span class="nt">&lt;/Key&gt;</span>
  <span class="nt">&lt;ETag&gt;</span>[etag]<span class="nt">&lt;/ETag&gt;</span>
<span class="nt">&lt;/PostResponse&gt;</span>
</code></pre></div>
<p>From this XML response, we extract the <code>Key</code> element by using jQuery&#39;s <code>$.parseXML</code> function, and then send that through in a <code>POST</code> request with <code>$.post</code> to <code>/uploads</code>. With this request, we need to send through the authenticity token, which we get with <code>$.rails.csrfToken</code>.</p>

<p>This request will hit the <code>create</code> action of our <code>UploadsController</code> which doesn&#39;t yet exist, so let&#39;s create it:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="no">Upload</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="n">upload_params</span><span class="p">)</span>

  <span class="n">head</span> <span class="ss">:ok</span>
<span class="k">end</span>

<span class="kp">private</span>

<span class="k">def</span> <span class="nf">upload_params</span>
  <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:upload</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:path</span><span class="p">,</span> <span class="ss">:file_type</span><span class="p">,</span> <span class="ss">:last_modified</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>With all this hooked up, we should now see uploads coming through to this controller. Go ahead and upload one and give it a spin. If it&#39;s successful, you&#39;ll see something like this in the Rails server output:</p>
<div class="highlight"><pre><code class="language-" data-lang="">Started POST "/uploads" for 127.0.0.1 at 2017-08-29 10:36:38 +1000
Processing by UploadsController#create as */*
  Parameters: {
    "authenticity_token"=&gt;"[token]",
    "upload"=&gt;{
      "path"=&gt;"uploads/1503966995/joe.png",
      "file_type"=&gt;"image/png",
      "last_modified"=&gt;"1503965717000"
    }}
   (0.1ms)  begin transaction
  SQL (0.5ms)  INSERT INTO "uploads" ...
   (1.5ms)  commit transaction
Completed 200 OK in 21ms (ActiveRecord: 2.8ms)
</code></pre></div>
<p>Hooray!</p>

<p>One issue though: if we display these uploads from S3 then they&#39;ll be displayed in their original resolutions. With Paperclip, it automatically resized uploads to smallnail or smaller versions, but with direct-to-S3 upload we&#39;re missing out on that feature. Let&#39;s look at how we can add that feature back to our app with imgix.</p>

<h3>Serving images using imgix</h3>

<p><a href="https://imgix.com">imgix</a> is a real-time image processing and CDN service. We can use them to dynamically resize the photos uploaded to our application.</p>

<p>imgix takes image hosting quite seriously. <a href="http://photos.imgix.com/building-a-graphics-card-for-the-internet">Take a look at their &quot;Building a Graphics Card for the Internet&quot; writeup + photos</a> just to see how serious they are about it.</p>

<p>Signing up is free, and they give you a $10 credit on signing up. That should be plenty to at least trial this.</p>

<p>Sign up to imgix, and create a new source. For the &quot;Source Type&quot; you&#39;ll want to choose &quot;Amazon S3&quot;, and then you&#39;ll need to fill in the AWS Settings. The images do not have a path prefix, so leave that blank. Under &quot;Security&quot; check &quot;Secure URLs&quot;. For why you&#39;d want to check that box, read <a href="https://docs.imgix.com/setup/securing-images">this page from imgix&#39;s docs</a>.</p>

<p>Once you&#39;ve setup the source, you&#39;ll need to get the token from under the &quot;Security&quot; section. It will look like <code>5pXdqzZw69drsRgB</code>. We&#39;ll use this token to securely sign our imgix URLs.</p>

<p>To generate these URLs, we can use the <code>imgix</code> gem. Let&#39;s add that to the <code>Gemfile</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">'imgix'</span><span class="p">,</span> <span class="s1">'~&gt; 1.1.0'</span>
</code></pre></div>
<p>Then run <code>bundle install</code>. Let&#39;s add our secure token to the <code>.env</code> file, just so it&#39;s not in our committed code. We&#39;ll also add in the subdomain for the source that we setup:</p>
<div class="highlight"><pre><code class="language-" data-lang="">IMGIX_TOKEN=5pXdqzZw69drsRgB
IMGIX_SUBDOMAIN=[your subdomain goes here]
</code></pre></div>
<p>We&#39;re adding in the subdomain here as it will be different for our production environment. The subdomain here should be a <em>development-specific</em> one.</p>

<p>With that there, let&#39;s now try generating an imgix URL with this gem in the rails console. First, we&#39;ll need an <code>Imgix::Client</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">client</span> <span class="o">=</span> <span class="no">Imgix</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
  <span class="ss">host: </span><span class="s2">"</span><span class="si">#{</span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"IMGIX_SUBDOMAIN"</span><span class="p">)</span><span class="si">}</span><span class="s2">.imgix.net"</span><span class="p">,</span>
  <span class="ss">secure_url_token: </span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"IMGIX_TOKEN"</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div>
<p>Then to sign a URL, we can use <code>Imgix::Client#path</code>. By this point, we should have at least one upload, so let&#39;s use that upload&#39;s path to generate this URL:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">path</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">path</span><span class="p">(</span><span class="no">Upload</span><span class="p">.</span><span class="nf">last</span><span class="p">.</span><span class="nf">path</span><span class="p">)</span>
</code></pre></div>
<p>This gives us an <code>Imgix::Path</code> object. We can transform this path into a URL with the <code>to_url</code> method:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">path</span><span class="p">.</span><span class="nf">to_url</span>
</code></pre></div>
<p>The URL returned here will look something like:</p>
<div class="highlight"><pre><code class="language-" data-lang="">https://[imgix subdomain].imgix.net/uploads/[path]?ixlib=rb-1.1.0&amp;s=[signature]
</code></pre></div>
<p>If you open this URL in your browser you&#39;ll see the image that you have just uploaded, at the resolution you uploaded it. This is a good thing, as it proves that imgix&#39;s proxying service is working: imgix is fetching the image from the S3 bucket and serving the image through the imgix CDN.</p>

<p>The next step that we want to acheive is to get imgix to dynamically resize these photos. Let&#39;s say that we want an image that&#39;s 250×250 pixels to use as our smallnail. To get imgix to generate an image like that, we need to pass some options to <code>to_url</code>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">path.to_url(w: 250, h: 250)
</code></pre></div>
<p>This will return an image that maintains its aspect ratio, but at least the width or the height is a maximum of 250 pixels. Let me explain what I mean by this with an example: I have an image hosted through imgix that is 3264×2448 pixels. With the above options, imgix resizes this image to 250×188, effectively reducing the measurements of the photo by a ratio of 13.058.</p>

<p>However, in this particular application I want images that are perfect squares because I display these photos in a grid fashion. You might want this too, and so to generate images like this we can use the <code>:fit</code> option in <code>to_url</code>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">path.to_url(w: 250, h: 250, fit: 'crop')
</code></pre></div>
<p>imgix will now crop the image so that it fits neatly into a 250×250 square. There are <a href="https://docs.imgix.com/apis/url/size/fit">other styles of cropping, which are explained here</a>. You can load up the two images in two browser tabs to compare what they look like.</p>

<p>Let&#39;s make our images do this now through our view, and not just through the console. We can create a new class for this at <code>lib/upload_url.rb</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">UploadURL</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@client</span> <span class="o">=</span> <span class="no">Imgix</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
      <span class="ss">host: </span><span class="s2">"</span><span class="si">#{</span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"IMGIX_SUBDOMAIN"</span><span class="p">)</span><span class="si">}</span><span class="s2">.imgix.net"</span><span class="p">,</span>
      <span class="ss">secure_url_token: </span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"IMGIX_TOKEN"</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">small_url</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="vi">@client</span><span class="p">.</span><span class="nf">path</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">to_url</span><span class="p">(</span><span class="ss">w: </span><span class="mi">250</span><span class="p">,</span> <span class="ss">h: </span><span class="mi">250</span><span class="p">,</span> <span class="ss">fit: </span><span class="s1">'crop'</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">large_url</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="vi">@client</span><span class="p">.</span><span class="nf">path</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">to_url</span><span class="p">(</span><span class="ss">w: </span><span class="mi">1000</span><span class="p">,</span> <span class="ss">h: </span><span class="mi">1000</span><span class="p">,</span> <span class="ss">fit: </span><span class="s1">'crop'</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Then we can use this new class in <code>UploadsHelper</code>:</p>

<p><em>app/helpers/uploads_helper.rb</em></p>
<div class="highlight"><pre><code class="language-" data-lang="">require_dependency 'upload_url'

module UploadsHelper
  def small_image(upload)
    image_tag(upload_url.small_url(upload.path))
  end

  def large_image(upload)
    image_tag(upload_url.large_url(upload.path))
  end

  private

  def upload_url
    @upload_url ||= UploadURL.new
  end
end
</code></pre></div>
<p>We can then use these helpers to display smallnail versions of our image on the <code>index</code> template:</p>

<p><strong>app/views/uploads/index.html.erb</strong></p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="nt">&lt;h1&gt;</span>Uploads<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%</span> <span class="vi">@uploads</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">upload</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">small_image</span><span class="p">(</span><span class="n">upload</span><span class="p">)</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div>
<p>Or large images on the <code>show</code> template:</p>

<p><strong>app/views/uploads/show.html.erb</strong></p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb">...
  <span class="cp">&lt;%=</span> <span class="n">large_image</span><span class="p">(</span><span class="vi">@upload</span><span class="p">)</span> <span class="cp">%&gt;</span>
...
</code></pre></div>
<h3>Summary</h3>

<p>Dropzone, S3 and imgix allow us to upload and host our images very easily, without the need of the paperclip gem. By uploading directly to S3, we avoid tying up our application&#39;s processes with lengthy file uploads too.</p>

<p>If you found this post helpful, chuck a few bucks my way on PayPal: <a href="https://paypal.me/ryanbigg">https://paypal.me/ryanbigg</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Joy of Elixir</title>
   <link href="http://ryanbigg.com/2017/07/joy-of-elixir"/>
   <updated>2017-07-27T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2017/07/joy-of-elixir</id>
   <content type="html"><![CDATA[<p>I&#39;ve been using Elixir at work professionally for the past year and more recently I&#39;ve been starting to do some mentoring around Elixir. I&#39;ve noticed that while there are some very solid intermediate books/resources like <a href='https://elixir-lang.org/getting-started/introduction.html'>Getting Started guide on elixir-lang.org</a> the <a href='https://pragprog.com/book/elixir13/programming-elixir-1-3'>Programming Elixir</a> book and even <a href='https://elixirschool.com/'>Elixir School</a>, there doesn&#39;t seem to be anything at all book-wise directed at newbies.</p>

<p><strong>So I decided to write a little book called <a href='https://joyofelixir.com'><em>Joy of Elixir</em></a>.</strong></p>

<p><a href='https://joyofelixir.com'><img src='https://joyofelixir.com/images/small-cover.png' width='250px' style="float: right; margin-left: 20px;"></a></p>

<p>
  <strong>Joy of Elixir avoids assuming knowledge of <em>anything</em> about programming while teaching people about their first programming language: Elixir.</strong>
</p>

<aside>
  <header>Shut up and take my money!</header>

  <p>
    This book is available <a href='https://joyofelixir.com'>for free online</a> (under <a href='https://github.com/radar/joyofelixir/blob/master/license.txt'>the CC-BY-SA 4.0</a> license), and the book's <a href='https://github.com/radar/joyofelixir'>HTML + CSS-based source is on GitHub</a>.
  </p>

  <p>
    However, if you still want to throw a few dollars my way you can still <a href='https://leanpub.com/joyofelixir'>buy a PDF version</a> from Leanpub.
  </p>
</aside>

<p>
  It seemed like there is a vast, empty, <em>cavernous void</em> where there should be something like the excellent <a href='https://pine.fm/LearnToProgram/'>Learn to Program book by Chris Pine</a>. That book is for <a href='https://www.ruby-lang.org'>Ruby</a>; but there feels like there should be an equivalent to that for Elixir. I'm hoping <em>Joy of Elixir</em> can be that equivalent.
</p>

<p>
We have people completely new to programming <em>wanting</em> to learn Elixir -- because people who have learned Elixir already told them about it and how cool it is! -- but the support is not-quite-there yet. So this is an attempt to fill that void. Essentially a response to: <em>"Why won't <u>somebody</u> think of the newbies?"</em>. Well, someone <em>is</em> thinking of the newbies.
</p>

<p>
  Elixir is a great first language to get started with because its syntax is very newbie friendly and the initial concepts are very easy to learn. I would even go as far as to say that Elixir is easier to learn than Ruby because of Elixir's immutability and the way Elixir puts functions into modules -- (rather than the functions just being available, i.e. through inheritance or monkey-patching). I find it easier to navigate through other people's Elixir code, than I do to navigate through other people's Ruby code.
</p>

<p>
  I want Joy of Elixir to be the go-to-resource for teaching people programming <em>for the very first time</em> using Elixir. I want them to experience the <em>joy</em> that Elixir (and programming in general) can bring to people. I want people to feel like them have power over the machine because of the knowledge contained within this book.
</p>

<p>I want to have a book that I can confidently recommend to newbies when they ask about how they can learn Elixir. If you have a newbie in your life that wants to learn Elixir, point them at this book and let them read it. I&#39;m very keen to get some feedback from newbies (and everyone else) on how the content could be improved. There&#39;s instructions on how to give that feedback <a href='https://joyofelixir.com/about.html'>over on the &quot;About&quot; page</a>.</p>

<p>I aim to continue writing this book over the next couple of months and hope to have a finished edition by the end of the year. What&#39;s there at the moment is roughly a month&#39;s worth of work -- or put another way: 15,000 words (50ish pages). I&#39;m aiming for the book to be at about 50,000 words (125-150 pages) by the time it is done.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Rails' CurrentAttributes considered harmful</title>
   <link href="http://ryanbigg.com/2017/06/current-considered-harmful"/>
   <updated>2017-06-22T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2017/06/current-considered-harmful</id>
   <content type="html"><![CDATA[<p>This blog post has been <a href="https://techracho.bpsinc.jp/hachi8833/2017_08_01/43810">translated into Japanese</a>, thanks to <a href="https://twitter.com/hachi8833">@hachi8833</a>!</p>

<p>I was made aware of <a href="https://github.com/rails/rails/commit/24a864437e845febe91e3646ca008e8dc7f76b56">this commit</a> recently (thanks to Rebecca Skinner) to Rails which introduces what is effectively a global state to Rails applications.</p>

<p>Rather than writing why global state in-general is a bad thing myself, I will instead link you to this <a href="https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil">excellent question + answer on the Software Engineering Stack Exchange</a>.</p>

<blockquote>
<p>Very briefly, it makes program state unpredictable.</p>

<p>To elaborate, imagine you have a couple of objects that both use the same global variable. Assuming you&#39;re not using a source of randomness anywhere within either module, then the output of a particular method can be predicted (and therefore tested) if the state of the system is known before you execute the method.</p>
</blockquote>

<p>This implementation also chooses to use <a href="https://github.com/rails/rails/commit/24a864437e845febe91e3646ca008e8dc7f76b56#diff-3c3c0f647bc4702f9453c173a707aa06R90">thread-local variables</a> which <a href="https://stackoverflow.com/a/8291218/15245">this answer over on Stack Overflow</a> explains is not a good choice because:</p>

<blockquote>
<ul>
<li>It&#39;s harder to test them, as you will have to remember to set the thread-local variables when you&#39;re testing out code that uses it</li>
<li>Classes who use thread locals will need knowledge that these objects are not available for them but inside a thread-local variable and this kind of indirection usually breaks the law of demeter</li>
<li>Not cleaning up thread-locals might be an issue if your framework reuses threads (the thread-local variable would be already initiated and code that relies on ||= calls to initialize variables might fail</li>
</ul>
</blockquote>

<p>Not to mention that this also violates the well-established <a href="https://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a> too. Suddenly, <code>Current</code> is available <em>anywhere</em> in your application. Good code is <em>explicit</em> in how it makes data available to its methods / functions. This <code>CurrentAttributes</code> feature is not good code, nor is it making it <em>explicitly clear</em> how <code>Current.user</code> arrives in the model. It is just there &quot;magically&quot;.</p>

<p>I enjoy and have benefited from Rails magic in the past. Some of my favourite features are <code>render @collection</code> and the <a href="http://ryanbigg.com/2012/03/polymorphic-routes">polymorphic routing</a>. Those are great features because their scope is limited. I know that I can render a collection in a view. I know I can use polymorphic routing in controllers, models and helpers.</p>

<p>This <code>CurrentAttributes</code> is much too magical for my liking because of how it introduces a thread-local global state which hides where the actual work of setting values on <code>Current</code> is done, and because it is <em>implicit</em> about where those values come from.</p>

<p>&quot;They&#39;re just set in the controller!&quot;, may be a defense for this. But what if you don&#39;t have a controller? What if you have a background job instead? How about a test? True, in both cases you could use <code>Current</code> to provide the values:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">post_id</span><span class="p">)</span>
  <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
  <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="n">post_id</span><span class="p">)</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span>
  <span class="c1"># code to run the job goes here</span>
<span class="k">end</span>
</code></pre></div>
<p>Here, <code>Post#run_long_running_thing</code> can simply access the current user by accessing <code>Current.user</code>. But it is not immediately clear -- if all you&#39;re looking at is the <code>Post#run_long_running_thing</code> method -- where <code>Current.user</code> is being set in the first place. It&#39;s implied that it&#39;s set somewhere else, but to attempt to find where it&#39;s set in this context may be difficult. Doing a find in the project for <code>Current.user =</code> may turn up multiple places (controllers, jobs, etc.) where the variable is set. Which one is the right one <em>for this context</em>?</p>

<p>As for tests, for those you would need to setup <code>Current.user</code> before hand if you had any code relying on that. I&#39;d imagine something like:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
<span class="n">before</span> <span class="p">{</span> <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="o">=</span> <span class="n">user</span> <span class="p">}</span>

<span class="n">it</span> <span class="s2">"runs the long running thing"</span> <span class="k">do</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span>
<span class="k">end</span>
</code></pre></div>
<p>Again, it is not explicit when you&#39;re looking at the <code>run_long_running_thing</code> method or its tests where <code>Current.user</code> is being set.</p>

<p>There doesn&#39;t appear to be anywhere in the <code>CurrentAttributes</code> code -- as far as I can tell -- where it would reset the state of this <code>Current</code> object in between each test. Therefore, setting it in one test like what I&#39;ve done above now makes it bleed through &quot;magically&quot; into other tests. That behaviour seems like a horrible thing to have in a codebase. You could very well have situations where you&#39;re <em>expecting</em> <code>Current.user</code> to be <code>nil</code> but instead it&#39;s set to some vaule because some other test set it. Now which of the 500 tests in my application did that? Good luck finding it.</p>

<h3>Convention over configuration, and perhaps explicitness over implicitness?</h3>

<p>Rails is still a good framework. I know DHH&#39;s rebuttal to this will be &quot;don&#39;t use it then&quot; or something along those lines. Similar to his response to <a href="https://github.com/rails/rails/pull/25115">my reverting of callback suppression</a> a while back.</p>

<blockquote>
<p>Protecting programmers from themselves is explicitly not in the charter for Rails when it comes to providing features that have a valid use case but could be abused.</p>
</blockquote>

<p>I just can&#39;t reason with the guy at all. We have vastly different opinions on this sort of thing.</p>

<p>I think Rails choosing to go with ultra-implicitness -- like in this <code>Current</code> case -- is a vastly wrong move that will lead to a lot of frustration with Rails codebases that use this feature. I think Rails should, in situations like this, choose to opt for explicitness over implicitness. Rails has enough magic in it and it certainly doesn&#39;t need any more.</p>

<p>This feature is not something that was sought after (it appears like DHH thought it was a good idea one day and just <em>did it</em>), and we have much better ways of doing this. For instance, in the job code above, it would be better to pass it explicitly:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">post_id</span><span class="p">)</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
  <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="n">post_id</span><span class="p">)</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
  <span class="c1"># code to run the job goes here</span>
<span class="k">end</span>
</code></pre></div>
<p>Similarly, in the test explictness also wins:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>

<span class="n">it</span> <span class="s2">"runs the long running thing"</span> <span class="k">do</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>In both of these cases, it is <em>very</em> clear how <code>user</code> arrives in the <code>run_long_running_thing</code> method: it is passed in as an argument.</p>

<p>Let&#39;s finish by taking a look at the code from the pull request and look at how it can be written more explicitly.</p>

<h3>DHH&#39;s CurrentAttributes code vs my explicit code</h3>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># app/models/current.rb</span>
<span class="k">class</span> <span class="nc">Current</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">CurrentAttributes</span>
  <span class="n">attribute</span> <span class="ss">:account</span><span class="p">,</span> <span class="ss">:user</span>
  <span class="n">attribute</span> <span class="ss">:request_id</span><span class="p">,</span> <span class="ss">:user_agent</span><span class="p">,</span> <span class="ss">:ip_address</span>

  <span class="n">resets</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">zone</span> <span class="o">=</span> <span class="kp">nil</span> <span class="p">}</span>

  <span class="k">def</span> <span class="nf">user</span><span class="o">=</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="k">super</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">account</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">account</span>
    <span class="no">Time</span><span class="p">.</span><span class="nf">zone</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">time_zone</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># app/controllers/concerns/authentication.rb</span>
<span class="k">module</span> <span class="nn">Authentication</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="n">included</span> <span class="k">do</span>
    <span class="n">before_action</span> <span class="ss">:set_current_authenticated_user</span>
  <span class="k">end</span>

  <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">set_current_authenticated_user</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># app/controllers/concerns/set_current_request_details.rb</span>
<span class="k">module</span> <span class="nn">SetCurrentRequestDetails</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="n">included</span> <span class="k">do</span>
    <span class="n">before_action</span> <span class="k">do</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">request_id</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">uuid</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">user_agent</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">user_agent</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">ip_address</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">ip</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">include</span> <span class="no">Authentication</span>
  <span class="kp">include</span> <span class="no">SetCurrentRequestDetails</span>
<span class="k">end</span>
</code></pre></div>
<p>Including the <code>Authentication</code> module into <code>ApplicationController</code> to add a single method seems like a bit of premature extraction. Let&#39;s ignore that for now.</p>

<p>This implementation with its <code>before_action</code> to <code>set_current_authenticated_user</code> will mean that <code>Current.user</code> is set on all requests, even those which don&#39;t refer to the <code>current_user</code> at all.</p>

<p>A better implementation would be a <code>current_user</code> method which evaluates its <code>find</code> when it is called. You&#39;ll see this pattern in a lot of Rails applications.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">current_user</span>
  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div>
<p>In fact, this is similar to <a href="https://github.com/plataformatec/devise/blob/master/lib/devise/controllers/helpers.rb#L123-L125">how Devise presents its <code>current_user</code> method</a>. It uses <code>warden</code> instead of <code>cookies.signed</code>, but it&#39;s implementation is similar enough:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">current_</span><span class="c1">#{mapping}</span>
  <span class="vi">@current_</span><span class="c1">#{mapping} ||= warden.authenticate(scope: :#{mapping})</span>
<span class="k">end</span>
</code></pre></div>
<p>Ok, so now we&#39;ve got a <code>current_user</code> method which is available in the <em>controllers</em> but what if we want to use it in the view? For instance, if we want to say <code>Hello, #{current_user.name}</code> in a layout? Easy enough: make it a helper method.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">current_user</span>
  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
<span class="k">end</span>
<span class="n">helper_method</span> <span class="ss">:current_user</span>
</code></pre></div>
<p>Great, so now it&#39;s available in controllers, helpers and views. All without making it available <em>everywhere</em> in the current thread.</p>

<p>Now I would like to focus on the second half of DHH&#39;s code:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="no">Current</span><span class="p">.</span><span class="nf">account</span><span class="p">.</span><span class="nf">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Message</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:creator</span><span class="p">,</span> <span class="ss">default: </span><span class="o">-&gt;</span> <span class="p">{</span> <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="p">}</span>
  <span class="n">after_create</span> <span class="p">{</span> <span class="o">|</span><span class="n">message</span><span class="o">|</span> <span class="no">Event</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">record: </span><span class="n">message</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Event</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">before_create</span> <span class="k">do</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">request_id</span> <span class="o">=</span> <span class="no">Current</span><span class="p">.</span><span class="nf">request_id</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">user_agent</span> <span class="o">=</span> <span class="no">Current</span><span class="p">.</span><span class="nf">user_agent</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">ip_address</span> <span class="o">=</span> <span class="no">Current</span><span class="p">.</span><span class="nf">ip_address</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Here, DHH is <em>implicitly</em> linking the message&#39;s creator to the <code>Current.user</code> by using the <code>default</code> option on <code>belongs_to</code>. I believe that this violates the MVC layer abstraction. The <code>Current.user</code> is just &quot;magically&quot; available in the model, with absolutely no context of how it got there in the first place.</p>

<p>A common pattern in Rails applications is not to do this, but instead to explicitly set the <code>creator</code> at the point of creation:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="vi">@message</span> <span class="o">=</span> <span class="n">current_account</span><span class="p">.</span><span class="nf">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>
  <span class="vi">@message</span><span class="p">.</span><span class="nf">creator</span> <span class="o">=</span> <span class="n">current_user</span>
</code></pre></div>
<p>Let&#39;s assume <code>current_account</code> is a similar abstraction to the <code>current_user</code> one. It&#39;s clear here that in the controller that <em>this</em> is where the <code>creator</code> is assigned. With DHH&#39;s code, it is not immediately clear from the controller code itself that <code>creator</code> is assigned at all.</p>

<p>Not only that, but this also lends itself to being abstracted into a &quot;service object&quot; which is responsible for creating a message. Let&#39;s say that you want to log an <code>Event</code> whenever a <code>Message</code> is created. Oh, I see DHH&#39;s code does that already with an <code>after_create</code> callback. Well then.</p>

<p>In the case of DHH&#39;s code, the <code>after_create</code> callback will happen whenever a <code>Message</code> is created anywhere in your application. This might be suitable in a controller, but what if you want to test some database logic, or something else which requires a persisted message, and you don&#39;t care about an event being there at the same time? What if when you created an event you had extra logic on it which caused <em>another</em> record to be created too?</p>

<p>Having such a callback irrevocably ties together messages and events <em>implicitly</em>.</p>

<p>As I mentioned before, it would be better to abstract this into a &quot;service object&quot;.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CreateMessageWithCreator</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">current_user</span><span class="p">)</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">current_account</span><span class="p">.</span><span class="nf">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>
    <span class="n">message</span><span class="p">.</span><span class="nf">creator</span> <span class="o">=</span> <span class="n">current_user</span>
    <span class="n">message</span><span class="p">.</span><span class="nf">save</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>You can then call this code in your controller like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="k">if</span> <span class="no">CreateMessageWithCreator</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">message_params</span><span class="p">,</span> <span class="n">current_user</span><span class="p">)</span>
    <span class="no">Event</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">record: </span><span class="n">record</span><span class="p">)</span>
    <span class="n">flash</span><span class="p">[</span><span class="ss">:notice</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Message sent!"</span>
    <span class="n">redirect_to</span> <span class="ss">:index</span>
  <span class="k">else</span>
    <span class="n">flash</span><span class="p">[</span><span class="ss">:alert</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Message failed to send."</span>
    <span class="n">render</span> <span class="ss">:new</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This way, then you would know that in <em>this particular case</em> you&#39;re <em>definitely</em> creating a message with a linked creator and it frees you up to create messages without creators or events, if the need did arise.</p>

<p>I think having these dependencies clearly highlighted in the code rather than magically abstracted away is a much, much better solution.</p>

<h2>Conclusion</h2>

<p>Introducing a global state to Rails seems like a terrible idea and while I deeply, deeply wish this change is reverted, that is very likely not going to happen because it&#39;s DHH&#39;s change and it&#39;s his framework. DHH is allowed to be a footgun merchant if he wishes to be. I am just sad to see that, despite evidence that this is a genuinely bad idea, DHH carried on with it. I thought with his years of experience he would know better by now.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Rails 5 in Action</title>
   <link href="http://ryanbigg.com/2017/03/rails-5-in-action"/>
   <updated>2017-03-30T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2017/03/rails-5-in-action</id>
   <content type="html"><![CDATA[<p>I have been asked a few times since Rails 5 was released when Rails 5 in Action (an update to <a href="https://www.manning.com/books/rails-4-in-action">Rails 4 in Action</a>) will be published. The short answer is that it won&#39;t be.</p>

<p>After Rails 4 in Action, I cut ties with Manning due to problems I&#39;ve outlined in many previous posts. Most recently <a href="http://ryanbigg.com/2015/08/my-self-publishing-success-story">&quot;My self-publishing success story&quot;</a>. It just isn&#39;t worth any more energy/time to continue to work with that particular publisher. Since they are the ones that own the rights to the Rails * in Action series and the IP of the book, working on an update to Rails 4 in Action would mean working with the publisher, and that&#39;s not something that I would choose to do again.</p>

<p>Couple this with a 3-year &quot;no-compete&quot; clause that means I won&#39;t be able to publish any book-length Rails beginner content. So even a competing book to Rails 4 in Action is out of the question (at least for the next two and a bit years).</p>

<p>So Rails 5 in Action is <em>never</em> coming out. <a href="https://github.com/rubysherpas/r4ia_examples/">Rails 4 in Action&#39;s code</a> will still work with Rails 5 (mostly) and it&#39;s a valuable demonstration of how to build a decently sized Rails application.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Toy Robot, Deep Dive Rails and AsciiDoc Toolchain</title>
   <link href="http://ryanbigg.com/2017/02/toy-robot-deep-dive-rails-and-asciidoc-toolchain"/>
   <updated>2017-02-20T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2017/02/toy-robot-deep-dive-rails-and-asciidoc-toolchain</id>
   <content type="html"><![CDATA[<p>This really should be three separate blog posts, but since they&#39;re all tangentially related to writing they&#39;re going to be one blog post. Here goes.</p>

<h2>Toy Robot</h2>

<p>I went to write a blog post here in December about how to do the Toy Robot exercise (the one <a href="https://joneaves.wordpress.com/2014/07/21/toy-robot-coding-test/">written by Jon Eaves</a>). I thought that post would be about 10k-15k words. It ended up being 25k. My buddy <a href="https://twitter.com/parndt">Phil Arndt</a> suggested that I make it into a book because it&#39;s so long.</p>

<p>I&#39;ve done just that: <strong><a href="https://leanpub.com/toyrobot/">The Toy Robot book</a> is now available for as little as $5 on Leanpub.</strong></p>

<p>The book is a guided walkthrough on how I would personally implement the Toy Robot exercise, and it isn&#39;t designed to be a <em>100% perfect implementation that makes every coder weep at its joy</em>. It&#39;s just one attempt at the problem, and I put it out there because I think perhaps some people can learn from my approach and the explanation that goes along with it in the book. A few Ruby newbies I&#39;ve talked to have found the Toy Robot hard to do (they don&#39;t know where to start, usually). This is a book for those people. It breaks the problem down into small chunks and tackles them one-at-a-time. If you know of any Ruby newbies, be sure to let them know about this book.</p>

<p>I&#39;ve heard from a couple of those Ruby newbies that they love the book and have learned some things from it. Things like:</p>

<blockquote>
<p>I would like to say that your toy robot book is fantastic!</p>
</blockquote>

<p>So that&#39;s nice.</p>

<h2>Deep Dive Rails</h2>

<p>I started writing <a href="https://leanpub.com/ddr">Deep Dive Rails</a>, according to the Git logs, in April of 2015.</p>

<p>This was around the time that I picked back up on <a href="https://www.manning.com/books/rails-4-in-action">Rails 4 in Action</a> and worked on finishing it with <a href="https://twitter.com/sevenseacat">Rebecca Skinner</a>. That was a process. After that, I took a short writing break for a few months and then went about writing <a href="https://leanpub.com/multi-tenancy-rails-2">the 2nd edition of Multitenancy with Rails</a>. I finished that near the end of June last year. Then my daughter was born in September and I&#39;ve been busy since.</p>

<p>Enough people have bought Deep Dive Rails (50 at this moment) that I think I am obliged to finish it. I think I&#39;ve now got enough time on train journeys and whatnot to finish it, and that&#39;s what I&#39;m going to be focussing on for the remainder of this year.</p>

<p>I was going through the refunds page for this book just out of interest and I found this choice quote:</p>

<blockquote>
<p>The book is basically taking you through what already exists. <a href="http://guides.rubyonrails.org/initialization.html">The Rails Initialization Guide</a>. Granted, there are some filled in details but even those are not necessarily comprehensive. For example, even when starting out, the first examples entirely depend on what Ruby distribution platform you are using, such as RVM or rbenv. Essentially, the paths of where to look for things can be a bit different. When I had to search out those things on my own, that&#39;s when I came across the existing material that this author was clearly cribbing from. Again, this isn&#39;t to say that the book is not trying to offer something perhaps new or at least more in-depth but right now that simply doesn&#39;t exist in the book.</p>
</blockquote>

<p>This refund reason is extremely ironic, because I wrote the original version of this guide. The guide has been an idea I&#39;ve had since about 2010. I explain as much in the intro to the book:</p>

<blockquote>
<p>This book has been a long time coming. I (Ryan) originally started writing
something along these same lines when I was taking donations to work on Rails
documentation back at the end of 2010. I got about 8,000 words into writing it
as a Rails guide and figured that nobody would want to read a guide that long
and so I gave up.</p>
</blockquote>

<p>Interestingly, Deep Dive Rails is now around 15,000 words long and given that 50 people have purchased a copy, I&#39;d say that there definitely <em>are</em> people interested in reading it. 2010-Ryan was wrong.</p>

<p>I hope that this reader that got the refund realises the error of their ways and buys Deep Dive Rails once more.</p>

<p>So yes, I will continue working on Deep Dive Rails this year. I&#39;m currently working on updating it for Rails 5. Once I&#39;m done updating the existing content for that version of Rails, I&#39;ll release a new version. That should happen within the next couple of weeks. Then I&#39;ll be adding new content to the book. No idea of when I&#39;ll be finished with it. When it&#39;s done, I guess.</p>

<h2>AsciiDoc Toolchain</h2>

<p>In the process of writing Rails 4 in Action and <a href="https://leanpub.com/ddr">Deep Dive Rails</a>, we built a toolchain to help us work with the <a href="http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/">AsciiDoc markup language</a>. We chose AsciiDoc for Rails 4 in Action because it was a much more pleasant experience than XML or Microsoft Word to write a book in, and it compiles down to DocBook (XML). Writing books in DocBook is not advisable or safe for your mental health. AsciiDoc certainly is though.</p>

<p>Compare and contrast.</p>

<p>Here&#39;s some DocBook XML:</p>

<p><img src="/images/asciidoc/docbook.png" alt="Docbook"></p>

<p>Here&#39;s some AsciiDoc for the exact same text:</p>

<p><img src="/images/asciidoc/asciidoc.png" alt="AsciiDoc"></p>

<p>I certainly know which one I prefer. I wish somebody told me about AsciiDoc sooner. It&#39;s really nice to write in.</p>

<p>(The IDs on the XML elements in the DocBook example is because Manning&#39;s review tool required each element to have a unique ID so that it could track notes on individual elements over the course of their lives.)</p>

<p>Recently, another author has asked me about how I write in AsciiDoc, and so I&#39;ve decided to <a href="https://github.com/radar/asciidoc-toolchain">put the toolchain up on GitHub</a>. If you want to start writing a book in AsciiDoc, you can clone this repo and that&#39;ll provide you with a good starting point. It comes with Rake tasks that will allow you to generate good looking HTML and PDF editions of your book, but I can&#39;t say the same for the epub and mobi formats. Patches welcome.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Validating nested JSON data with ex_json_schema</title>
   <link href="http://ryanbigg.com/2016/11/validating-nested-json-data-with-ex_json_schema"/>
   <updated>2016-11-24T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2016/11/validating-nested-json-data-with-ex_json_schema</id>
   <content type="html"><![CDATA[<p>I&#39;ve been working on an Elixir service which reads events from a JSON API and then processes those events. The code to deserialize the events runs a little like this:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Event</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">deserialize</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">%{</span><span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="n">id</span><span class="p">,</span> <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="n">type</span><span class="p">,</span> <span class="sd">"</span><span class="s2">body"</span> <span class="o">=&gt;</span> <span class="n">body</span><span class="p">}</span> <span class="o">=</span> <span class="n">data</span>
    <span class="p">%</span><span class="bp">__MODULE__</span><span class="p">{</span>
      <span class="ss">id:</span> <span class="n">id</span><span class="p">,</span>
      <span class="ss">type:</span> <span class="n">type</span><span class="p">,</span>
      <span class="ss">body:</span> <span class="n">body</span> <span class="o">|&gt;</span> <span class="n">event_module</span><span class="o">.</span><span class="n">deserialize</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>It&#39;s invoked like <code>Event.deserialize(Response, data)</code>, where <code>data</code> looks something like:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="p">%{</span>
  <span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">1"</span><span class="p">,</span>
  <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">response"</span><span class="p">,</span>
  <span class="sd">"</span><span class="s2">body"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
    <span class="sd">"</span><span class="s2">survey_id"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">123456"</span><span class="p">,</span>
    <span class="sd">"</span><span class="s2">answers"</span> <span class="o">=&gt;</span> <span class="p">[</span>
      <span class="p">%{</span>
        <span class="sd">"</span><span class="s2">comment"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">Some text goes here"</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>I&#39;ve come across an issue where <em>sometimes</em> the event&#39;s data is either malformed, or entirely missing and so I want to validate it as it arrives in the service. The way that I&#39;ve chosen to do this is to use <a href="https://github.com/jonasschmidt/ex_json_schema"><code>ex_json_schema</code></a>, which allows you to validate that an Elixir <code>Map</code>  matches a <a href="http://json-schema.org/">JSON Schema</a> specification, which is also defined as an Elixir <code>Map</code>.</p>

<p>In the case of the above data, I want to make sure that the data <em>definitely</em> contains the <code>survey_id</code>, and <code>answers</code> properties, and that every answer has a <code>comment</code> property. If these conditions aren&#39;t met, then the data should be declared invalid and the event should not be processed.</p>

<p>To do this, I first declare a schema in the <code>Response</code> module:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Response</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">schema</span> <span class="k">do</span>
    <span class="p">%{</span>
      <span class="sd">"</span><span class="s2">definitions"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
        <span class="sd">"</span><span class="s2">answer"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
          <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">object"</span><span class="p">,</span>
          <span class="sd">"</span><span class="s2">required"</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="sd">"</span><span class="s2">comment"</span><span class="p">],</span>
          <span class="sd">"</span><span class="s2">properties"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
            <span class="sd">"</span><span class="s2">comment"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
              <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">string"</span>
            <span class="p">},</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">},</span>
      <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">object"</span><span class="p">,</span>
      <span class="sd">"</span><span class="s2">required"</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="sd">"</span><span class="s2">survey_id"</span><span class="p">,</span> <span class="sd">"</span><span class="s2">answers"</span><span class="p">],</span>
      <span class="sd">"</span><span class="s2">properties"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
        <span class="sd">"</span><span class="s2">survey_id"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
          <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">string"</span>
        <span class="p">},</span>
        <span class="sd">"</span><span class="s2">answers"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
          <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">array"</span><span class="p">,</span>
          <span class="sd">"</span><span class="s2">items"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
            <span class="sd">"</span><span class="s2">$ref"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="err">#</span><span class="s2">/definitions/answer"</span>
          <span class="p">}</span>
        <span class="p">},</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="o">|&gt;</span> <span class="no">ExJsonSchema</span><span class="o">.</span><span class="no">Schema</span><span class="o">.</span><span class="n">resolve</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This schema defines that the <code>survey_id</code> and <code>answers</code> properties within the &quot;root&quot; of the <code>Map</code> that I&#39;m providing are present, and also validates that all the items within <code>answers</code> have a <code>comment</code> property. Not only this, but it also validates the type of the data that&#39;s incoming too. The <code>survey_id</code> and <code>comment</code> properties should <em>always</em> be strings. If they aren&#39;t, then the data will be invalid according to this schema.</p>

<p>To use this schema, we first have to <em>resolve</em> it. The <code>ex_json_schema</code> documentation suggests resolving the schema only once:</p>

<blockquote>
<p>You should only resolve a schema once to avoid the overhead of resolving it in every validation call.</p>
</blockquote>

<p>In order to follow that instruction, I pass the schema to the <code>deserialize</code> function:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Event</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">deserialize</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span> <span class="k">do</span>
    <span class="o">...</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>To validate that the data matches the schema, I&#39;m doing this:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Event</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">process</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">validate</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span>
    <span class="o">|&gt;</span> <span class="n">deserialize</span><span class="p">(</span><span class="n">event_module</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">validate</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">%{</span><span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="n">id</span><span class="p">,</span> <span class="sd">"</span><span class="s2">body"</span> <span class="o">=&gt;</span> <span class="n">body</span><span class="p">}</span> <span class="o">=</span> <span class="n">event</span>

    <span class="k">case</span> <span class="no">ExJsonSchema</span><span class="o">.</span><span class="no">Validator</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">schema</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="k">do</span>
      <span class="ss">:ok</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">event</span><span class="p">}</span>
      <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="n">errors</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">errors</span><span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">deserialize</span><span class="p">({</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">event_module</span><span class="p">,</span> <span class="n">event</span><span class="p">},</span> <span class="n">event_module</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">%{</span><span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="n">id</span><span class="p">,</span> <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="n">type</span><span class="p">,</span> <span class="sd">"</span><span class="s2">body"</span> <span class="o">=&gt;</span> <span class="n">body</span><span class="p">}</span> <span class="o">=</span> <span class="n">event</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">%</span><span class="bp">__MODULE__</span><span class="p">{</span>
      <span class="ss">id:</span> <span class="n">id</span><span class="p">,</span>
      <span class="ss">type:</span> <span class="n">type</span><span class="p">,</span>
      <span class="ss">body:</span> <span class="n">body</span> <span class="o">|&gt;</span> <span class="n">event_module</span><span class="o">.</span><span class="n">deserialize</span><span class="p">,</span>
    <span class="p">}}</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">deserialize</span><span class="p">({</span><span class="ss">:error</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">errors</span><span class="p">},</span> <span class="n">_</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">errors</span><span class="p">}</span>
<span class="k">end</span>
</code></pre></div>
<p>There&#39;s now two new functions in this <code>Event</code> module: <code>process</code> and <code>validate</code>. The <code>process</code> function serves as the new entrypoint for this module, and it validates and deserializes the data. The <code>validate</code> function uses the schema to validate the data. If the data is valid, it returns <code>{:ok, data}</code>, and if it&#39;s not, then it returns <code>{:error, errors, id}</code>. That return value is then passed to <code>deserialize</code>, which will then deserialize a valid event, and pass through the errors if the data was not valid.</p>

<p>This <code>Event.process/3</code> function can then be invoked like this:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">EventProcessor</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">process_events</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">events</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">schema</span> <span class="o">=</span> <span class="n">event_module</span><span class="o">.</span><span class="n">schema</span> <span class="c1"># schema may be resolved earlier than this</span>
    <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">events</span><span class="p">,</span> <span class="k">fn</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span>
      <span class="n">process_event</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span>
    <span class="k">end</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">process_event</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">case</span> <span class="no">Event</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">event</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="n">process_event</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
      <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">errors</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="n">handle_error</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">errors</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>If, for example, a blank event was sent to <code>Event.process/3</code>, it would return the <code>{:error, id, errors}</code> tuple with some errors, which are very readable:</p>
<div class="highlight"><pre><code class="language-" data-lang=""><span class="p">{</span><span class="nt">"Required property survey_id was not present."</span><span class="err">,</span><span class="w"> </span><span class="nt">"#"</span><span class="err">},</span><span class="w">
</span><span class="p">{</span><span class="nt">"Required property comment was not present."</span><span class="err">,</span><span class="w"> </span><span class="nt">"#/answer/0"</span><span class="err">},</span><span class="w">
</span></code></pre></div>
<p>It&#39;s clear from this output that the event wasn&#39;t processed because the <code>survey_id</code> is missing, and the <code>comment</code> is missing from the first answer.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Elixir Tip: Enum.any? + match?</title>
   <link href="http://ryanbigg.com/2016/05/elixir-tip-enum-any-match"/>
   <updated>2016-05-28T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2016/05/elixir-tip-enum-any-match</id>
   <content type="html"><![CDATA[<p>I recently found out about the <a href="http://elixir-lang.org/docs/stable/elixir/Kernel.html#match?/2">match?/2</a> function in Elixir through the #elixir-lang IRC channel on Freenode.</p>

<p>What this function allows you to do is to determine if a given pattern matches a given expression. For instance, if you wanted to know if a list of maps contained a particular key + value combination, you could do this:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">people</span> <span class="o">=</span> <span class="p">[%{</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">John"</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">Jane"</span><span class="p">}]</span>
<span class="no">Enum</span><span class="o">.</span><span class="n">any?</span><span class="p">(</span><span class="n">people</span><span class="p">,</span> <span class="k">fn</span> <span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">match?</span><span class="p">(%{</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">John"</span><span class="p">},</span> <span class="n">person</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span>
</code></pre></div>
<p>This code will get Elixir to tell you if any of the people have the name &quot;John&quot;. In this case, the result would be <code>true</code>. You could even get fancy and use a shorter function:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="no">Enum</span><span class="o">.</span><span class="n">any?</span><span class="p">(</span><span class="n">people</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">match?</span><span class="p">(%{</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">John"</span><span class="p">},</span> <span class="nv">&amp;1</span><span class="p">)))</span>
</code></pre></div>
<p>This shorter function defines the same function in the first example, but instead of having a named argument to the function, <code>&amp;1</code> is used instead.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Multitenancy with Rails 2nd Edition</title>
   <link href="http://ryanbigg.com/2016/05/multitenancy-with-rails-2nd-edition"/>
   <updated>2016-05-22T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2016/05/multitenancy-with-rails-2nd-edition</id>
   <content type="html"><![CDATA[<p><a href="https://leanpub.com/multi-tenancy-rails-2/c/fin">Multitenancy with Rails 2nd edition</a> is now &quot;content complete&quot;. I have now finished doing the majority of the work on this book and all that is left is to go through it and &quot;proof&quot; it.</p>

<p>The book has been updated for Rails 4.2 and uses industry best practices of
building a multitenanted Rails application, and the best practices of using
Braintree or Stripe to add subscription features to that application.</p>

<p><strong>If you&#39;ve read <a href="http://manning.com/bigg2">Rails 4 in Action</a> or something of a
similar level to that, this book is a perfect &quot;next step&quot; for you. It adds
features which are more complicated than a basic &quot;CRUD&quot; app to an existing
codebase. If that appeals to you, <a href="https://leanpub.com/multi-tenancy-rails-2/c/fin">use the coupon code &quot;fin&quot; to get 50% off</a>.</strong></p>

<p>This update has been quite a long time coming: it took me 298 days from when I
started updating Chapter 1 to this current point. Next up, I&#39;ll go through the
book and make sure there&#39;s as few bugs and typos as possible. Once I&#39;m done
with that, then I will consider the book to be complete.</p>

<p>Thanks everyone for buying this book, reading it and providing feedback along the way.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Working with date ranges in Active Record</title>
   <link href="http://ryanbigg.com/2016/03/working-with-date-ranges-in-active-record"/>
   <updated>2016-03-09T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2016/03/working-with-date-ranges-in-active-record</id>
   <content type="html"><![CDATA[<p><strong>TL;DR: <a href="https://github.com/radar/by_star">Use the by_star gem and save yourself a lot of hassle</a>.</strong></p>

<p>When you&#39;re trying to get records for a particular date range in Active Record, for example from the beginning of the month to the end of the month, you may be tempted to write code like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">beginning_of_month</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">.</span><span class="nf">beginning_of_month</span>
<span class="n">end_of_month</span> <span class="o">=</span> <span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">end_of_month</span>
<span class="no">Post</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">created_at: </span><span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">.</span><span class="n">end_of_month</span><span class="p">)</span>
</code></pre></div>
<p>Let&#39;s say that the month is March 2016 (and it is, at the time of writing). This query will get you all posts between the 1st of March and the 31st of March, but not in the way you expect it. It will get you all posts between 00:00:00 of the 1st of March and 00:00:00 of 31st of March, which is probably not what you want, as it misses the last days posts completely. </p>

<p>What you&#39;ll want is all the posts between 00:00:00 of the 1st of March and 23:59:59.99999 of the 31st of March.</p>

<p>To do this, you <em>could</em> use <code>Time.current</code> instead:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">beginning_of_month</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">current</span><span class="p">.</span><span class="nf">beginning_of_month</span>
<span class="n">end_of_month</span> <span class="o">=</span> <span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">end_of_month</span>
<span class="no">Post</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">created_at: </span><span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">.</span><span class="n">end_of_month</span><span class="p">)</span>
</code></pre></div>
<p>This will give you the right set of posts, because <code>Time.current.end_of_month</code> is something like <code>Thu, 31 Mar 2016 23:59:59 UTC +00:00</code> (or it might even be in your local time zone, like `Thu, 31 Mar 2016 23:59:59 AEDT +11:00).</p>

<p>Or you could even do this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">beginning_of_month</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">.</span><span class="nf">beginning_of_month</span>
<span class="n">beginning_of_next_month</span> <span class="o">=</span> <span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">next_month</span>
<span class="no">Post</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">created_at: </span><span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">.</span><span class="n">beginning_of_next_month</span><span class="p">)</span>
</code></pre></div>
<p>This will also give you the right set of posts, because <code>beginning_of_month.next_month</code> is something like <code>Fri, 1 Apr 2016 00:00:00 UTC +00:00</code> (or it might even be in your local time zone, like `Thu, 31 Mar 2016 23:59:59 AEDT +11:00).</p>

<p>Or you could use <a href="https://github.com/radar/by_star">the <code>by_star</code> gem</a>. I wrote this gem to easily query date /
time ranges in Active Record and it has saved me a lot of frustration. The above code examples would then become:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Post</span><span class="p">.</span><span class="nf">by_month</span><span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">)</span>
</code></pre></div>
<p>This will retrieve all posts by the current month, and that means all the posts between 00:00:00 of the 1st of March and 23:59:59.99999 of the 31st of March will be returned if I ran this query today.</p>

<h2>Conclusion</h2>

<p><a href="https://github.com/radar/by_star">Use the by_star gem and save yourself a lot of hassle</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Truncating indexes in Elasticsearch 2</title>
   <link href="http://ryanbigg.com/2016/02/truncating-indexes-in-elasticsearch-2"/>
   <updated>2016-02-22T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2016/02/truncating-indexes-in-elasticsearch-2</id>
   <content type="html"><![CDATA[<p>In pre-2.0 versions of elasticsearch, you may have been truncating indexes using <code>delete_by_query</code>. This has been moved in Elasticsearch 2.0 out to a plugin, which can be installed with:</p>
<div class="highlight"><pre><code class="language-" data-lang="">bin/plugin install delete-by-query
</code></pre></div>
<p>Where <code>bin/plugin</code> is located wherever you installed Elasticsearch. On my Mac,
that path is <code>/usr/local/Cellar/elasticsearch/2.2.0_1/libexec</code> because I
installed Elasticsearch with Homebrew. If you&#39;re on Ubuntu and you installed
it from Elasticsearch&#39;s own package repo, it will be at
<code>/usr/share/elasticsearch</code>.</p>

<p>I&#39;m using the Elasticsearch Ruby gem to interact with my Elasticsearch instance, and this is the code I&#39;m using to truncate the indexes:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Index</span>
  <span class="k">class</span> <span class="nc">Indexers</span>
    <span class="k">def</span> <span class="nf">truncate_indexes</span>
      <span class="n">client</span> <span class="o">=</span> <span class="no">Elasticsearch</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span>
      <span class="n">client</span><span class="p">.</span><span class="nf">delete_by_query</span><span class="p">(</span><span class="ss">index: </span><span class="n">index_names</span><span class="p">,</span> <span class="ss">body: </span><span class="p">{</span> <span class="ss">query: </span><span class="p">{</span> <span class="ss">match_all: </span><span class="p">{}</span> <span class="p">}</span> <span class="p">})</span>
      <span class="n">client</span><span class="p">.</span><span class="nf">indices</span><span class="p">.</span><span class="nf">flush</span><span class="p">(</span><span class="ss">index: </span><span class="n">index_names</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This method is called after each spec has finished running. The <code>index_names</code>
is just a list of indexes that the <code>Index::Indexers</code> class knows about. The
<code>delete_by_query</code> functionality is available here from the <code>delete-by-query</code>
plugin that was installed. The <code>indices.flush</code> call is necessary because the
next query may return data that the <code>delete_by_query</code> request was supposed to
delete. The <code>flush</code> call clears the transaction log and memory and writes data
to disk, ensuring that the next query won&#39;t return data that was deleted.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Programming Phoenix Review</title>
   <link href="http://ryanbigg.com/2015/12/programming-phoenix"/>
   <updated>2015-12-24T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2015/12/programming-phoenix</id>
   <content type="html"><![CDATA[<p>During this Christmas break I&#39;ve been taking some time off from writing Multitenancy with Rails -- which I&#39;ll get back to <em>after</em> Christmas is over -- and instead of writing books I&#39;m reading them.</p>

<p><a href="https://pragprog.com/titles/phoenix/">Programming Phoenix</a> is the only book that I&#39;ve been reading so far. I&#39;ve now read through the whole thing. Despite that I&#39;ve filed over 40 errata on the book (hey, it is a beta book) I <em>mostly</em> enjoyed the book.</p>

<hr>

<p>Programming Phoenix takes you through building a complete Phoenix application, introducing familiar concepts like controllers, models and templates. Those parts are familiar because they&#39;re much the same in Phoenix as they are in Rails; with some differences. Models have changesets. Templates relate to Views. Unlike Rails&#39; &quot;magical&quot; callbacks (in both models and controllers), these are just simply defined and used functions in Phoenix.</p>

<p>The latter chapters cover a range of things, like adding in live &quot;annotations&quot; to a video as its being watched. Think of that kind of like a live chatroom, except as the video plays, the annotations from previous watches also appear. This is done using Websockets, which are supported in Rails now with ActionCable, but it just <em>feels</em> a lot less hacky with Phoenix than it does with Rails. Elixir handles it better, <a href="http://www.phoenixframework.org/blog/the-road-to-2-million-websocket-connections">reaching two million connections recently</a> to a single (albeit quite beefy) server. I can&#39;t myself think of something to use Websockets for, but it is still exciting nevertheless.</p>

<p>The final two chapters, &quot;OTP&quot; (Open Telecom Platform) and &quot;Observer and Umbrellas&quot; cover some of the real strengths of Elixir and its underlying foundation of Erlang. These two chapters get you to build a system which connects to Wolfram Alpha&#39;s API, and then demonstrate how to keep this new system separate from the original application, while still being able to connect these two systems together and communicate between them. In the Ruby world, typically this would be done with HTTP calls, but in the Elixir world it is just a matter of communicating across Elixir processes. This inter-process communication is quite quick in comparison to HTTP because it doesn&#39;t have that overhead.</p>

<p>What I loved from these final chapters was seeing Elixir&#39;s supervision capabilities in action. In one of those latter chapters, you create a small application (<code>Rumbl.Counter</code>) which dies after a couple of seconds. A Supervisor for the main application (<code>Rumbl</code>) restarts this smaller application automatically when it dies. Ruby doesn&#39;t have that kind of capability; instead you need to rely on tools like upstart. It&#39;s quite nice having it built into the language because then you don&#39;t have to learn something completely different to ensure your servers don&#39;t fall over.</p>

<hr>

<p>The book is written by Jos&eacute; &quot;The Elixir Guy&quot; Valim, Chris &quot;The Phoenix Guy&quot; McCord and Bruce &quot;The <a href="https://pragprog.com/book/btlang/seven-languages-in-seven-weeks">Seven Languages</a> Guy&quot; Tate. It&#39;s great to see that it&#39;s the core developers who are invested in writing documentation for the community. Unlike a certain other community who has a main core developer who tells contributors to go fuck themselves when they ask for documentation regarding new features. Further to that point, both Jos&eacute; and Chris are extremely active on the #elixir-lang channel on Freenode, which is also great to see.</p>

<p>I am not sure if it is because the book has three authors, but there are some parts where I&#39;m reading it and enjoying it. Then there are sections like &quot;Anatomy of a Plug&quot; which goes <em>way too deep</em> into what a Plug is and how it works, and &quot;Exploring Ecto in the Console&quot; which, again, goes rather deep but doesn&#39;t tie that content <em>solidly</em> back to what we&#39;re doing in the book at that present moment. It&#39;d be like a fiction book <em>intricately</em> explaining what&#39;s in the house of the neighbour of the protagonist, but then the neighbour is not mentioned any more past that. </p>

<p>Like, why does it even matter that Ecto supports &quot;search functions like <code>ilike</code> and <code>like</code>&quot; or that Plug has <code>path_info</code> and <code>scheme</code> fields? Neither of those are relevant to the content at-hand at that point of time, and it feels disconnected. Those things should be mentioned in their respective guides, not in this book. Perhaps those sections will mysteriously disappear once this book reaches the production editing phase. </p>

<p>It feels like it would be better off showing what a Plug is within the context of the application... and they do that later on. Then after that go into the detail. But I could do without the pages and pages of extra seemingly &quot;useless&quot; info <em>before</em> I get hooked on what you&#39;re trying to sell.</p>

<p>In addition to that, there are some places where the content feels like it&#39;s saying &quot;we&#39;re going to do this now because I said we&#39;re going to do it&quot;; particularly in Chapter 5, the Authentication chapter. The chapter jumps to creating a registration changeset with no reason why it needs to be created, then later on explains why it has to be created. The explanation needs work there.</p>

<p>This is where the TDD/BDD of Rails 4 in Action holds up. In that book, it&#39;s more like &quot;we&#39;re going to do this because the test says we need to do it&quot;. Programming Phoenix saves that kind of testing for Chapter 8, with the given reason being that having testing throughout every chapter can be distracting and repetitive. While I can see the point there -- there was vigorous nodding over here reading Chapter 8&#39;s intro -- that very same testing can be helpful for demonstrating industry best-practices to newbies. Otherwise what you&#39;ll get is a bunch of newbies who read the first 7 chapters and think that writing code without tests is How It Is Done(tm). </p>

<p>Having tests also helps show off the usefulness of regression testing too. A thing broke and now we&#39;re going to write a test for a fix, watch the test go red, fix the thing, and watch the test go green. I think that kind of thing is helpful to newbies to have, as they&#39;re the most likely to make mistakes within their application.</p>

<p>Despite these complaints, the book has been worthwhile reading. I am mainly nitpicking, because I&#39;m an author of another programming book and I have moments where I think that I could write parts better. That has yet to be proven.</p>

<p>The parallels between Rails and Phoenix are helping with the learning of the new framework, and the differences between them are not too mind-bending to be beyond comprehension. The first 8 chapters cover topics that should be familiar to any Rails developer: starting a new project, adding in models and controllers. Adding validations to the model with changesets -- which are a <em>very</em> cool feature that I wouldn&#39;t be surprised if Active Record 6.0 picked up. </p>

<p>The remaining 4 chapters of the book venture off into territory that is probably unexplored by most Rails developers. I know that I personally have never spent time using Websockets or having to do anything like inter-process communication in Ruby. These last four chapters were a breath of fresh air for my skills. I feel like I really learned something valuable in those chapters.</p>

<p>Overall, Programming Phoenix is a fantastic book that will become even better once the authors spend more time on it and the editors do their bit. I really recommend reading this book, but with a small caveat: read <a href="https://pragprog.com/book/elixir/programming-elixir">Programming Elixir</a> first to get familiar with the underlying language of the Phoenix framework. Then it&#39;ll be smooth sailing for you.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Open source work</title>
   <link href="http://ryanbigg.com/2015/11/open-source-work"/>
   <updated>2015-11-16T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2015/11/open-source-work</id>
   <content type="html"><![CDATA[<p>As of today I am quitting all maintenance roles / responsibilities of any open source project I am involved in. I am now looking for maintainers for any of those projects. Volunteers can contact me@ryanbigg.com to discuss handovers.</p>

<p>I work full-time, a full 40 hours a week. Outside of that work, I am writing <a href="https://leanpub.com/multi-tenancy-rails-2">Multitenancy with Rails, 2nd Edition</a>. That work gets done primarily on my way into and out of the office, a 30 minute train journey one-way. I also spend the occasional weekend day doing some writing.</p>

<p>Outside of this full-time work, I have lots of &quot;life stuff&quot; that I&#39;d like to do. Things like spending time with my wife, going outside or just generally relaxing. Having open source emails sitting in my inbox during those times makes me feel guilty for doing those things instead of working on open source.</p>

<p>I do not have the time or energy to invest in open source any more. I am not being paid at all to do any open source work, and so the work that I do there is time that I could be spending doing &quot;life stuff&quot;, or writing. It is not fair to expect me to do <em>even more work</em> outside of my regular work, and then not get fairly compensated (time or money) for it. It&#39;s also a great recipe for burnout and making me just generally grumpy. To have an open source email sit in the inbox for days or weeks at a time just leads me to feeling more guilty about not having found time + energy to get to it yet.</p>

<p>It&#39;s for this reason that I&#39;ve decided to end all my engagements with open source effective today. I will not be responding to any comments, issues or pull requests that get filed on any repository that I am in charge of. The only thing I will be responding to (in this regard) is volunteers who want to take over the maintenance of the projects.</p>

<p>Thank you for respecting my decision.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Active Record, change_column and scales</title>
   <link href="http://ryanbigg.com/2015/11/active-record-change_column-and-scales"/>
   <updated>2015-11-10T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2015/11/active-record-change_column-and-scales</id>
   <content type="html"><![CDATA[<p>I discovered a fun quirk of Active Record today. I&#39;m not sure if it&#39;s a bug or if it&#39;s just me doing something silly, but in these kinds of cases I&#39;ve learned to lean more towards the latter. Here&#39;s how it&#39;s done.</p>

<p>Start with a fresh Rails app, using MySQL:</p>
<div class="highlight"><pre><code class="language-" data-lang="">rails new shop -d mysql
</code></pre></div>
<p>Create a new <code>Variant</code> model:</p>
<div class="highlight"><pre><code class="language-" data-lang="">rails g model variant price:decimal
</code></pre></div>
<p>We just so happen to know that we need to specify a precision (numbers before the decimal) and scale (numbers after the decimal) for this column, and we (read: I) can never remember the syntax for that in the <code>generate</code> command, so we edit the migration to provide both a <code>precision</code> and <code>scale</code> for this column, turning it into this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CreateVariants</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:variants</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">decimal</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">precision: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">scale: </span><span class="mi">2</span>

      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span> <span class="ss">null: </span><span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Running this migration with <code>rake db:migrate</code> will generate a <code>db/schema.rb</code> which looks like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="p">.</span><span class="nf">define</span><span class="p">(</span><span class="ss">version: </span><span class="mi">20151110060233</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">create_table</span> <span class="s2">"variants"</span><span class="p">,</span> <span class="ss">force: :cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">decimal</span>  <span class="s2">"price"</span><span class="p">,</span>      <span class="ss">precision: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">scale: </span><span class="mi">2</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"created_at"</span><span class="p">,</span>                          <span class="ss">null: </span><span class="kp">false</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"updated_at"</span><span class="p">,</span>                          <span class="ss">null: </span><span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>A <code>show columns from variants;</code> MySQL query will show this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">+------------+---------------+------+-----+---------+----------------+
| Field      | Type          | Null | Key | Default | Extra          |
+------------+---------------+------+-----+---------+----------------+
| id         | int(11)       | NO   | PRI | NULL    | auto_increment |
| price      | decimal(10,2) | YES  |     | NULL    |                |
| created_at | datetime      | NO   |     | NULL    |                |
| updated_at | datetime      | NO   |     | NULL    |                |
+------------+---------------+------+-----+---------+----------------+
</code></pre></div>
<p>Note here that the <code>price</code> field has a <code>precision</code> of 10 and <code>scale</code> of 2; that&#39;s indicated by <code>decimal(10,2)</code>. That&#39;s good, because that&#39;s what we specified inside our migration.</p>

<p>Let&#39;s stop here and create three variants in our console:</p>
<div class="highlight"><pre><code class="language-" data-lang="">rails console
Variant.create(price: 18.49)
Variant.create(price: 26.99)
Variant.create(price: null)
</code></pre></div>
<p>These are just for demonstration purposes. No real data was harmed in the writing of this blog post.</p>

<p>The <code>price</code> column here doesn&#39;t have a default value and it allows for null values. There&#39;s data in here already which has <code>null</code> and that just won&#39;t do, because we want prices to always be a decimal number to make it easy to manage in our code. Having to do <code>to_f</code> to convert <code>nil</code> to <code>0.0</code> is not that smart. We&#39;re better than that!</p>

<p>So we&#39;ll go ahead and create a new migration to do the the <code>default</code> and <code>null</code> modifications to this <code>price</code> column:</p>
<div class="highlight"><pre><code class="language-" data-lang="">rails g migration add_default_to_variants_price
</code></pre></div>
<p>Inside that migration, we write this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">AddDefaultToVariantsPrice</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="no">Variant</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">price: </span><span class="kp">nil</span><span class="p">).</span><span class="nf">update_all</span><span class="p">(</span><span class="s2">"price = 0"</span><span class="p">)</span>
    <span class="n">change_column</span> <span class="ss">:variants</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:decimal</span><span class="p">,</span> <span class="ss">default: </span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Pretty simple stuff. We change all the variants where the price is <code>nil</code> (<code>null</code>) to have a price set to <code>0</code>. Then we set the <code>default</code> to be <code>0.0</code> and also tell it that we don&#39;t want <code>null</code> values in this column. If we didn&#39;t do the <code>update_all</code> call first, AR would bomb out because we tried to set <code>null: false</code> on a column which already had nulls.</p>

<p>We then run this migration (<code>rake db:migrate</code>), and this is where things go bad.</p>

<p>To start with, let&#39;s open <code>rails console</code> and run <code>Variant.first</code>. This is the variant that has a price set to <code>26.99</code>. Well, it&#39;s not that any more:</p>
<div class="highlight"><pre><code class="language-" data-lang="">#&lt;Variant id: 1, price: 27,
</code></pre></div>
<p>Yes, it&#39;s now 27.</p>

<p>What happened? Let&#39;s look at our <code>schema.rb</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="p">.</span><span class="nf">define</span><span class="p">(</span><span class="ss">version: </span><span class="mi">20151110061535</span><span class="p">)</span> <span class="k">do</span>

  <span class="n">create_table</span> <span class="s2">"variants"</span><span class="p">,</span> <span class="ss">force: :cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">decimal</span>  <span class="s2">"price"</span><span class="p">,</span>      <span class="ss">precision: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">default: </span><span class="mi">0</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"created_at"</span><span class="p">,</span>                            <span class="ss">null: </span><span class="kp">false</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"updated_at"</span><span class="p">,</span>                            <span class="ss">null: </span><span class="kp">false</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div>
<p>Ok, that says it&#39;s got a <code>precision: 10</code>, but where&#39;s the scale from the first migration gone? It&#39;s gone away.</p>

<p>Let&#39;s confirm this in MySQL too:</p>
<div class="highlight"><pre><code class="language-" data-lang="">mysql&gt; SHOW COLUMNS from variants;
+------------+---------------+------+-----+---------+----------------+
| Field      | Type          | Null | Key | Default | Extra          |
+------------+---------------+------+-----+---------+----------------+
| id         | int(11)       | NO   | PRI | NULL    | auto_increment |
| price      | decimal(10,0) | NO   |     | 0       |                |
| created_at | datetime      | NO   |     | NULL    |                |
| updated_at | datetime      | NO   |     | NULL    |                |
+------------+---------------+------+-----+---------+----------------+
</code></pre></div>
<p>The precision has stayed at 10, but the scale has changed to 0.</p>

<p>But why does this happen?</p>

<p>Because in the second migration, we didn&#39;t specify a precision and a scale.</p>

<p>Instead of this line:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">change_column</span> <span class="ss">:variants</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:decimal</span><span class="p">,</span> <span class="ss">default: </span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
</code></pre></div>
<p>We should have:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">change_column</span> <span class="ss">:variants</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:decimal</span><span class="p">,</span> <span class="ss">precision: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">scale: </span><span class="mi">2</span><span class="p">,</span> <span class="ss">default: </span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
</code></pre></div>
<p>Otherwise, it defaults to a precision of 10 and scale of 0 <em>and</em> helpfully rounds up your prices for you.</p>

<p>Isn&#39;t that handy?</p>
]]></content>
 </entry>
 
 <entry>
   <title>My self-publishing success story</title>
   <link href="http://ryanbigg.com/2015/08/my-self-publishing-success-story"/>
   <updated>2015-08-06T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2015/08/my-self-publishing-success-story</id>
   <content type="html"><![CDATA[<p>Everyone loves a good success story. Here&#39;s mine. I&#39;ll cover my experience
going through a traditional publisher with Rails 3 in Action and have that
fail, and then discovering joy and happiness through the path of self-
publishing my own books through Leanpub.</p>

<h3><a name='rails-3-in-action'></a><a href='#rails-3-in-action'>Rails 3 in Action</a></h3>

<p>I was approached in 2010 to write a book called <a href="https://manning.com/katz">Rails 3 in
Action</a>. I was so very excited to join that project
and write a book. Excited because up until that point, the longest thing that
I had written was a few of the Rails guides and my own blog posts. A book
would be an excellent way to share my knowledge about Rails with the worldwide
Rails community. So I signed up.</p>

<p>Then it didn&#39;t go so well. I wrote about that in a couple of other blog posts, mainly <a href="http://ryanbigg.com/2011/11/don-t-print-hard-copies">&quot;Don&#39;t Print Hard Copies&quot;</a>, <a href="http://ryanbigg.com/2010/12/the-writing-process">&quot;The Writing Process&quot;</a> and <a href="http://ryanbigg.com/2012/11/no-more-writing-for-manning/">&quot;No more writing for Manning&quot;</a>. The long and short of it is that I found Manning incredibly hard to work with due to their tooling and my tendency to want to control everything from how the book looks to when I push updates to its content.</p>

<p>So I quit that project because it was causing me a lot of stress to have to
deal with the tooling and to not be in control of things.</p>

<p>Then I rejoined it again in November last year because Steve Klabnik burned
out from the tooling and writing process, and also because I wanted to not
have Steve&#39;s work go to waste. I brought on Rebecca Skinner as a co-author at
that time too. We set about updating the content for Rails 4.2.</p>

<p>Then I quit again in April of this year due to the same reasons I quit the
first time and let Rebecca finish off the book. It&#39;s currently going through
proofing through Manning&#39;s processes. And by &quot;currently&quot; I mean it&#39;s been in
there since April. 3 months to proof and print a book seems a bit long in my
opinion, but what can you do about it?</p>

<h3><a name='multitenancy-with-rails'></a><a href='#multitenancy-with-rails'>Multitenancy with Rails</a></h3>

<p>After I quit Rails 3 in Action I was burned out quite heavily. I took time off
from writing and at the end of 2011 I moved from Sydney to Melbourne. Then when I got to Melbourne,
I had the itch to write something again: <a href="https://leanpub.com/multi-tenancy-rails">a book about building a multitenanted Rails application</a>. I talked with my friends Phil Arndt, Josh Adams and Rob Yurkowski about this project, and somehow <a href="https://leanpub.com">Leanpub</a> came up.</p>

<p>Leanpub lets you write books in Markdown and upload that Markdown to a Dropbox
folder. To push new updates, you go into your account&#39;s dashboard and hit the
&quot;Publish&quot; button. This was a welcome change from writing in XML and uploading
books to an SVN server and then using a website built in the late-90s or early
&#39;00s!</p>

<p>(Alternatively, you can generate your own files and upload them to Leanpub too if you don&#39;t want to write in Markdown. This is what I&#39;ve been doing for <a href="https://leanpub.com/ddr">Deep Dive Rails</a> and it&#39;s working wonders. More on that in probably a different blog post.)</p>

<p>The switch to Leanpub was... it was life-changing. Publishing a book didn&#39;t
have to be hard! I could just push a button whenever I felt like it and the
readers could be reading what I wrote in a matter of minutes. Leanpub made
everything so much easier compared with Manning.</p>

<p>I wrote Multitenancy with Rails over about a year and all the while during
that time, something interesting was happening: people were buying the book
and I was getting money for it each month. I originally sold the book for $10
and then raised the price $5 for every chapter that I completed. This way, it
gave people the incentive to get on board (Rails pun!) with reading the book
before it was complete.</p>

<p>This had two awesome effects:</p>

<ol>
<li>I would get money each month as more people bought it.</li>
<li>I would get feedback on the early drafts from readers.</li>
</ol>

<h3><a name='royalties'></a><a href='#royalties'>Royalties</a></h3>

<p>Here&#39;s the royalties chart for all of my income from Leanpub since Feb 2012 to the current day.</p>

<p><img src="/images/success-story/leanpub-royalties.png" alt="Leanpub Royalties"></p>

<p>Contrast it with the royalties I get from Manning from June 2010 to the current day:</p>

<p><img src="/images/success-story/manning-royalties.png" alt="Manning Royalties"></p>

<p>To be fair, the dry-spell since January 2012 is partly because Manning
overpaid my royalties by $3.8k. Just a small clerical error, I&#39;m sure. But
since then, Rails 4 in Action has been earning money I haven&#39;t seen anything
for our work on it.</p>

<p>The monthly income is a great motivator to the writing process because it&#39;s a
monthly reminder that people think it&#39;s worthwhile buying and (probably)
reading the books that I publish on Leanpub.</p>

<p>Secondly, the royalty split between Leanpub is much nicer: they take a 10%
slice of the royalties, + 50 cents. This means that when I sell a book for
$20, I make $17.50 from that, and Leanpub makes $2.50. Roughly 35% of that
$17.50 ($6.125) goes to tax, but the rest ($11.35) is mine to keep. I <em>might</em>
get some of that tax back in the form of a tax return, but it&#39;s not something that I expect.</p>

<p>Here&#39;s a pie chart:</p>

<p><img src="/images/success-story/leanpub-royalty-split.png" alt="Leanpub Royalties split"></p>

<p>For Manning, it&#39;s harder to break this down because the royalty rates vary
between 12.5% for print books, and 50% for ebooks. I get a royalty statement
from Manning every quarter for Rails 3 in Action which has the numbers so I
can attempt to break it down. I don&#39;t yet get a royalty statement for Rails 4
in Action because it has not been published.</p>

<p>Rails 3 in Action has sold 2,003 print books and 2,371 ebooks. I had expected
these numbers to be more skewed towards ebooks, but there you go. The price
has been the same forever: $50 for the print book with a free ebook (counted
as a print book sale) or $40 for just the ebook. So with those numbers in
mind, the total made for Rails 3 in Action over all time has been $100,150 for
the print books and $94,480 for the ebooks, which is a grand total of $194,630.</p>

<p>Using the royalty split above, we can work that out that the authors get 12.5%
of $100,150, which is $12,518.75 for print books and 50% of $94,480 which is
$47,240. A grand total of $59,758.75.</p>

<p>The rest of the money, 87.5% of $100,150 ($87,631.25) and 50% of $94,480
($47,240) goes to Manning. A grand total of $134,871.25.</p>

<p>Using those figures, I can generate a pie chart similar to the Leanpub one above:</p>

<p><img src="/images/success-story/manning-royalty-split.png" alt="Manning Royalties split"></p>

<p>(Tax isn&#39;t shown on this chart because the &quot;Authors&quot; royalties are split
between Yehuda and myself and we pay different tax rates. While I know my tax
rate, I don&#39;t know Yehuda&#39;s!)</p>

<p>Manning receives over two-thirds of the money earned for Rails 3 in Action and
will earn the same split for Rails 4 in Action. This is a personal sore point
for me, because I&#39;m a greedy bastard and for plenty of other reasons. For
instance, it makes sense that the royalties earned for a print book are low,
because producing print books takes effort, time and money. So that&#39;s logical.
But a 50/50 cut for ebooks seems a bit, well, unbalanced.</p>

<p>Clearly though, publishing my books through Leanpub is the better option if
what I&#39;m optimising for is money. Leanpub gets 10% + 50c of whatever book I
sell. Manning gets between 50-87.5%, which is almost 4-7 times as much as
Leanpub.</p>

<p>However, I don&#39;t optimise for money. If your intention is to write a book for
the sole purpose of earning extra dollar dollar bills, then I have some advice
for you: you&#39;re damn crazy and you shouldn&#39;t write it because the probability
of you earning enough money to be happy is extremely low. Books don&#39;t earn
even close to a sustainable level of income.</p>

<p>What I optimise for is (selfishly) my own happiness first, then reader
happiness a very close second. My reasoning for that is that if I don&#39;t enjoy
writing a book, then the book won&#39;t be very fun to read. My own happiness
comes first to make sure that a good book comes out at the end.</p>

<p>That&#39;s a nice segue into our next topic: writing tools and feedback cycles.</p>

<h3><a name='writing-tools'></a><a href='#writing-tools'>Writing tools and feedback cycles</a></h3>

<p>I want to talk about two things here: feedback cycles and writing tools.</p>

<h4>Feedback cycles</h4>

<p>When publishing a book, you kinda want to know immediately if anyone&#39;s reading
it. Peoeple <em>buying</em> the book is different to people <em>reading</em> the book. A
good indicator for this is the feedback that comes through in the form of,
mostly, errata reporting. Errata reporting means that people found errors in
the book, and that means that they read the book! That&#39;s great!</p>

<p>Fixing those errata reports quickly is essential to producing a high-quality
book. The faster you can kick out a new edition of the book and solve the
error, the sooner it&#39;ll be that nobody will ever come across <em>that</em> particular
error again.</p>

<p>With Manning, the process was this:</p>

<ol>
<li>Find mistake in book and fix it.</li>
<li>Commit the fix to SVN.</li>
<li>Get rejected for the commit because some other author has pushed their book to SVN since the last time you did.</li>
<li>Checkout from SVN.</li>
<li>Commit the fix to SVN for real.</li>
<li>Go to Manning&#39;s author-only site and login.</li>
<li>Find your book in the list of books.</li>
<li>Click the gear icon.</li>
<li>Find the chapter that you updated.</li>
<li>Scroll down the list of revisions for that chapter.</li>
<li>Click the radio button to select &quot;Latest&quot; (which uses the latest version of that chapter) and then click &quot;Update&quot;. This flags this particular revision to be ready for Manning&#39;s system.</li>
<li>Wait for someone from Manning to publish a new MEAP copy, which can take weeks.</li>
</ol>

<p>12 steps and it takes a couple of weeks (usually) until the book is updated. Oh, and at step #11 you might be told that somewhere in your 2,000+ line XML file, something is invalid.</p>

<p>With Leanpub, the process is this:</p>

<ol>
<li>Find mistake in book and fix it.</li>
<li>Commit change to GitHub.</li>
<li>Copy file to Dropbox folder. (can be optional if you get Leanpub to read from GitHub!)</li>
<li>Go to Leanpub&#39;s author-only area for the book.</li>
<li>Click &quot;Publish&quot;, &quot;Publish New Version&quot;</li>
<li>Hit the big blue button &quot;Publish new version&quot;.</li>
</ol>

<p>6 steps and the book is available instantly for readers! Markdown doesn&#39;t fail
to compile when it&#39;s invalid, it just looks weird and the weirdness is generally quite obvious (everything is plus-sized after a certain point, for instance) and so it&#39;s easy enough to fix.</p>

<p>During the publishing process you can enter release notes as well. On Leanpub,
the choice to release a new version of a book is in the hands of the author,
and not the publishing company. This is the way it should be: the author
typically has one book on the go, whereas a publishing company has many. This
6-step process is the kind of process I could only dream about when writing
Rails 3 in Action.</p>

<p>For readers to send feedback to a Manning book they have to submit new topics
to a forum. This makes it really hard to track which topics have been
addressed and which haven&#39;t. For the update of Rails 4 in Action, we created a
repository on GitHub at
<a href="https://github.com/rubysherpas/r4ia">rubysherpas/r4ia</a> and asked readers to
file issues there. That way, when we fixed an issue on the book properly, we
could close it with a simple commit message like &quot;Fixes rubysherpas/r4ia#10&quot;.</p>

<p>If I was collaborating on a book again, I would definitely go down the GitHub
repo-for-errata path again because it makes that aspect of the writing process
so much simpler.</p>

<p>For Multitenancy with Rails, I&#39;ve gone with more of a personal approach: I&#39;ve
included my email in the foreword to the book and asked if people encounter
errors that they email me directly. This system works really well as I use the
unarchived emails as an indication of what book bugs haven&#39;t been fixed yet.</p>

<p>I also built a review tool called <a href="https://github.com/radar/twist">Twist</a>,
originally for Manning&#39;s DocBook format but then ported that across to
Leanpub&#39;s Markdown format. The README there has a great image showing you what
it looks like. The purpose of this was for people to leave comments on
particular <em>elements</em> (paragraphs, code blocks, images) of the book and then I
could see specifically what element they were commenting on. That worked
really well for Rails 3 in Action and both editions for Multitenancy with
Rails too.</p>

<h3>Conclusion</h3>

<p>I wrote this post to answer questions that I get from people who ask what the
writing process was like. The two main things that I tell people that bugged
me about writing for a publisher were the writing tools and the royalty split.</p>

<p>Bad writing tools definitely hampered my ability to write, especially when I
spent a lot of my time fighting SVN to accept my files, or tracking down where
the XML files were invalid. Using Markdown, GitHub, and Leanpub&#39;s Dropbox
integration is one of the winning combinations for writing a book, and it&#39;s
what I use for <a href="https://leanpub.com/multi-tenancy-rails">Multitenancy with Rails</a>.</p>

<p>I use Asciidoc and GitHub for writing <a href="https://leanpub.com/ddr">Deep Dive Rails</a>. It took a little while to learn how the <code>asciidoctor</code> gem worked and then a little more time to figure out the PDF configuration, but it&#39;s looking really great now and I can tweak it very easily. I have control of what my book looks like! As an author, that&#39;s a pretty exciting thing because a book is a personal thing.</p>

<p>Yeah, I&#39;ve spent a lot of time messing around with the <code>asciidoctor</code> gem but
it&#39;s been way more fun than bashing my head against SVN or XML. It&#39;s way more
understandable, for starters!</p>

<p>There&#39;s nothing that can be done about the royalty split for Rails 3/4 in
Action. To be frank about it, I signed a contract that allows Manning to take
full ownership of Rails 3/4 in Action and to pay me what they pay me. It means
that even if I ask them super-nicely (and not-so-super-nicely), they still
won&#39;t give me the rights to the book. It&#39;s absolutely my fault, and I have
learned my lesson from that. I&#39;ve fulfiled my end of the bargain, and here&#39;s
hoping that they (again) fulfil theirs by paying us authors the royalties we
get.</p>

<p>What I can do in the future is avoid publishers altogether and just continue
self-publishing. It&#39;s what I advise anyone who&#39;s considering writing a book
these days. Self-publishing allows you to get your book out there faster than
through a traditional publisher and you get to have complete control of it.</p>

<p>So if you&#39;re considering writing a book, check out
<a href="https://leanpub.com">Leanpub</a>&#39;s offering and see if it suits you.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Deploying a Rails application on Ubuntu: Passenger Edition</title>
   <link href="http://ryanbigg.com/2015/07/deploying-a-rails-application-on-ubuntu-passenger-edition"/>
   <updated>2015-07-08T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2015/07/deploying-a-rails-application-on-ubuntu-passenger-edition</id>
   <content type="html"><![CDATA[<p>In this guide, I&#39;ll cover the basics of deploying a Rails application to Ubuntu 14.04 on a Digital Ocean box. This guide will work on non-Digital-Ocean boxes too, and it might work on different Ubuntu versions. Try it out and find out :)</p>

<p>If you find any mistakes in this guide, please let me know in the comments below.</p>

<p>In the guide, we&#39;ll be using:</p>

<ul>
<li><a href="https://github.com/postmodern/ruby-install"><strong>ruby-install</strong></a>: To install a Ruby version system-wide.</li>
<li><strong>nginx</strong>: A webserver to serve our Rails application with.</li>
<li><a href="https://www.phusionpassenger.com/"><strong>Passenger</strong></a>: The proxy between nginx and Rails which automatically starts + stops Rails application &quot;worker processes&quot;.</li>
<li><strong>Capistrano</strong>: A very helpful tool that automates your deployment workflow.</li>
</ul>

<p>While you <em>could</em> serve traffic from your production site using <code>rails s</code>, there are many issues with that:</p>

<ol>
<li>It runs on port 3000, whereas most websites run on port 80.</li>
<li>If it dies, you will need to restart it manually.</li>
<li>It will crash under heavy load because the web server it uses (WEBrick) has not been designed for production use.</li>
</ol>

<p>So instead, we&#39;ll be using nginx and Passenger.</p>

<p>Before we can run our Ruby on Rails application on the server, we&#39;ll need to install Ruby.</p>

<h2>Installing a Ruby version</h2>

<p>In order to install Ruby, we&#39;ll need to install the <code>build-essential</code> package. This package gives us the build tools that we&#39;ll need to compile Ruby.</p>

<p>We first need to make sure that our <code>apt</code> sources are up-to-date. If they&#39;re not, installing the <code>build-essential</code> pcakage might fail. We will do this by logging into the machine as root, and then running this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get update
</code></pre></div>
<p>Next, we&#39;ll need to install the <code>build-essential</code> package itself:</p>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install build-essential
</code></pre></div>
<p>With those tools installed, we will now install a Ruby version with the <code>ruby-install</code> tool. Follow the <a href="https://github.com/postmodern/ruby-install#install">install steps for ruby-install</a> (reproduced here for your convienience):</p>
<div class="highlight"><pre><code class="language-" data-lang="">wget -O ruby-install-0.5.0.tar.gz https://github.com/postmodern/ruby-install/archive/v0.5.0.tar.gz
tar -xzvf ruby-install-0.5.0.tar.gz
cd ruby-install-0.5.0/
make install
</code></pre></div>
<p>We will now install Ruby 2.2.2 system-wide by running this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-install --system ruby 2.2.2 -- --disable-install-rdoc
</code></pre></div>
<p>We&#39;re installing it system-wide so that it&#39;s available for all users on this machine.  The <code>--disable-install-rdoc</code> tells Ruby to skip the part about installing RDoc documentation for Ruby on this machine. This is a production machine and we don&#39;t need RDoc.</p>

<blockquote>
<p>Eventually, we&#39;ll be having each application have its own user on this machine. While we <em>could</em> use <code>ruby-install</code> on a per-user basis, it makes much more sense (and is easier!) to have it on a system-wide level.</p>
</blockquote>

<p>Once that command finishes running, let&#39;s remove the <code>ruby-install</code> package + directory:</p>
<div class="highlight"><pre><code class="language-" data-lang="">rm -r ~/ruby-install-*
</code></pre></div>
<p>It might make sense at this point to install Rails, but we should definitely let Bundler take care of that during the application deployment process. Let&#39;s just install Bundler for now:</p>
<div class="highlight"><pre><code class="language-" data-lang="">gem install bundler
</code></pre></div>
<h2>Deploying the application</h2>

<p>To deploy the application, we&#39;re going to use a gem called Capistrano. Capistrano has been a mainstay of the Ruby community for some time now due to its flexibility and reliability.</p>

<p>With Capistrano, we&#39;ll be able to (git) clone the Rails application to the server and run any necessary configuration steps that are required to get our application running, such as <code>bundle install</code>, <code>rake assets:precompile</code>, and configuring a database.</p>

<h3>Creating a new user</h3>

<p>The first thing to do is to create a new user on the machine where we&#39;re deploying to for the application. This user will be sandboxed into its own directory, which means the application will only have access to that user&#39;s home directory. </p>

<blockquote>
<p>If we installed the application as root and Rails had a Remote Code Execution vulnerability, the box could get taken over by some malicious hackers.</p>
</blockquote>

<p>Let&#39;s create this new application user now:</p>
<div class="highlight"><pre><code class="language-" data-lang="">useradd -d /home/rails_app -m -s /bin/bash rails_app
</code></pre></div>
<p><strong>I&#39;ve used <code>rails_app</code> here just as an example. You should use your application&#39;s name.</strong></p>

<p>The <code>-d</code> option specifies the home directory of the user and the <code>-m</code> option tells <code>useradd</code> to create that directory if it doesn&#39;t already exist. The <code>-s</code> option tells it that we want to use the <code>/bin/bash</code> shell.</p>

<p>Next, we&#39;ll want to make it so that we can connect to the server as this user. This is so that when we deploy the application, we do so as the user that we just created. If you&#39;ve setup GitHub already, you probably already have setup an SSH key. If not, follow <a href="https://help.github.com/articles/generating-ssh-keys/">this excellent guide from GitHub</a>.</p>

<p>To allow you to connect to the application server as the new user, we&#39;ll need to copy over the public key (<code>~/.ssh/id_rsa.pub</code>) to the server. The easiest way to do this is to copy it over to root first. On your own personal computer, run this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">scp ~/.ssh/id_rsa.pub root@yourmachine.example.com:~/key
</code></pre></div>
<p>Then on the server, move the key over to the new user&#39;s home directory:</p>
<div class="highlight"><pre><code class="language-" data-lang="">mkdir -p /home/rails_app/.ssh
mv key /home/rails_app/.ssh/authorized_keys
chown -R rails_app /home/rails_app/.ssh
chmod 600 /home/rails_app/.ssh/authorized_keys
</code></pre></div>
<p>Once you&#39;ve run those commands, you should be able to SSH into the machine as that user without requiring a password.</p>
<div class="highlight"><pre><code class="language-" data-lang="">ssh rails_app@yourmachine.example.com
</code></pre></div>
<p>If you run <code>ruby -v</code> after connecting, you should see this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-linux]
</code></pre></div>
<p>This indicates that Ruby can be found for your user, and that we can proceed to deploying the application.</p>

<p>Before we move onto the next section, we&#39;ll need to generate a &quot;deploy key&quot; for this user. This will be used by GitHub to grant this user access to the repository on GitHub.</p>

<p>We will generate that key by running this command on the server as our application&#39;s user:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ssh-keygen -t rsa
</code></pre></div>
<p>On our repository on GitHub, we can go to &quot;Settings&quot;, then &quot;Deploy Keys&quot; and add a new deploy key:</p>

<p><img src="/images/ubuntu-deploy-guide/add_deploy_key.png" alt="Add deploy key"></p>

<p>In the &quot;Title&quot; we can put whatever we feel like, but in the &quot;Key&quot; field we&#39;ll need to put the contents of the <code>~/.ssh/id_rsa.pub</code> file that the <code>ssh-keygen</code> command generated. Create the new deploy key now.</p>

<p>We&#39;ll need to set Git up on this machine so that we can clone the repo to test it out, and later to actually deploy the application. Let&#39;s install it now with this command <strong>ran as root</strong>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install git-core
</code></pre></div>
<p>Switch back to the <code>rails_app</code> user. We can test if this key is working by running <code>git clone git@github.com:you/example_app.git</code> (or whatever your repo is). If the key is setup correctly, then the clone will work.</p>

<h2>Deploying with Capistrano</h2>

<p>Next, we&#39;ll automate the deployment of our code to the server with Capistrano. We can install Capistrano as a gem dependency of the application by adding these two lines to the <code>Gemfile</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">'capistrano-rails'</span>
<span class="n">gem</span> <span class="s1">'capistrano-passenger'</span>
</code></pre></div>
<p>We can then run <code>bundle install</code> to install <code>capistrano-rails</code> and <code>capistrano-passenger</code> and their dependencies. To install Capistrano into our application, we&#39;ll need to run <code>bundle exec cap install</code>. This will install a couple of files in our application that will be used to configure how Capistrano deploys the application to our servers.</p>

<p>The first of these files is <code>config/deploy.rb</code>. Near the top of this file are these two lines:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">'my_app_name'</span>
<span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">'git@example.com:me/my_repo.git'</span>
</code></pre></div>
<p>We will need to change the <code>application</code> to match the name of our application (<code>rails_app</code> is mine, but your application name is different!), and change the <code>repo_url</code> to be the <code>git@github.com</code> URL for our application. We should also change the path of the application so that it deploys to the home directory of the user:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">'/home/rails_app/app'</span>
</code></pre></div>
<p>Next, we&#39;ll need to tell Capistrano where to deploy the application to. We can do this by adding this as the first line in <code>config/deploy/production.rb</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">server</span> <span class="s1">'app.example.com'</span><span class="p">,</span> <span class="ss">user: </span><span class="s1">'rails_app'</span><span class="p">,</span> <span class="ss">roles: </span><span class="sx">%w{app db web}</span>
</code></pre></div>
<p>Finally, we&#39;ll need to tell Capistrano to run <code>bundle install</code> when the application is deployed, as well as to run the migrations and compile the assets. We can do this by uncommenting these lines in <code>Capfile</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'capistrano/bundler'</span>
<span class="nb">require</span> <span class="s1">'capistrano/rails/assets'</span>
<span class="nb">require</span> <span class="s1">'capistrano/rails/migrations'</span>
<span class="nb">require</span> <span class="s1">'capistrano/passenger'</span>
</code></pre></div>
<p>Here&#39;s what each of those do:</p>

<ul>
<li><code>capistrano/bundler</code> is responsible for running <code>bundle install</code> (with some fancy deployment options as you&#39;ll see later) during an application deployment. This ensures that the gems on the server are up to date with whatever&#39;s specified in the <code>Gemfile.lock</code>.</li>
<li><code>capistrano/rails/assets</code> is responsible for precompiling the assets upon deploy.</li>
<li><code>capistrano/rails/migrations</code> is responsible for running the migrations for a new release (if any) during a new deploy.</li>
<li><code>capistrano/passenger</code> will restart the application on every single deploy, ensuring that only the latest code is running.</li>
</ul>

<p>This sets up most of the Capistrano configuration. There&#39;s a couple more pieces that we will address as they come up. </p>

<p>There&#39;s two more thing to do before we can deploy the application to the server: we&#39;ll need to install the development headers for whatever database system we&#39;re using and we&#39;ll need to install a JavaScript runtime. </p>

<h2>Database setup</h2>

<p>Install one of the following packages as the <code>root</code> user on that machine:</p>

<ul>
<li>By default, a Rails application uses SQLite3. To install SQLite3&#39;s development headers, run this command:</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install libsqlite3-dev
</code></pre></div>
<ul>
<li>If you&#39;re using MySQL, run:</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install libmysqlclient-dev
</code></pre></div>
<ul>
<li>If you&#39;re using PostgreSQL, run:</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install libpq-dev
</code></pre></div>
<p>If you&#39;re using MySQL or PostgreSQL, you&#39;ll need to install their servers.</p>

<ul>
<li>For MySQL, the package to install is <code>mysql-server</code>.</li>
<li>For PostgreSQL, the package to install is <code>postgresql-9.3</code></li>
</ul>

<h2>JavaScript runtime</h2>

<p>My preferred JavaScript runtime is the <code>nodejs</code> package. You can install it with <code>apt-get install nodejs</code>. This package will be used by the server to during <code>rake assets:precompile</code> to precompile the JavaScript assets.</p>

<h2>Deploying the first version</h2>

<p>We can now run <code>bundle exec cap production deploy</code> to deploy our application to our server. The first deploy might be a bit slow while all the gem dependencies are installed on the server. Patience is required for this step.</p>

<p>When it&#39;s complete, the final line should look like this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">INFO [9fa64154] Finished in 0.194 seconds with exit status 0 (successful).
</code></pre></div>
<p>Capistrano has set up your application directory and it has deployed it to a directory at <code>/home/rails_app/app/releases/&lt;timestamp&gt;</code>. This directory is unique to this release so that you may choose to rollback (with <code>bundle exec cap production rollback</code>) if something goes wrong.</p>

<p>Capistrano started out by cloning your application into the directory it created. It then:</p>

<ul>
<li>Ran <code>bundle install</code> to install your application&#39;s gem dependencies.</li>
<li>Ran <code>rake assets:precompile</code> to precompile your application&#39;s assets.</li>
<li>Ran <code>rake db:migrate</code> to migrate the production database for the application up to the latest version.</li>
</ul>

<p>The next step Capistrano will do is symlink the release directory to <code>/home/rails_app/app/current</code>. This is so that we have a sensible name with which to access the current release of our application.</p>

<p>At the end of all of that, it will also check the number of releases in the application directory. If there are more than 5, it will delete the oldest ones and keep only the 5 most recent. Again: these are kept around so that you may choose to rollback if something goes wrong.</p>

<p>With the application deployed, let&#39;s get it to serve our first production request by installing nginx + Passenger and then configuring them.</p>

<h2>Installing nginx + Passenger</h2>

<p>We can install a standalone edition of nginx using the Passenger installer, which massively simplifies what we&#39;re about to do. Without it, we would need to install nginx and Passenger, then we would need to configure these to work with each other.</p>

<p>Before we can install that, we&#39;ll need to install one more package:</p>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install libcurl4-openssl-dev
</code></pre></div>
<p>This installs Curl development headers with SSL support, which Passenger uses during the installation process.</p>

<p>To install Passenger, we will run <code>gem install passenger</code>, as root.</p>

<p>Next, we&#39;ll need to install Passenger and nginx, which we will do by running <code>passenger-install-nginx-module</code> and following the steps. We want to select Ruby when it prompts us for which languages we&#39;re interested in, of course. When it asks if we want Passenger to download + install nginx for us, we&#39;ll select the first option; &quot;Yes: download, compile and install Nginx for me.&quot;</p>

<p>This is another part where we&#39;ll need to wait a bit while Passenger compiles all the things it needs. Once it&#39;s done, it will tell us to put this configuration in our nginx config:</p>
<div class="highlight"><pre><code class="language-" data-lang="">server {
   listen 80;
   server_name www.yourhost.com;
   root /somewhere/public;   # &lt;--- be sure to point to 'public'!
   passenger_enabled on;
}
</code></pre></div>
<p>The <code>listen</code> directive tells nginx to listen for connections on port 80. The <code>server_name</code> directive is the address of your server, and you should change this from <code>www.yourhost.com</code> to whatever your server is. The <code>root</code> directive tells nginx where to find the application. The <code>passenger_enabled</code> directive should be very obvious.</p>

<p>Open <code>/opt/nginx/conf/nginx.conf</code> and delete the <code>server</code> block inside the <code>http</code> block, and replace it with the above example. Update the values in the example to be specific to your application.</p>

<p>You can start nginx by running:</p>
<div class="highlight"><pre><code class="language-" data-lang="">/opt/nginx/sbin/nginx
</code></pre></div>
<p>If we try to access our application now, we&#39;ll see a &quot;Incomplete response received from application&quot; error. In order to diagnose one of these, we can look in <code>/opt/nginx/logs/error.log</code>, which will tell us what caused that:</p>
<div class="highlight"><pre><code class="language-" data-lang="">*** Exception RuntimeError in Rack application object (Missing `secret_token` and `secret_key_base` for 'production' environment, set these values in `config/secrets.yml`) (process 5076, thread 0x007fd841f79d58(Worker 1)):
</code></pre></div>
<p>It&#39;s telling us that we&#39;re missing the <code>secret_token</code> and <code>secret_key_base</code> for the production environment in <code>config/secrets.yml</code>. If we look at our application&#39;s <code>config/secrets.yml</code>, we&#39;ll see indeed that this is missing:</p>
<div class="highlight"><pre><code class="language-" data-lang="">development:
  secret_key_base: [redacted]

test:
  secret_key_base: [redacted]

# Do not keep production secrets in the repository,
# instead read values from the environment.
production:
  secret_key_base: &lt;%= ENV["SECRET_KEY_BASE"] %&gt;
</code></pre></div>
<p>While the comment above the production key (and the code itself!) says to read it from the environment, I personally think it&#39;s easier to have a <code>config/secrets.yml</code> with the secret key kept on the server itself, and then have that copied over on each deploy.</p>

<h2>Generating a secret key</h2>

<p>To that end, we will put a <code>config/secrets.yml</code> in the <code>/home/rails_app/app/shared</code> directory and tell Capistrano to copy that file over during deployment. We&#39;re creating the file in the <code>shared</code> directory because it&#39;s going to be a file that is shared across all releases of our application.</p>

<p>To generate the <code>secret_key_base</code> value for the production key inside the new <code>config/secrets.yml</code> file, we will run <code>rake secret</code> inside our application. This will give you a very long key, such as:</p>
<div class="highlight"><pre><code class="language-" data-lang="">eaccffd1c5d594d4bf8307cac62cddb0870cdfa795bf2257ca173bedabc389a399b066e3b48cc0544604a4a77da38b9af4b46448fdad2efac9b668a18ad47ddf
</code></pre></div>
<p><strong>Don&#39;t use this one, because it is not secret! Generate one yourself.</strong></p>

<p>When you&#39;ve generated it, log into the server as <code>rails_app</code> and create a new file at <code>/home/rails_app/app/shared/config/secrets.yml</code> with this content:</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">production</span><span class="pi">:</span>
  <span class="s">secret_key_base</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;key</span><span class="nv"> </span><span class="s">generated</span><span class="nv"> </span><span class="s">by</span><span class="nv"> </span><span class="s">rake</span><span class="nv"> </span><span class="s">secret&gt;"</span>
</code></pre></div>
<p>Next, we&#39;ll need to uncomment the line in <code>config/deploy.rb</code> for the <code>linked_files</code> option. </p>
<div class="highlight"><pre><code class="language-" data-lang="">set :linked_files, fetch(:linked_files, []).push('config/secrets.yml')
</code></pre></div>
<p>We&#39;ve taken out <code>config/database.yml</code> for the time being just so we can confirm that we&#39;re passed this <code>secrets.yml</code> issue. After we&#39;ve dealt with that, we&#39;ll come back and look at creating a shared <code>database.yml</code>.</p>

<p>Let&#39;s run another deploy now with <code>bundle exec cap production deploy</code>. This deploy should fix our <code>secrets.yml</code> problem. Making a request to the application might work now if you&#39;re using SQLite3. If not, then you&#39;ll need to wait until the next section is over before that will all work.</p>

<h2>Database configuration</h2>

<p>If you&#39;re not using SQLite3 in production, then you&#39;ll need to setup a database for your application. This guide will only configure PostgreSQL, since that is what I personally am most familiar with.</p>

<p>The first thing that you will need to do is to create a database + user in PostgreSQL for this user. To do that, run these commands:</p>
<div class="highlight"><pre><code class="language-" data-lang="">sudo su postgres
createdb rails_app
createuser rails_app
</code></pre></div>
<blockquote>
<p>While the database name can be different to the username, the username that we use for PostgreSQL must be the same as the user that you use to SSH onto the server to deploy the application. When the application tries connecting to the database, it will do it using the same name as the user that the application runs under; which has been <code>rails_app</code> in this guide.</p>
</blockquote>

<p>We switch to the <code>postgres</code> user as it has superuser rights on our database which means it can execute the <code>createdb</code> and <code>createuser</code> commands. The <code>root</code> user of the machine cannot run these commands itself. You&#39;ll need to switch back from the postgres user back to root, which you can do by running <code>exit</code>.</p>

<p>Once we&#39;ve run those commands, we can test to see if it&#39;s working by running <code>psql</code> as the <code>rails_app</code> user. If it is working, then we will see a <code>psql</code> console like this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">psql (9.3.9)
Type "help" for help.

rails_app=&gt;
</code></pre></div>
<p>Great! Now we can setup the database configuration for the application. The first step is to change the database engine that the application uses in its <code>Gemfile</code> from <code>sqlite3</code> to the PostgreSQL gem, <code>pg</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">'pg'</span>
</code></pre></div>
<p>Next, we will need to run <code>bundle install</code> to update our application&#39;s dependencies. We will need to ensure that we change our local <code>config/database.yml</code> to use PostgreSQL as well. You&#39;ll want to be using the same database software locally and on the server, as that means that you have identical environments across the different machines.</p>

<p>The next step is to put a <code>config/database.yml</code> in the <code>/home/rails_app/app/shared</code> directory which only contains a <code>production</code> key:</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">production</span><span class="pi">:</span>
  <span class="s">adapter</span><span class="pi">:</span> <span class="s">postgresql</span>
  <span class="s">database</span><span class="pi">:</span> <span class="s">rails_app</span>
</code></pre></div>
<p>We can copy this file over on deploy by updating <code>config/deploy.rb</code> and changing the <code>linked_files</code> line to this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">set</span> <span class="ss">:linked_files</span><span class="p">,</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:linked_files</span><span class="p">,</span> <span class="p">[]).</span><span class="nf">push</span><span class="p">(</span><span class="s1">'config/database.yml'</span><span class="p">,</span> <span class="s1">'config/secrets.yml'</span><span class="p">)</span>
</code></pre></div>
<p><strong>We&#39;ll need to commit the changes to the <code>Gemfile</code> + <code>Gemfile.lock</code> before continuing here.</strong></p>

<p>The application will now work after one more run of <code>bundle exec cap production deploy</code>. Try it out yourself by visiting your app.</p>

<p>Your app should now be deployed to your server. Go ahead and try it out.</p>

<h2>Conclusion</h2>

<p>Your application is now deployed, but the fun doesn&#39;t stop here. You may need to tweak the <code>PassengerMaxInstances</code> configuration setting inside the <code>VirtualHost</code> block for your application to increase or decrease the amount of instances running on the machine, depending on how much free RAM you have. If you&#39;re running out of RAM, decrease this number. It entirely depends on the application, so just experiment to find out what value suits you.</p>

<p>The entire <a href="https://www.phusionpassenger.com/documentation/Users%20guide%20Apache.html">Passenger Users Guide</a> is a good read for other bits of tweaking too.</p>

<p>You may wish to setup exception tracking for your application now that it has been deployed to production, and for that I recommend <a href="https://rollbar.com">Rollbar</a>. It&#39;s very easy to setup for any Rails application and they have instructions on how to do that on their site.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Mac OS X, Ruby, ruby-install, chruby and You</title>
   <link href="http://ryanbigg.com/2015/06/mac-os-x-ruby-ruby-install-chruby-and-you"/>
   <updated>2015-06-09T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2015/06/mac-os-x-ruby-ruby-install-chruby-and-you</id>
   <content type="html"><![CDATA[<p><strong>Last updated: November 15th, 2017</strong></p>

<p>
  <strong>This beginner's guide will set up with Ruby 2.4.2, chruby, ruby-install and Rails 5.1.4 and is specifically written for a <em>development</em> environment on Mac OS X, but will probably work on many other operating systems with slight modifications.</strong>
</p>

<p>This guide is <em>almost</em> a copy of my <a href='http://ryanbigg.com/2014/10/ubuntu-ruby-ruby-install-chruby-and-you/'>Ubuntu, Ruby, ruby-install, chruby, Rails and You</a> guide, but this one has instructions for Macs.</p>

<p>This guide will cover installing a couple of things:</p>

<ul>
<li><a href="https://github.com/postmodern/ruby-install"><strong>ruby-install</strong></a>: a very lightweight way to install multiple Rubies on the same box.</li>
<li><a href="https://github.com/postmodern/chruby"><strong>chruby</strong></a>: a way to easily switch between those Ruby installs</li>
<li><strong>Ruby 2.4.2</strong>: at the time of writing the newest current stable release of Ruby.</li>
<li><strong>Bundler</strong>: a package dependency manager used in the Ruby community</li>
<li><strong>Rails 5.1.4</strong>: at the time of writing the newest current stable release of Rails.</li>
</ul>

<p>By the end of this guide, you will have these things installed and have some very, very easy ways to manage gem dependencies for your different applications / libraries, as well as having multiple Ruby versions installed and usable all at once.</p>

<p>We assume you have <code>sudo</code> access to your machine, and that you have an understanding of the basic concepts of Ruby, such as &quot;What is RubyGems?&quot; and more importantly &quot;How do I turn this computer-thing on?&quot;. This knowledge can be garnered by reading the first chapter of <a href="https://manning.com/black2">any Ruby book</a>.</p>

<p>If you&#39;re looking for a good Rails book, I wrote one called <a href="http://manning.com/bigg2">Rails 4 in Action</a>.</p>

<h3>Housekeeping</h3>

<p>The first thing we&#39;re going to need to install is XCode which you can get from the Mac App Store.</p>

<p>After you have that installed, we&#39;re going to need to open Terminal to execute a few commands. Use Spotlight (CMD + Space) to open it by typing in &quot;Terminal&quot; and pressing Enter. You should see a white window open. This is where we&#39;ll be putting the following commands via copy and paste.</p>

<p>We&#39;ll use XCode to install the Command Line Tools which install some libraries that Ruby will use to compile itself.</p>
<div class="highlight"><pre><code class="language-" data-lang="">xcode-select --install
</code></pre></div>
<p>First of all, we&#39;re going to need to install some package management script so that we can install packages such as Git, MySQL and other things exceptionally easy. The best package management system on Mac OS X for this is <a href="https://brew.sh">homebrew</a>. We can install this by using this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></pre></div>
<p>Next, we&#39;ll install <code>chruby</code> and <code>ruby-install</code>.</p>
<div class="highlight"><pre><code class="language-" data-lang="">brew install chruby ruby-install
</code></pre></div>
<h3>ruby-install</h3>

<p>First we fetch the ruby-install file, extract it into a directory, then make it. You can verify that these steps have worked by running the following command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-install -V
</code></pre></div>
<p>If you see this, then you&#39;ve successfully installed ruby-install:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-install: 0.6.1
</code></pre></div>
<h3>Ruby</h3>

<p>Our next step is to install Ruby itself, which we can do with this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-install --latest ruby
</code></pre></div>
<p>This command will take a couple of minutes, so grab your $DRINKOFCHOICE and go outside or something. Once it&#39;s done, we&#39;ll have Ruby 2.4.2 installed.</p>

<p>Now we&#39;ll need to load chruby automatically, which we can do by adding these lines to <code>~/.bash_profile</code> (or <code>~/.zshrc</code> if you&#39;re using ZSH):</p>
<div class="highlight"><pre><code class="language-" data-lang="">source /usr/local/opt/chruby/share/chruby/chruby.sh
source /usr/local/opt/chruby/share/chruby/auto.sh
</code></pre></div>
<p>In order for this to take effect, we&#39;ll need to source that file:</p>
<div class="highlight"><pre><code class="language-" data-lang="">. ~/.bash_profile
# or (if you're using ZSH)
. ~/.zshrc
</code></pre></div>
<p>Alternatively, opening a new terminal tab/window will do the same thing.</p>

<p>To verify that chruby is installed and has detected our Ruby installation, run <code>chruby</code>. If you see this, then it&#39;s working:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-2.4.2
</code></pre></div>
<p>Now we need to make that Ruby the default Ruby for our system, which we can do by creating a new file called <code>~/.ruby-version</code> with this content:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-2.4.2
</code></pre></div>
<p>This file tells <code>chruby</code> which Ruby we want to use by default. To change the ruby version that we&#39;re using, we can run <code>chruby ruby-2.4.2</code> for example -- assuming that we have Ruby 2.4.2 installed first!</p>

<p>Did this work? Let&#39;s find out by running <code>ruby -v</code>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin16]
</code></pre></div>
<h3>Rails</h3>

<p>Now that we have a version of Ruby installed, we can install Rails. Because our Ruby is installed to our home directory, we don&#39;t need to use that nasty <code>sudo</code> to install things; we&#39;ve got write-access! To install the Rails gem we&#39;ll run this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">gem install rails -v 5.1.4 --no-document
</code></pre></div>
<p>This will install the <code>rails</code> gem and the multitude of gems that it and its dependencies depend on, including Bundler.</p>

<h3>MySQL</h3>

<p>Before you can use MySQL, you&#39;ll need to install it with Homebrew:</p>
<div class="highlight"><pre><code class="language-" data-lang="">brew install mysql
</code></pre></div>
<p>After this, <code>gem install mysql</code> should succeed.</p>

<h3>PostgreSQL</h3>

<p>Before you can use PostgreSQL, you&#39;ll need to install it with Homebrew:</p>
<div class="highlight"><pre><code class="language-" data-lang="">brew install postgresql
</code></pre></div>
<p>After this, <code>gem install pg</code> should succeed.</p>

<h3>Fin</h3>

<p>And that&#39;s it! Now you&#39;ve got a Ruby environment you can use to write your (first?) Rails application in with such minimal effort. A good read after this would be the <a href='http://guides.rubyonrails.org'>official guides for Ruby on Rails</a>.</p>

<p>The combination of chruby and ruby-install is such a powerful tool and comes in handy for day-to-day Ruby development. Use it, and not the packages from apt to live a life of development luxury.</p>
]]></content>
 </entry>
 
 
</feed>