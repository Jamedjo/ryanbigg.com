<?xml version="1.0" encoding="iso-8859-1"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The Life of a Radar</title>
 <link href="http://ryanbigg.com/atom.xml" rel="self"/>
 <link href="http://ryanbigg.com"/>
 <updated>2019-08-29T09:03:20+10:00</updated>
 <id>http://ryanbigg.com/</id>
 <author>
   <name>Ryan Bigg</name>
   <email>radarlistener@gmail.com</email>
 </author>

 
 <entry>
   <title>The 2018 MacBook Pro Keyboard Drives Me Crazy</title>
   <link href="http://ryanbigg.com/2019/08/can-apple-please-design-a-laptop-that-has-a-functional-keyboard-for-the-love-of-all-that-is-precious"/>
   <updated>2019-08-29T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2019/08/can-apple-please-design-a-laptop-that-has-a-functional-keyboard-for-the-love-of-all-that-is-precious</id>
   <content type="html"><![CDATA[<p>I recently upgraded from a 2015 MacBook Pro to a 2018 MacBook Pro. And by
&quot;recently&quot;, I mean back at the start of June. I wanted a new MacBook Pro because of the faster performance that a new computer would give me. Work (Culture Amp) was also upgrading their fleet of Macs and I was one of the lucky people to get a new one.</p>

<p>So I&#39;ve been using this computer as a work computer for almost 3 months now and, my god, the keyboard <em>drives me mental</em>. Even writing this blog post now on the train and there&#39;s:</p>

<ul>
<li>duplicated &quot;o&#39;s&quot; that I&#39;ve had to go back and fix, or missing ones -- guess how fun it is to write <a href="https://leanpub.com/elixir-toyrobot">a book about a Toy Robot</a> with this particular problem</li>
<li>double spaces -- or no spaces</li>
<li>a Command key that registers 9 out of every 10 times</li>
<li>words like &quot;times&quot; that inexplicably get spelled like &quot;timies&quot;, or &quot;about&quot; that gets spelled like &quot;abouot&quot;</li>
</ul>

<p>Apple is <em>all about</em> the thinness of their laptops. I do not particularly care about the thinness of this device. For the most part, it sits on one of two desks that I use or it sits on my lap on the train. <em>Maybe</em> I use it on the couch from time-to-time. I do not care about the thinness of this device <em>while I am using it</em>. I only care about it when I store it away, in my backpack.</p>

<p>This keyboard has a key travel distance that, I am sure, is measured in microns or perhaps nanometers. It feels like I am typing on a concrete slab. Key presses inexplicably duplicate. Or don&#39;t register at all. All for <em>thinness</em>.</p>

<p>This keyboard is a catastrophic engineering failure, designed by a company that should know better. A company with more money in the bank than several countries <em>combined</em>. This keyboard would be, by far, the part of the MacBook Pro that is used the <em>most</em> by everybody who owns one, and it is so poorly engineered for the pursuit of <em>thinness</em>.</p>

<p>Apple <em>must</em> fix this problem in their upcoming MacBook Pro releases. I want a <em>fat</em> MacBook pro keyboard, one that has a travel distance of the older wireless keyboards and doesn&#39;t have that &quot;concrete slab&quot; feel. I want to be able to type <em>an entire paragraph</em> without having to go back and correct things because the keyboard failed.</p>

<p>I am tired of having to correct what I type because of this keyboard&#39;s faults. I am tired of having to use external keyboards to actually <em>enjoy</em> using this computer. I love the Mac and it&#39;s software and how things <em>just</em> work. But I will leave if this keyboard farce continues.</p>

<p>If Apple releases their new Macs with an <em>identical</em> keyboard, then I&#39;m ditching Macs and will pick up a Microsoft Surface Book or something similar. Whatever it is, I&#39;ll make sure to pick a laptop that has <em>a god damned functional keyboard</em>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Culture Amp Junior Engineering Program Discontinued</title>
   <link href="http://ryanbigg.com/2019/07/culture-amp-junior-engineering-program-discontinued"/>
   <updated>2019-07-16T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2019/07/culture-amp-junior-engineering-program-discontinued</id>
   <content type="html"><![CDATA[<p>For the past two years, I have ran not one but <em>two</em> successful Junior Engineering Programs (JEPs) at Culture Amp. The official number of developers that I have trained there is 19. But I trained a bunch more developers from time-to-time as well. So the proper total would probably be in the range of 30-40 developers at Culture Amp that I have helped train, support and grow over the past two years. I am really proud of this work that I have done and I have really enjoyed my time doing it.</p>

<p><strong>Unfortunately, Culture Amp has decided not to run the JEP in 2020 and are yet to make any decisions around future programs.</strong></p>

<p>I understand this decision will be surprising to hear for a number of people who have been expecting to be able to apply for the program when applications open. Especially as I have been doing a little bit of a &quot;speaking tour&quot; recently talking about the JEP. It was surprising to me when I heard it, too.</p>

<p>I am grateful that these two JEPs even happened in the first place. It&#39;s very &quot;Culture Amp&quot; to have even <em>talked</em> about doing one, let alone doing it as well. It started as an idea from a hackathon we ran internally -- then referred to as the &quot;Graduate Developer Program&quot;. The (slightly-embellished) story I tell is that I had a one-on-one with my Mentor, Jo Montanari, about 4 months after the hackathon and I asked her &quot;why aren&#39;t we running this program? and she shot back: &quot;Why aren&#39;t <em>you</em> running this program?&quot;.</p>

<p>The rest is history.</p>

<h2>Culture Amp continues investing in learning and development</h2>

<p>Culture Amp ran JEP for two years, but still does a lot of great work towards investing in the learning and development of their employees outside of this program. I&#39;d like to mention two of them quickly here.</p>

<p>Culture Amp has the &quot;Learn Yourself Up&quot; (LYSU) program, \$1k USD per-camper per-year to spend on whatever learning &amp; development expenses you want. If it&#39;s related to your job, you can expense it up to 90% off. If it&#39;s something outside of that, you can still use this budget but expense only 50%. This is an excellent initiative; and something I think more tech companies should think about doing.</p>

<p>The second of these is the Mentoring assignments that every single employee gets. When you join Culture Amp, you get paired up with a Mentor who can give you &quot;strategic&quot; career advice and be an advocate for you in the organisation. I&#39;ve been fortunate enough to have Doug English (the CTO), Jo Montanari (now Director of People &amp; Culture), and Paul Hughes (Backend Practice Lead) as my mentors for the 3 years that I have been at Culture Amp.</p>

<p>Thanks to both the LYSU and mentoring, I have grown more as not just a developer but as a <em>person</em> faster than anywhere I&#39;ve ever worked before. It has been the best time I&#39;ve ever had working at a company in my entire career.</p>

<h2>I will continue advocating for juniors</h2>

<p>I have spoken at places such as RMIT, Le Wagon, Coder Academy about this program. I have had many 1-on-1 chats with juniors about their learning progress and how they could prepare themselves for the JEP. I have replied to many emails from interested juniors about this program, giving them similar levels of advice. There are literally <em>hundreds</em> of <em>excellent</em> junior developers out there. I&#39;m happy to keep talking to juniors about their career prospects and what I sought out as someone who actively hired them.</p>

<p>I have even given feedback on juniors that have attempted either <a href="https://github.com/radar/surveyor">the 2017 JEP coding test</a> or <a href="https://github.com/radar/surveyor-2">the 2018 JEP coding test</a>. I am still going to keep doing this in to the future as much as I can. I think that technical feedback / direction like this is something that a lot of juniors are missing out on. They can read all the great tech books, follow all the cool screencasts, but that&#39;s pretty one-way. How do they know if they&#39;re writing code the &quot;right&quot; way? Well, having me look at their attempts at the coding test is a good way of getting that feedback. Let&#39;s keep doing that.</p>

<p>Every time I go to the Melbourne Ruby night, I spend a huge portion of the night talking to juniors about the program. I do all this because <a href="https://ryanbigg.com/2018/03/hiring-juniors">I care <em>tremendously</em> about juniors, and especially hiring juniors</a>. I will keep having these talks with juniors too. I love meeting them and then seeing them get into jobs, and following how they go in their career.</p>

<p>I&#39;ve also been advocating for other companies around the world to run their own junior programs too, and I think that it&#39;s gaining some traction. I&#39;m going to continue to have these conversations too.</p>

<h2>What this means for juniors</h2>

<p>What this means for juniors who were thinking about applying to a future JEP is that there&#39;s now going to be <em>slightly fewer</em> job opportunities out there in an already tight job market. Such is the nature of the job market.</p>

<p>I am happy to still act as an advisor for juniors who need it and as an advocate for companies hiring more juniors. If there are any companies out there that are hiring juniors, I&#39;m happy to refer on some excellent ones too.</p>

<h2>What this means for my future</h2>

<p>Somewhere around November, I will be leaving Culture Amp. The official date depends on some other factors and future discussions. I&#39;ve really enjoyed working here: the people are very cool, the Culture Amp platform is solving a problem I care a lot about, and the tech is interesting.</p>

<p>Most of all though: I have been remarkably well-supported in whatever I&#39;ve set my mind to at Culture Amp. From being a Ruby dev, to an Elixir dev, to running a Junior Engineering Program <em>twice</em>. Culture Amp has always had my best interests at heart, and I know that we part ways with no hard-feelings on either side here.</p>

<p>If you&#39;ve read this far and you&#39;d like to reach out to me about future job opportunities, please <a href="/work">check out /work</a>, and <a href="/history">check out /history</a> too.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Ruby Trickery</title>
   <link href="http://ryanbigg.com/2019/03/ruby-trickery"/>
   <updated>2019-03-05T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2019/03/ruby-trickery</id>
   <content type="html"><![CDATA[<p>Last week I gave a talk at Melbourne Ruby involving some card tricks and Ruby trickery.</p>

<p>The talk is up on Youtube:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/lSiD3LZanPI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>I do some card tricks for about 10 minutes, and then some Ruby tricks. I won&#39;t reveal how I did the card tricks in this blog post, but I will reveal how I did the Ruby tricks.</p>

<p>The Ruby trickery starts at about the 9m30s mark in that video. You can see the code for most of these tricks at <a href="https://github.com/radar/trickery">radar/trickery on GitHub</a>.</p>

<p>In this post, I&#39;ll cover all the tricks I had planned for the talk, not just the ones I showed off.</p>

<p><strong>Please, do not use any code in this blog post in production systems. It can case weird behaviour. Especially the one involving JavaScript sorting.</strong></p>

<p>The point of this post is to show the things Ruby is capable of.</p>

<h2>Numbers</h2>

<h3>Addition</h3>

<p>My first trick was to override addition, which I did with this code:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Integer</span>
  <span class="kp">alias_method</span> <span class="ss">:old_plus</span><span class="p">,</span> <span class="p">:</span><span class="o">+</span>

  <span class="c1"># 2 + 2 = 6</span>
  <span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="n">old_plus</span><span class="p">(</span><span class="n">old_plus</span><span class="p">(</span><span class="n">num</span><span class="p">))</span>
  <span class="k">end</span>
</code></pre></div>
<p>This allowed me to call <code>2 + 2</code> and get a result of <code>6</code>. It runs two plus operations, effectively doubling the number on the left before adding the number on the right. This is why <code>2 + 5 = 9</code> and <code>3 + 7 = 13</code>. By aliasing the original <code>+</code> method using <code>old_plus</code>, we can override the <code>+</code> method, but still use the old one.</p>

<h3>Multiplication</h3>

<p>The next trick applies to multiplication, but is a little more advanced:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Integer</span>
  <span class="kp">alias_method</span> <span class="ss">:old_multiply</span><span class="p">,</span> <span class="p">:</span><span class="o">*</span>

  <span class="k">def</span> <span class="nf">*</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:old_multiply</span><span class="p">).</span><span class="nf">unbind</span>
    <span class="n">m</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">num</span> <span class="o">/</span> <span class="nb">self</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This code calls <code>method(:old_multiply)</code>, but <code>unbind</code>s it from <code>self</code>. I can then rebind this method to anything else with the <code>bind</code> method, before calling it again. This re-binding makes the number <code>3</code> always the <code>self</code> within the <code>old_multiply</code> method, regardless of what is passed through on the left. However, the <code>self</code> reference inside this override will still be the left-hand-side number.</p>

<p>Some examples:</p>
<div class="highlight"><pre><code class="language-" data-lang="">3 * 3 == 3
6 * 3 == 0
99 * 999 == 30
</code></pre></div>
<h3>Unary minus</h3>

<p>The unary methods are often ignored within Ruby, despite having their uses. There&#39;s <a href="http://www.rubyinside.com/rubys-unary-operators-and-how-to-redefine-their-functionality-5610.html">a good Ruby Inside article about unary methods</a>. You should read it.</p>

<p>The TL;DR is that unary methods work as prefixed method calls on particular objects within Ruby. I&#39;ll show you what I mean. But let&#39;s look at the override first:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">-@</span>
  <span class="o">+</span><span class="nb">self</span>
<span class="k">end</span>
</code></pre></div>
<p>This is pretty straight forward. When we&#39;re told to minus something, make it a positive instead.</p>

<p>What&#39;s interesting here is that it won&#39;t work on negative numbers straight off the bat:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt;&gt; -5
=&gt; -5
</code></pre></div>
<p>This is because negative numbers are... well, they&#39;re negative numbers. The minus symbol there isn&#39;t a unary method call.</p>

<p>But things change if you assign a variable:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt;&gt; a = 5
=&gt; 5
&gt;&gt; -a
=&gt; 5
</code></pre></div>
<p>The number remains positive, even though it should&#39;ve been negated. This is because this code is calling the <code>-@</code> unary method.</p>

<p>What&#39;s fun with this is that you can keep chaining negative signs, positive signs or a combination of both:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt;&gt; --------a
=&gt; 5
&gt;&gt; ++++++++a
=&gt; 5
&gt;&gt; +-+-+a
=&gt; 5
</code></pre></div>
<p>All of these examples either call <code>-@</code>, <code>+@</code> or a combination of both multiple times.</p>

<h2>Arrays</h2>

<h3>Sorting, the JavaScript (aka &quot;right&quot;) way</h3>

<p>JavaScript sorting is a well-known case of... well, weird behaviour. For example, this code:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nx">sort</span><span class="p">()</span>
</code></pre></div>
<p>Should maintain the same order of the numbers, increasing left-to-right. Instead, the output is this:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</code></pre></div>
<p>This &quot;weird behaviour&quot; happens because JavaScript sorts objects based on their string versions. The string &quot;-1&quot; comes before &quot;-2&quot;, but &quot;-2&quot; comes before &quot;0&quot;, and so on. This  <a href="https://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.11">is specified in the EcmaScript specification (5.1), Section 15.4.4.11</a>, but you need a PhD or higher qualificatio (read: galaxy brain) to understand exactly what it is saying.</p>

<p>How does this relate to Ruby? Well, first of all Ruby does the sorting order correctly:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nf">sort</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</code></pre></div>
<p>But if we wanted to bring JavaScript style sorting to Ruby, then we can use this code:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">JSSort</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
    <span class="n">base</span><span class="p">.</span><span class="nf">alias_method</span> <span class="ss">:old_sort</span><span class="p">,</span> <span class="ss">:sort</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">sort</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">).</span><span class="nf">old_sort</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Array</span><span class="p">.</span><span class="nf">include</span><span class="p">(</span><span class="no">JSSort</span><span class="p">)</span>
</code></pre></div>
<p>This converts each element to a string via <code>map</code>, then sorts them using the old sorting behaviour (the default Ruby way), before converting them all back to integers.</p>

<p>We&#39;re not guaranteed to have arrays of integers at all times, so we might want to put a guard around that to check at least the first element is a number:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">sort</span>
  <span class="k">if</span> <span class="n">first</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">Numeric</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">).</span><span class="nf">old_sort</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">old_sort</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This doesn&#39;t prevent against arrays that contain a mix of datatypes (numbers and strings), but only really nefarious people create those, and there aren&#39;t many of those in the Ruby community so I think we can be safe here.</p>

<p>This code will now make Ruby sort &quot;correctly&quot; -- at least according to JavaScript:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt;&gt; [-2, -1, 0, 1, 2].sort
=&gt; [-1, -2, 0, 1, 2]
</code></pre></div>
<p>If we include this module into <code>Range</code>, we can get the same delicious behaviour:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Range</span><span class="p">.</span><span class="nf">include</span><span class="p">(</span><span class="no">JSSort</span><span class="p">)</span>
</code></pre></div>
<p>Let&#39;s try it:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt;&gt; (-2..2).sort
=&gt; [-1, -2, 0, 1, 2]
</code></pre></div>
<p>Now we can make Ruby sort the same way as JavaScript.</p>

<h3>Double Equality</h3>

<p>A little known fact is that the <code>==</code> in code like <code>[1,2,3] == [1,2,3]</code> is actually a method call. This code calls <code>Array#==</code>, and we can override this method too.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Array</span>
  <span class="kp">alias_method</span> <span class="ss">:old_double_equals</span><span class="p">,</span> <span class="ss">:==</span>

  <span class="k">def</span> <span class="nf">==</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
    <span class="nb">method</span><span class="p">(</span><span class="ss">:old_double_equals</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">other</span><span class="p">)</span> <span class="p">?</span> <span class="s2">"yes"</span> <span class="p">:</span> <span class="s2">"no"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Rather than getting the plain (and boring) <code>true</code> or <code>false</code> when we compare arrays, we will now get &quot;yes&quot; or &quot;no&quot;.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="s2">"yes"</span>
<span class="o">&gt;&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="s2">"no"</span>
</code></pre></div>
<p>You can make this method a little more fun by first checking the length and then determining what to do on that:</p>
<div class="highlight"><pre><code class="language-" data-lang="">other.length &gt; 3 ? "maybe" : (method(:old_double_equals).(other) ? "yes" : "no")
</code></pre></div>
<p>This way then, you get &quot;maybe&quot; if you try to compare against an array of more than 3 elements:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="s2">"maybe"</span>
</code></pre></div>
<h3>Triple Equality</h3>

<p>Similarly to <code>==</code>, <code>===</code> is also a method call. When we&#39;re making this call we want to be <em>really</em> sure that the things are equal. Getting back <code>false</code> would be disappointing, so we can override this method to always return <code>true</code>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">class Array
  def ===(_)
    true
  end
end
</code></pre></div>
<h3>Not Equal</h3>

<p>Just like its siblings <code>==</code> and <code>===</code>, <code>!=</code> is also a method call. We can override this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">class Array
  def !=(_)
    "can't say, tbqh"
  end
end
</code></pre></div>
<p>We can&#39;t say, to be quite honest.</p>

<h3>Unary Minus (again)</h3>

<p>We saw an example of unary minus working on a variable, but unary methods can be called before data types in Ruby too. Strings are one case where we can freeze a string by prefixing it with <code>-</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="s2">"string"</span>
<span class="o">=&gt;</span> <span class="s2">"string"</span>
<span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">.</span><span class="nf">frozen?</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
</code></pre></div>
<p>But arrays are another case. Arrays in Ruby don&#39;t have a unary minus method defined by default, but that doesn&#39;t stop us defining our own:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="nf">-@</span>
    <span class="n">clear</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>What this code allows us to do is to clear an array by prefixing it with <code>-</code>. It&#39;ll work for the array itself, or a variable representing the array too:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="o">-</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
<span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;</span> <span class="o">-</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
<span class="o">&gt;&gt;</span> <span class="n">a</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
</code></pre></div>
<p>This saves us a full 5 characters of typing that we would otherwise have to do:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">.</span><span class="nf">clear</span>
</code></pre></div>
<h3>Unary Plus</h3>

<p>Just like <code>-@</code>, we can add a <code>+@</code> method to arrays:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">+@</span>
  <span class="n">replace</span> <span class="n">flat_map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">*</span> <span class="mi">10</span> <span class="p">}</span>
  <span class="nb">self</span>
<span class="k">end</span>
</code></pre></div>
<p>The Japanese &quot;十&quot; character is the one for 10, so it makes sorta-sense that our <code>+@</code> method takes each of the element, and makes 10 of those in the array:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;</span> <span class="o">+</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</code></pre></div>
<p>This operation mutates the array using <code>replace</code>, replacing whatever&#39;s in the array with 10 of each of the elements.</p>

<p>It should be noted that <code>*</code> is <a href="http://ruby-doc.org/core-2.6.1/Array.html#method-i-2A">also an Array method</a>, but this one hasn&#39;t been overriden here. I should also note that the <code>*</code> method can take <em>either</em> an Integer or a String as an argument and it behaves differently depending. Check out the docs for more info.</p>

<h3>Unary Bang</h3>

<p>We&#39;ve seen a few unary methods so far, but an even lesser known one is the <code>!@</code> unary method. My override for this is straightforward:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="o">!</span><span class="err">@</span>
    <span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This will give us random numbers in our array, between 0 and 100:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">70</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">82</span><span class="p">]</span>
</code></pre></div>
<h3>Unary Tilde</h3>

<p>The last in the long line of unary methods is <code>~@</code>. This one kinda looks like a wave, so I think it should shuffle arrays:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="nf">~</span><span class="err">@</span>
    <span class="n">shuffle</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Here&#39;s an example of using it:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="o">~</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</code></pre></div>
<p>This saves us a grand total of 8 characters. Wow, such savings!</p>

<h3>Unary combos</h3>

<p>As we saw before with the unary methods <code>+@</code> and <code>-@</code>, we can chain them:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="o">--------</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
<span class="o">&gt;&gt;</span> <span class="o">++++++++</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
<span class="o">&gt;&gt;</span> <span class="o">+-+-+</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
</code></pre></div>
<p>Same goes for these array methods:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="o">!+~</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">53</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">36</span><span class="p">]</span>
</code></pre></div>
<p>Why would you want to do this? I am not sure. I think it is a quirk of the Ruby language that allows this.</p>

<p>But the order matters:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt;&gt; +!~[1,2,3]
Traceback (most recent call last):
        1: from /usr/local/opt/asdf/installs/ruby/2.5.1/bin/irb:11:in `&lt;main&gt;'
SyntaxError ((irb):4: syntax error, unexpected !~)
+!~[1,2,3]
 ^~
</code></pre></div>
<h2>Typing without typing</h2>

<p>That covers all my Ruby tricks in the video (and some more!), but there were a couple of other tricks I should mention. There were two distinct tricks: one where the code typed itself, and another where a terminal displayed a card after someone spoke it.</p>

<h3>Self-writing code</h3>

<p>It sure would be nice if code wrote itself. But alas, technology hasn&#39;t reached that particular zenith yet.</p>

<p>We can simulate this sort of technology using <em>other</em> tech, such as <a href="https://asciinema.org/">Asciinema</a>. This will record your terminal session, and you can play it back as you wish. This is what I did when I wrote the original <code>cards.rb</code>.</p>

<h3>ActiveListening</h3>

<p>The <a href="https://github.com/radar/trickery/blob/master/cards.rb">second <code>cards.rb</code></a>, works with a dual keypress on the keyboard. Six of diamonds is &quot;6D&quot;. Ten of hearts is &quot;0H&quot; or &quot;TH&quot;. Jokers aren&#39;t used in any serious card games, so they are not accounted for in this script.</p>

<p>So this code, if you read it, works by taking terminal input of two characters. But during the talk I get Kasia to read out some cards and then, a little while later, they appear on the screen.</p>

<p>But how?</p>

<p>This is a cheeky trick, and I needed another assitant for it. I recruited one of my juniors, Nick Wolf for this. I ran a <a href="https://en.wikipedia.org/wiki/Tmux"><code>tmux</code></a> session for all the code demos during the talk, and gave Nick <code>ssh</code> access to my machine.</p>

<p>Nick then connected in via <code>ssh</code>, ran <code>tmux attach-session</code> and then could control my terminal as easily as I could. When Kasia read out a card, Nick would type in the two characters required for that card.</p>

<p>Magic isn&#39;t magic if you know how it works. This trick was a little cheeky, but I included it as I wanted to show off that <code>tmux</code> can allow two people to share a terminal over SSH.</p>

<h2>Conclusion</h2>

<p>I hope this post has been helpful to understand what strange things Ruby is capable of. There&#39;s no logical reason to override the <code>+</code> method on <code>Integer</code>, or to add extra unary methods to Arrays. It&#39;s just something that Ruby allows us to do because of the language&#39;s flexibility.</p>

<p>Other people have done truly amazing things with the Ruby language. There&#39;s the <a href="https://github.com/tric/trick2018/">trick2018</a> repo which includes some really amazing Ruby files. Go through those and take a look.</p>

<p>My favourite though is the <a href="https://github.com/knoxknox/qlobe">qlobe</a> -- a quine that outputs a rotating globe of the earth. It even <a href="https://www.youtube.com/watch?v=HynsTvRVLiI">remembered to include New Zealand</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>JEP #2: The first 8 weeks</title>
   <link href="http://ryanbigg.com/2019/03/jep-2-first-8-weeks"/>
   <updated>2019-03-04T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2019/03/jep-2-first-8-weeks</id>
   <content type="html"><![CDATA[<p>At Culture Amp, we kicked off the latest round of our Junior Engineering Program (JEP) about 8 weeks ago. We hired 9 junior developers all of varying levels of past experience and set about teaching them the foundational skills they need to be productive members of our product teams.</p>

<p>In this post, I want to take the time to reflect on what we&#39;ve accomplished during those 8 weeks, and to note down my own personal reflections.</p>

<h2>The new program</h2>

<p>Before the juniors started, I spent a large amount of my time reviewing the curriculum from the last JEP. <a href="https://ryanbigg.com/2018/08/junior-engineering-program-resources">I talked about this in my last JEP post</a>. On (or around) that topic I want to speak about a few things:</p>

<ul>
<li>Expectation setting</li>
<li>The tech that we covered</li>
<li>Team building activities</li>
<li>1-on-1 support</li>
</ul>

<h3>Expectation setting</h3>

<p>The very first presentation that I gave to the juniors contained very little to do with the tech side of things and with good reason. It covered a timeline of the JEP, and a bunch of focus on setting up expectations early. There is no better time to set expectations like this than at the very beginning.</p>

<p>In particular, I outlined things such as &quot;I will never expect you to know what I know at all times.&quot; and &quot;I will never expect you to be able to keep up with me.&quot; I know that both of these things were things that the original JEP cohort had anxiety about, so I thought to cover these first. I don&#39;t, and never will, expect juniors to be able to know what I know or to be able to keep up with me. It is the most unreasonable expectation I could possibly have, but it needed saying.</p>

<p>On a more positive side, I also said &quot;I will always expect you to ask me to slow down and explain things again.&quot; I stressed that it doesn&#39;t matter if I have explained it fifty times already. Make me explain it again for the fifty-first time. It&#39;ll give me practice in being a better teacher. I want to be a better teacher.</p>

<p>In this same presentation, I outlined that &quot;Priority Zero&quot; is self care. This includes things like setting fixed times for your work days and not exceeding them, talking to other people about your struggles when you&#39;re struggling (even though it can be hard!) and asking questions when you feel stuck on something.</p>

<p><strong>Taking care of yourself should <em>always</em> be the highest priority. Nothing trumps this.</strong> It feels like it doesn&#39;t need saying, but it does. It&#39;s almost a form of giving permission.</p>

<p>Finally, I outlined what they could expect from the program: a great culture, an exceptionally supportive environment and learning &amp; development opportunities galore. These were my promises to the old cohort too, but with the new cohort I made them very explicit.</p>

<h3>The tech side of things</h3>

<p>There is an incredible amount of stuff to learn when it comes to building web applications. Building a tech-focussed curriculum for this program is a massive undertaking. For the initial part of the program, I had the juniors for an 8 week &quot;kickstart&quot; program where I could teach them full-time for those 8 weeks. Figuring out what to teach them was a fun exercise!</p>

<p>I re-worked the JEP curriculum it this time around to start with a focus on browser technologies -- HTML, CSS and JavaScript -- since that&#39;s where users interact with applications the most: through a browser. The first project for the juniors was a quick user manual built in HTML + CSS. As an example, <a href="https://cultureamp.github.io/jep-bios/ryan/">here&#39;s mine</a>.</p>

<p>Starting at the browser level allowed us to expand &quot;outwards&quot; in complexity, bringing things like React and TypeScript into the mix very soon after starting. We started by using <a href="https://stackblitz.com/">StackBlitz</a> here to develop our first React application, and this was a really good experience -- especially with the code reloading. The juniors watched the <a href="https://frontendmasters.com/courses/complete-react-v4/">Frontend Masters - Complete Intro to React v4</a> or <a href="https://www.udemy.com/react-redux/">the Udemy React + Redux course</a> to learn more about React.</p>

<p>Once we were comfortable with our React applications, we downloaded them to our machines and added TypeScript to them. We had our first guest lecture during this week, ran by one of our staff: Louis Quinnell. He ran the juniors through a Webpack setup with TypeScript.</p>

<p>This week involving React, Webpack and TypeScript was one of the hardest JEP weeks, and next time I&#39;d probably spread it out over two weeks next time. There was just so much content crammed into one week!</p>

<p>After covering browser and JS tooling tech, we then moved out to networking concepts, like hosts, ports and HTTP. We talked about how processes can listen on specific ports, and that when they listen, they communicate over established protocols like HTTP.</p>

<p>To solidify that knowledge, we then made React applications talk to HTTP servers that served JSON data by using the <a href="https://github.com/axios/axios">axios</a> package. To serve a JSON API, we used <a href="https://github.com/typicode/json-server">the wonderful <code>json-server</code></a> package. To explain how these different routes within <code>json-server</code> worked, I wrote them up on a whiteboard:</p>

<p><img src="/images/jep/jep2-crud-whiteboard.jpg" alt="JEP 2 whiteboard"></p>

<p>By this point, we had a clearly separated frontend + backend application structure, which is the style of application structure that we are moving towards at Culture Amp: a clear separation between backend and frontend applications.</p>

<p>We then took a week to do some coding exercises through <a href="https://www.codewars.com">CodeWars</a>, with some of the juniors completing <a href="https://www.codewars.com/kata/the-lift">a 3-kyu ranked coding problem called &quot;The Lift&quot;</a> in Ruby. During this week, I also set the juniors some homework of completing the Toy Robot exercise in either Ruby or TypeScript. The catch was that it had to be tested using RSpec. At the start of the week, we had our second guest lecturer: David Carlin. He ran through a short RSpec testing tutorial <a href="https://exercism.io/tracks/ruby/exercises/roman-numerals">based on the roman numerals exercise from Exercism</a>.</p>

<p>The week after that, we rebuilt our own version of <code>json-server</code> with <a href="http://sinatrarb.com/intro.html">Ruby&#39;s Sinatra web framework</a>. By using <code>json-server</code> first, then building the same thing in Sinatra, we would have a clear idea of what we were trying to accomplish. This application used a combination of <code>File.read</code>, <code>File.write</code> and <code>JSON.parse</code> to accomplish its task, giving the juniors experience working with one particular file format.</p>

<p>During this time, I wrote a suite of tests in <a href="https://rspec.info">RSpec</a> that made requests to the Sinatra application to assert that it behaved correctly. These tests would assert that everyone&#39;s Sinatra application was working correctly.</p>

<p>Once we had the Sinatra application working and reading from a JSON file to serve data, we then converted it again to use a <a href="https://www.mongodb.com/">Mongo database</a>. Why Mongo? Simply, because it is what we use in our main application at Culture Amp and that application will be the first touch point for a lot of juniors once they reach their teams.</p>

<p>We touched on Mongo database querying (through the <code>mongo</code> console) relatively quickly (less than an hour), before moving onto Mongoid and how to use that within a Sinatra application. We went quickly to <a href="https://rubygems.org/gems/mongoid">Mongoid</a> because that&#39;s what we use most often to talk to our Mongo database, not direct queries in a <code>mongo</code> console.</p>

<p>We touched on what the Object-Document-Mapper (ODM) pattern was, and how it related to the Object-Relation-Mapper pattern (ORM) from Active Record. We replaced our Ruby code within the Sinatra application that read from a JSON file with one that read from a Mongoid model instead. This change made our Sinatra applications much easier to work with! The juniors were able to use the test suite to assert that their application was functioning correctly too.</p>

<p>To wrap up the 8 weeks, we spent the final week learning about <a href="https://rubyonrails.org">Ruby on Rails</a>, going through the <a href="https://guides.rubyonrails.org/getting_started.html">Getting Started guide</a> and then building an application with it. This application served a CRUD interface through regular Rails HTML+ERB views, as well as an API that worked exactly the same as our Sinatra application. We moved the RSpec tests from the Sinatra application into this new Rails application, and turned them into <a href="https://relishapp.com/rspec/rspec-rails/docs/request-specs/request-spec">RSpec request specs</a> so that we could easily test our Rails application.</p>

<p>One final bit of testing that we added later on was feature tests using the excellent <a href="https://rubygems.org/gems/capybara">Capybara gem</a>, paired with <a href="https://rubygems.org/gems/selenium-webdriver">selenium-webdriver</a> and <a href="https://rubygems.org/gems/chromedriver-helper">chromedriver-helper</a>. This allowed us to run tests within a real browser, and the juniors really loved seeing the tests run through their app blazingly fast in a real browser. I think this sort of thing is a good demonstration of what testing provides.</p>

<h3>Building a team</h3>

<p>Both of our JEP cohorts did more than just learn a bunch of pieces of tech. The whole reason why we hire a cohort of developers rather than just one or two is so that they can bond through the process. The shared experiences that the group has helps the team support each other and grow faster. To that end, we did a bunch of team building activities too.</p>

<h4>Team lunches</h4>

<p>One of our common activities was to go out to team lunches. Before the program started, we all went out and had lunch at Pok Pok Junior, a Thai restaurant. During our first week, we went out for a &quot;Welcome to Culture Amp&quot; lunch at Tahini Diner in the city:</p>

<p><img src="/images/jep/jep2-tahini-diner.jpg" alt="Tahini Diner"></p>

<p>During the program, we regularly went out for lunch together as a group and I reckon that helped the group bond well.</p>

<p>By about the 3 week stage, the team had really gelled well and were routinely helping each other out, which made my work easier too. Something happened during this week -- I&#39;m not sure what -- and suddenly the grouped clicked as a whole. It was very noticeable and awesome to watch.</p>

<h4>Werewolf + Dominoes</h4>

<p>On Friday afternoons, we run semi-regular sessions of Werewolf. Here&#39;s some of our juniors during one of our Werewolf sessions at an off-site company event having a bunch of fun accusing others of lying:</p>

<p><img src="/images/jep/jep2-werewolf.jpg" alt="Werewolf"></p>

<p>One of the other activities we&#39;ve done for &quot;team building&quot; was during the 3rd week, where I brought in 500 dominoes and asked the juniors to work in teams to build the longest chain, tallest tower and a few other things:</p>

<p><img src="/images/jep/jep2-dominoes.jpg" alt="Dominoes"></p>

<p>It turns out that 500 dominoes is not enough to share between 9 juniors so next time I might bring in 1000 and see how that goes.</p>

<p>This dominoes exercise was intended as a learning exercise for the juniors -- something based around &quot;if you take your time you produce a better quality of work&quot; (dominoes are unforgiving if you rush them!) -- but it ended up being way more fun than serious.</p>

<p>At the end of this session on dominoes, we all signed dominoes for each other and took them home as a memento of our time during the JEP even though it&#39;s nowhere near over yet.</p>

<p><img src="/images/jep/jep2-signed-dominoes.jpg" alt="Signed Dominoes"></p>

<p>This was a really nice touch on this lesson.</p>

<h3>1-on-1 support</h3>

<p>While the juniors may feel comfortable expressing themselves one way within the JEP group, there&#39;s going to be cases where they reserve some things for more private cases. Being a junior within a large company with a bunch of experienced engineers is tough. Being in a group of people who you constantly compare yourself to can be tough too.</p>

<p>To help with this part, I spared an hour of my week every single week for each of the juniors. The juniors were told to bring their own agenda along to this meeting. We could catch up and talk about how the week was going, how they were feeling, and talk about any issues that they have encountered that week. I enjoyed these catch ups and I felt like I got to know them all better.</p>

<p>A major topic of conversation was anxiety at feeling like they weren&#39;t good enough. This is a pretty common thing for juniors to encounter. I provided the junior assurances that this feeling of &quot;being not good enough&quot; is a perfectly normal thing to happen to them is what I try to do when it pops up. It&#39;ll keep coming up from time-to-time, and I think it&#39;s a root of imposter syndrome. Almost all of my juniors experienced this feeling during the first 8 weeks.</p>

<p>My main job here is to turn the juniors into confident and capable developers, and these 1-on-1s are critical to making that happen.</p>

<h2>Reflections</h2>

<p>It wouldn&#39;t be a JEP post if I didn&#39;t include some reflections at the end. So here they are!</p>

<h3>Curriculum was great</h3>

<p>I strongly believe that the approach I took to curriculum this time around worked incredibly well. The rough order was this:</p>

<ul>
<li>Expectation setting</li>
<li>HTML, CSS and JavaScript</li>
<li>React</li>
<li>TypeScript</li>
<li>Networking fundamentals + servers</li>
<li>Ruby</li>
<li>Coding exercises, TDD &amp; BDD</li>
<li>Sinatra</li>
<li>Mongo &amp; Mongoid</li>
<li>Rails</li>
<li>Capybara</li>
</ul>

<p>All of this was covered in roughly 6 weeks of &quot;hands-on&quot; time. It helped a lot that the juniors had a grip on some of these things already.</p>

<p>Next time I would like to separate out the React &amp; TypeScript week into two consecutive weeks -- cramming them into one week felt quite intense for me and esepcially for the juniors. During the React week I could add some more content around testing with Jest.</p>

<p>By moving TypeScript out to its own week it would &quot;disconnect&quot; it from React. I would show that it can be used independently and how it compiles down into JavaScript. Then I can show how to use it in conjunction with React.</p>

<hr>

<p>The week spent on Rails + Capybara also felt a bit short I would split this week into two as well, so that we could cover more.</p>

<p>I would&#39;ve loved to cover Rails + React integration using the <a href="https://github.com/rails/webpacker">Webpacker</a> gem, but we ran out of time during the last week. This gem would&#39;ve allowed us to move our frontend code into our Rails application and would&#39;ve gotten us a close model of how Culture Amp&#39;s major Rails application works.</p>

<p>This is the last major piece of the puzzle of how our major Rails application works and I worry that the juniors who have now begun working on their teams won&#39;t understand this concept well enough when they see it within the application. But maybe I am being a worry wart.</p>

<p>So overall, we covered this material in 6 weeks but I think 8 weeks of time would be more suitable.</p>

<h3>Make dev machine setup smoother</h3>

<p>Lots of time was spent setting up their developer machines. I <em>strongly feel</em> like I should be able to automate this but I worry if I try I would be running into <a href="https://xkcd.com/1205/">this classic XKCD</a>.</p>

<p>There wasn&#39;t a canonical list of things for the juniors to work through to set it up, and it always feel a bit ad-hoc. I think maybe keeping a list of these common tasks that developers go through when setting up their computers here would be beneficial. Sharing this list in a todo list application (Wunderlist? Things?) might help provide some order and sense to the steps.</p>

<h3>More &quot;Why?&quot;</h3>

<p>One thing that I need to seriously do better is to explain the &quot;why&quot; of what we&#39;re doing a lot better. The &quot;why?&quot; question was a pretty common one.</p>

<p>It&#39;s all well and good to learn new tech (it&#39;s exciting!) but covering <em>why</em> it is important would help sell the juniors on it. Why was it important to learn React? What about JSON APIs? More why.</p>

<p>Providing more details about the &quot;story arc&quot; of the week / program-as-a-whole would&#39;ve been more useful too, I believe.</p>

<h3>Webpacker, React &amp; Rails</h3>

<h3>None-on-Ones</h3>

<p>For the past 8 weeks, I honestly have felt like I&#39;ve been running around, shouting &quot;AAAAAHHHHHH&quot; with my arms flailing above my head.</p>

<p>Onboarding 9 new developers to the company and teaching them new curriculum kept me incredibly busy. So busy that I actually went to sleep at 6:30pm on at least one Friday.</p>

<p>This, coupled with my regular amount of meetings and the 1-on-1s on top of it, meant that I didn&#39;t have much &quot;spare&quot; time. In this spare time I would regularly catch up on todo list items, actions that come out of 1-on-1s, emails and so on.</p>

<p>So in the future, I am setting aside <em>at least</em> 5 hours a week in sessions that I&#39;m calling &quot;None-on-Ones&quot;. They&#39;re booked in my calendar as regular meetings (where I&#39;m marked as &quot;busy&quot;), except I am the only one invited. I hope this will convince myself to focus on clearing out those small-but-important tasks that I never seemed to have spare time to get around to.</p>

<p>Maybe this is a management trick I wasn&#39;t taught yet. I think it&#39;ll be useful.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Polymorphic Routes</title>
   <link href="http://ryanbigg.com/2018/12/polymorphic-routes"/>
   <updated>2018-12-13T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2018/12/polymorphic-routes</id>
   <content type="html"><![CDATA[<p>Really early on in Rails, you would write routes like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">redirect_to</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s2">"posts"</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">"show"</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">id</span>
</code></pre></div>
<p>What this would do is dutifully redirect to the <code>show</code> action inside the <code>PostsController</code> and pass along the <code>id</code> parameter with a
value of whatever <code>@post.id</code> returns. Typical 302 response.</p>

<p>Then Rails 1.2 came along and allowed you to use routing helpers, like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">redirect_to</span> <span class="n">post_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span>
</code></pre></div>
<p>And the people rejoiced.</p>

<p>This would do effectively the same thing. <code>post_path</code> here would build a route using the <code>@post</code> object that would look something
like <code>/posts/1</code> and then <code>redirect_to</code> would send back a 302 response to that route and the browser would follow it.</p>

<p>Then later versions (I can&#39;t remember which one), allowed syntax like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">redirect_to</span> <span class="vi">@post</span>
</code></pre></div>
<p>And the people rejoiced a second time.</p>

<h3>Magic, but not really</h3>

<blockquote>
<p>Any sufficiently advanced technology is indistinguishable from magic.</p>
</blockquote>

<p>While this seems like magic, it&#39;s not. What this is doing is actually very, very neat. The <code>redirect_to</code> method, much like its cousins <code>link_to</code> and <code>form_for</code> all use a common method to build URLs, called <code>url_for</code>. The <code>url_for</code> method takes many different varieties of objects, such as strings, hashes or even instances of models, like in the example above and then uses whatever&#39;s input to build a URL. <code>url_for</code> does this in conjunction with another method called <code>polymorphic_url</code> too.</p>

<p>Let&#39;s look at what <code>redirect_to</code>, <code>url_for</code> and <code>polymorphic_url</code> does with these objects. In the case of the <code>redirect_to @post</code> call above, it inspects the <code>@post</code>
object, sees that it is an object of the <code>Post</code> class (we assume, anyway) and checks to see if that object has been persisted in a
database somewhere by calling <code>persisted?</code> on it.</p>

<p>By &quot;persisted&quot;, I mean that a Ruby object has a matching record in the database somewhere. The <code>persisted?</code> method in Active Record is implemented like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">persisted?</span>
  <span class="o">!</span><span class="p">(</span><span class="n">new_record?</span> <span class="o">||</span> <span class="n">destroyed?</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>If the object wasn&#39;t created through a call such as <code>Model.new</code> then it won&#39;t be a new record, and if it hasn&#39;t had the <code>destroy</code> method called on it won&#39;t be
destroyed either. If both of these cases are true, then that makes the object has most likely been <em>persisted</em> to the database in the form of a record.</p>

<p>If it has been persisted, then <code>url_for</code> knows that this object can be found
somewhere, and that the place it can be found is most likely under a method called <code>post_path</code>. It infers the &quot;post&quot; part of this method from the name of the model: <code>Post</code>. Rails then calls this method, and passes in whatever <code>to_param</code> on the model returns. By default, <code>to_param</code> is configured to return the <code>id</code>, but you can override this method in your model to return something else, like a permalink instead:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">to_param</span>
  <span class="n">permalink</span>
<span class="k">end</span>
</code></pre></div>
<p>In short, Rails is effectively building a method call like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#{@post.class.downcase}_path(@post.to_param)</span>
</code></pre></div>
<p>Which comes out to being this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">post_path</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div>
<p>And when that method is called you would get this little string:</p>
<div class="highlight"><pre><code class="language-" data-lang="">"/posts/1"
</code></pre></div>
<p>Lovely!</p>

<p>This is called <em>polymorphic routing</em>. You can pass an object to methods like <code>redirect_to</code>, <code>link_to</code>, <code>form_for</code> and <code>form_with</code> and Rails will
attempt to work out the correct URL of what to use.</p>

<h3>The form of form_form</h3>

<p>Now, when you&#39;re coding Rails you may have used <code>form_for</code> like this a very long time ago:</p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="cp">&lt;%</span> <span class="n">form_for</span> <span class="vi">@post</span><span class="p">,</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s2">"posts"</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">"create"</span> <span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
</code></pre></div>
<p>Of course, with advancements in Rails you could simplify it to this:</p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="cp">&lt;%</span> <span class="n">form_for</span> <span class="vi">@post</span><span class="p">,</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="n">posts_path</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
</code></pre></div>
<p>Because the form is going to default to having a <code>POST</code> HTTP method and therefore a request to <code>posts_path</code> is going to go to the
<code>create</code> action of <code>PostsController</code>, rather than the <code>index</code> action, which is what would result if it were a <code>GET</code> request.</p>

<p>But why stop there? Why not just write this?</p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="vi">@post</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
</code></pre></div>
<p>Personally, I see no reason not to... if it&#39;s something as simple as this. The <code>form_for</code> method uses <code>url_for</code> underneath, just like
<code>redirect_to</code> to work out where the form should go. It knows that the <code>@post</code> object is of the <code>Post</code> class (again, we assume) and it
checks to see if the object is persisted. If it is, then it will use <code>post_path(@post)</code>. If it&#39;s not, then <code>posts_path</code>.</p>

<p>The <code>form_for</code> method itself checks to see if the object passed in is persisted also, and if it is then it&#39;ll default to a <code>PUT</code> HTTP
method, otherwise a <code>POST</code>.</p>

<p>So this is how <code>form_for</code> can be flexible enough to have an identical syntax on both a <code>new</code> and <code>edit</code> view. It&#39;s becoming more and
more common these days for people to even put their whole <code>form_for</code> tags into a single partial and include it in both the <code>new</code> and
<code>edit</code> pages.</p>

<h3>A more complex form</h3>

<p>So <code>form_for</code> is fairly simple for when you pass a normal object, but what happens if you pass an array of objects? Like this, for
instance:</p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="p">[</span><span class="vi">@post</span><span class="p">,</span> <span class="vi">@comment</span><span class="p">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
</code></pre></div>
<p>Well, both <code>url_for</code> and <code>form_for</code> have you covered there too.</p>

<p>The <code>url_for</code> method detects that this is an array and separates out each part and inspects them individually. First, what is this
<code>@post</code> thing? Well, in this case let&#39;s assume it&#39;s a <code>Post</code> instance that <em>is</em> persisted and has the id of 1. Second, what is this
<code>@comment</code> object? It&#39;s a <code>Comment</code> instance that has not yet been persisted to the database.</p>

<p>What <code>url_for</code> will do here is build up the URL helper method piece by piece by placing each part in an array, joining it into a routing method and then calling that routing method with the necessary arguments.</p>

<p>First, it knows that the <code>@post</code> object is of the <code>Post</code> class and is persisted, therefore the URL helper will begin with <code>post</code>. Second, it knows that the <code>@comment</code> object is of the <code>Comment</code> class and is <em>not</em> persisted, and therefore <code>comments</code> will follow <code>post</code> in the URL helper build. The parts that <code>url_for</code> now knows about are <code>[:post, :comments]</code>.</p>

<p>The <code>url_for</code> method combines these individual parts with an underscore, so that it becomes <code>post_comments</code> and then appends <code>_path</code>
to the end of that, resulting in <code>post_comments_path</code>. Then it passes in just the persisted objects to the call to that method, resulting in a call like this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">post_comments_path(@post)
</code></pre></div>
<p>Calling that method results in this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">"/posts/1/comments"
</code></pre></div>
<p>Best part? <code>form_for</code> will still know to use <code>POST</code> if the <code>@comment</code> object is not a persisted object, and <code>PUT</code> if it is. A good
thing to remember is that the <code>form_for</code> is always for the <em>last</em> object specified in the array. The objects prior to it are just its
nesting, nothing more.</p>

<p>The more objects that are added, the more times <code>url_for</code> will do the hard yards and build the path out... although I recommend that
you keep it to just two parts.</p>

<h3>A symbolic form</h3>

<p>Now that we&#39;ve covered using an array containing objects for <code>form_for</code>, let&#39;s take a look at another common use. An array containing
at least one Symbol object, like this:</p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="p">[</span><span class="ss">:admin</span><span class="p">,</span> <span class="vi">@post</span><span class="p">,</span> <span class="vi">@comment</span><span class="p">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
</code></pre></div>
<p>What the <code>url_for</code> method does here is very simple. It sees that there&#39;s a <code>Symbol</code> and takes it as it is. The first part of the
<code>url</code> will simply be the same as the symbol: <code>admin</code>. The URL that <code>url_for</code> knows of at this point is just <code>[:admin]</code>.</p>

<p>Then <code>url_for</code> goes through the remaining parts of the array. In this case, let&#39;s assume both <code>@post</code> and <code>@comment</code> are persisted
and that they have the ids of 1 and 2 respectively. Same classes as before. <code>url_for</code> then adds <code>post</code> to the URL that it&#39;s building,
and <code>comment</code> too, resulting in <code>[:admin, :post, :comment]</code>.</p>

<p>Then the joining happens, resulting in a method of <code>admin_post_comment_path</code>, and because both <code>@post</code> and <code>@comment</code> are persisted here,
they&#39;re passed in, resulting in this method call:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">admin_post_comment_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">,</span> <span class="vi">@comment</span><span class="p">)</span>
</code></pre></div>
<p>Which (usually) turns into this path:</p>
<div class="highlight"><pre><code class="language-" data-lang="">/admin/posts/1/comments/2
</code></pre></div>
<h3>Testing routes in the Rails console</h3>

<p>Rails provides a way to test out these routes in the <code>rails console</code>, through its <code>app</code> helper.</p>

<p>If we want to test out our <code>post_path</code> helper, we can do it with this call in the <code>rails console</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">app</span><span class="p">.</span><span class="nf">post_path</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># =&gt; /posts/1</span>
</code></pre></div>
<p>If we wanted to test out something more complex, like what <code>redirect_to @post</code> might return, we can invoke <code>url_for</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">first</span>
<span class="n">app</span><span class="p">.</span><span class="nf">url_for</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
<span class="c1"># =&gt; /posts/1</span>
</code></pre></div>
<p>This will also work with an array of objects:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">first</span>
<span class="n">comment</span> <span class="o">=</span> <span class="n">post</span><span class="p">.</span><span class="nf">comments</span><span class="p">.</span><span class="nf">first</span>
<span class="n">app</span><span class="p">.</span><span class="nf">url_for</span><span class="p">([</span><span class="n">post</span><span class="p">,</span> <span class="n">comment</span><span class="p">])</span>
<span class="c1"># =&gt; /posts/1/comments/2</span>
</code></pre></div>
<p>And also if we use the array with a symbol inside it:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">first</span>
<span class="n">comment</span> <span class="o">=</span> <span class="n">post</span><span class="p">.</span><span class="nf">comments</span><span class="p">.</span><span class="nf">first</span>
<span class="n">app</span><span class="p">.</span><span class="nf">url_for</span><span class="p">([</span><span class="ss">:admin</span><span class="p">,</span> <span class="n">post</span><span class="p">,</span> <span class="n">comment</span><span class="p">])</span>
<span class="c1"># =&gt; /admin/posts/1/comments/2</span>
</code></pre></div>
<h3>Working with weirdly named routes</h3>

<p>If you have routes that do not match their model names within the application, then you&#39;re going to run into trouble with <code>url_for</code> and friends.</p>

<p>Let&#39;s imagine you&#39;ve got routes like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">resources</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">as: :articles</span>
</code></pre></div>
<p>You will not be able to use things like:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">link_to</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span> <span class="vi">@post</span>
</code></pre></div>
<p>Or:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">redirect_to</span> <span class="vi">@post</span>
</code></pre></div>
<p>This is because the routing helper that we will need for this is called <code>article_path</code>, and not <code>post_path</code>. The inferrence of the route from the model name will break in this particular usage of <code>link_to</code>.</p>

<p>If you are unable to change the routes themselves to correct this difference, the way around it is to use a different syntax. This one:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">link_to</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span> <span class="p">[</span><span class="ss">:article</span><span class="p">,</span> <span class="ss">id: </span><span class="vi">@post</span><span class="p">.</span><span class="nf">id</span><span class="p">]</span>
</code></pre></div>
<p>We can test this in our console too by using <code>app.url_for</code> again:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">first</span>
<span class="n">app</span><span class="p">.</span><span class="nf">url_for</span><span class="p">([</span><span class="ss">:article</span><span class="p">,</span> <span class="ss">id: </span><span class="n">post</span><span class="p">.</span><span class="nf">id</span><span class="p">])</span>
</code></pre></div>
<p>The way this work is that it sees that the first element is a symbol called <code>:article</code>, and so it infers that the start of the routing helper is <code>article_</code>. Then, given that there&#39;s no more symbols, it builds a routing helper called <code>article_url</code>. The final element of the array is then passed as an argument to this method, finishing up as this method call:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">article_url</span><span class="p">(</span><span class="ss">id: </span><span class="n">post</span><span class="p">.</span><span class="nf">id</span><span class="p">)</span>
</code></pre></div>
<h3>Conclusion</h3>

<p>You can use the array form of polymorphic routing with the <code>redirect_to</code>, <code>link_to</code>, <code>form_for</code> and <code>form_with</code> methods. There&#39;s probably other
methods that I&#39;m not remembering right now that can do it too... it&#39;s generally anything in Rails that would normally take a URL.</p>

<p>There&#39;s no need to build your URLs in any Rails version greater-than 2 using hashes; that&#39;s pretty old school. If you see cases like this in your applications, attempt a refactoring!</p>

<p>Experiment with your new knowledge of polymorphic routing and use it to the best of your advantage.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Working Towards Integration Testing Duolithic Applications</title>
   <link href="http://ryanbigg.com/2018/10/integration-testing-duolithic-applications"/>
   <updated>2018-10-16T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2018/10/integration-testing-duolithic-applications</id>
   <content type="html"><![CDATA[<p>I&#39;ve been revisiting <a href="https://github.com/radar/twist-v2">Twist v2</a> recently. It&#39;s my book review tool that I&#39;ve rebuilt multiple times over the past 8 years. Its latest incarnation is what I&#39;m calling a &quot;duolith&quot;: a very light Hanami backend application with a GraphQL API, and a frontend built with React and Apollo.</p>

<p>The backend and the frontend codebases are kept in separate directories in the same codebase. This allows for separation between the Ruby and JavaScript code, but also the ability to commit changes to both at the same time. The frontend knows how to communicate with the backend, but the backend is frontend-agnostic. Tomorrow I could replace it with Vue and the backend wouldn&#39;t care at all.</p>

<p>I&#39;ve got pretty extensive testing for the backend, but sparse tests for the frontend. But nothing testing the connection between the two. So I&#39;ve been thinking about how to write some integration tests to cover everything. In the apps I&#39;m used to (Rails ones), I&#39;d just drop some tests into <code>spec/features</code> and it would Just Work™ because that&#39;s what Rails is good at.</p>

<p>But this time I&#39;ve made my life (intentionally) harder by separating the codebases, with the intention over the long-term being that these two codebases are easy to navigate due to their clean separations. The time between re-visiting this app can be months, so it&#39;s important that it&#39;s easy to grok again once I come back to it.</p>

<hr>

<p>Integration testing though is an interesting problem. I know I need some sort of test harness that boots a database, the backend app and the frontend app and then runs some tests over it? But how would I do that?</p>

<p>But then there&#39;s an added complication: for each test I need to setup specific data to test it. And that data should be included in the test itself, so it&#39;s easy to find what&#39;s relevant to this particular test.</p>

<p>To start with, I tried creating a completely separate thing called <code>integration</code> at the top-level of this repository, but ran into issues with how to setup the data cleanly. I wanted classes from the <code>backend</code> application, but in <code>integration</code> they weren&#39;t there.</p>

<p>So I tried another tack: putting the integration tests in the <code>backend</code> application. This instantly meant that I could access classes to create data for my tests. I could then also rely on the RSpec suite of tests that were already there, extending it a little further.</p>

<p>I&#39;ve been <a href="https://github.com/radar/twist-v2/blob/integration-tests/docker-compose.yml">looking into Docker Compose</a> for just this and it seems to be working. I can start up:</p>

<ul>
<li>A database</li>
<li>Migrations (to create the tables)</li>
<li>Frontend application</li>
<li>Backend application</li>
<li>Feature tests</li>
</ul>

<p>And then it run those tests in an &quot;integration test environment&quot;.</p>

<p>I&#39;ve got a work-in-progress branch that I wanted to share here: <a href="https://github.com/radar/twist-v2/tree/integration-tests">twist-v2 @ integration-tests</a>. You can start following along at <code>docker-compose.yml</code> to see how things are piecing together. Take a look at <code>backend/Dockerfile</code> and <code>frontend/Dockerfile</code> too.</p>

<p>Now that I have something working, I can be more confident that this application is working as I intend it to.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Junior Engineering Program: Resources</title>
   <link href="http://ryanbigg.com/2018/08/junior-engineering-program-resources"/>
   <updated>2018-08-29T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2018/08/junior-engineering-program-resources</id>
   <content type="html"><![CDATA[<p>This post is part of a series of posts about the first cohort of the Culture Amp Junior Engineering Program (JEP). You can read the first two posts here:</p>

<ul>
<li><a href="https://ryanbigg.com/2018/08/junior-engineering-program-launch">Junior Engineering Program: Launch</a></li>
<li><a href="https://ryanbigg.com/2018/08/junior-engineering-program-onboarding">Junior Engineering Program: Onboarding</a></li>
</ul>

<p>In the last post I covered the process of what we did in the weeks immediately following the juniors starting, but didn&#39;t talk too much about what we taught them during those or subsequent weeks. That is what this post is going to talk about: what we taught our juniors over the 26 weeks of the Junior Engineering Program.</p>

<p>In the first post, I briefly rattled off some tech that we used:</p>

<blockquote>
<p>The juniors learned how to work effectively in teams and amongst themselves, as well as learning about /Ruby, PostgreSQL, Mongo, Rails, JavaScript, Flow, React, JSON APIs and GraphQL/, all within 6 months time.</p>
</blockquote>

<p>This would seem to imply a logical progression from Ruby to PostgreSQL to Mongo and so on. Things were not quite done that way. At the start of the program, I had pre-planned the first 7 weeks of work. In hindsight, this planning was excessive.</p>

<p>At the start of most JEP weeks, we had a retrospective session where we discussed the previous week&#39;s work, and what we would like to do in the coming weeks. This really influenced what was taught throughout the program and provided a better structure than one I could&#39;ve come up with myself. Often, the JEP cohort would be the one deciding what we would learn next time, not me.</p>

<h2>Part 1: Git, GitHub + Ruby (Weeks 1-5)</h2>

<p>In this first part, we covered Git + GitHub and Ruby.</p>

<p>For the Git + GitHub sessions, the juniors wrote some &quot;user manuals&quot;, telling us about themselves. They then had to commit these manuals to a git branch and submit a pull request to merge that into the master branch. Other juniors would then review that PR. This was designed to get them familiar with git branching, merging and the GitHub pull request / review cycle.</p>

<p>For the remainder of this part, we focussed on Ruby skills. We covered some Exercism and Advent of Code Exercises. I think these exercises are a great tool to practice Ruby with. When working on these exercises, we introduced the concept of &quot;mob programming&quot;, where one junior would write code for 5 minutes while the other juniors told them what to type. Once the 5 minutes was up, another junior would take over. This was good practice working well together in a group.</p>

<p>We also worked on modelling a small Ruby application that had a similar data model as our big Rails application. Alongside this small application, I taught them about <a href="https://github.com/radar/guides/blob/master/code-organisation.md">code organisation within a Ruby application</a> and how to write RSpec tests from scratch.</p>

<p>During the writing of this application, I showed examples of two of my favourite design principles: the Single Responsibility Principle and the Law of Demeter. Code was written to intentionally violate these design principles, and then the code was refactored to use them. I think this demonstration went well.</p>

<h2>Part 2, v1: Rails (Weeks 6-8)</h2>

<p>And then I tried teaching them Rails. The goal here was for the juniors to build a link shortener application, which is more complicated than it sounds.</p>

<p>I&#39;ll cover more about this in the &quot;Lessons Learned&quot; section at the end, but one does not simply teach Rails to juniors straight after teaching them Ruby. I realised this after some of my juniors asked &quot;What does this <code>SELECT * FROM</code> thing mean in the output?&quot;. It became pretty clear to me that I had completely ignored that the juniors didn&#39;t know about databases yet.</p>

<p>We started working on this Rails application, using RSpec &amp; Capybara to test it. We got as far as building out the initial CRUD implementation of this app, but really the juniors needed to know more about databases before they could work effectively in a Rails application.</p>

<h2>Part 2: v2: Databases (Weeks 9-13)</h2>

<p>And so I spent a few weeks teaching them about databases. Because our link shortener Rails application was using a relational database to start with, we started learning about PostgreSQL (Week 9).</p>

<p>In these weeks, we covered how to insert, select, update and delete records from a table, how to join multiple tables together and about <a href="https://en.wikipedia.org/wiki/Database_normalization">database normalization</a>.</p>

<p>At Culture Amp we also use MongoDB, and so we spent two weeks covering the same sorts of actions as above, but with that database instead.  We also covered some more esoteric knowledge, like the <a href="https://docs.mongodb.com/manual/core/aggregation-pipeline/">MongoDB Aggregation Pipeline</a>.</p>

<h2>Part 3: Rails (Week 14)</h2>

<p>Once we had worked on databases for a few weeks, we came back to the link shortener Rails application. The juniors finished off their CRUD implementations, and began work on adding user authentication and a JSON API to this application.</p>

<h2>Part 4: The Rails Exam (Week 15)</h2>

<p>Once the juniors had built out this application, we then gave them an exam to test their knowledge of Rails applications. <a href="https://github.com/cultureamp/jep/tree/master/week15">This exam</a> involved building a small CRUD application from scratch, using all the skills that they had learned in the proceeding weeks. The juniors had an entire week to complete this exam. There was to be no &quot;pass&quot; or &quot;fail&quot; in this exam; it was just to provide some insight into where the juniors were at when it came to Rails.</p>

<p>The following week I spent marking these exams, again using a rubric that I had devised. I spent a lot of this week talking to the juniors about their results. I covered things like what they might&#39;ve missed, ways to write cleaner code and more. To say more would be to give away a few of the &quot;answers&quot;.</p>

<h2>Part 5: JavaScript / React / APIs (Weeks 16-18)</h2>

<p>We rounded off the program by teaching the juniors about JavaScript, React, and APIs.</p>

<p>This part was kicked off by one of our Senior JavaScript Engineers, Sam Margalit. He ran two days of JEP, teaching the foundations of JavaScript, Flow and React in that time.</p>

<p>The juniors then learned how to integrate their React applications with the Rails app that they had built. This was done first by building and using a JSON API that they built within the Rails application, and then later on by an equivalent GraphQL API.</p>

<h2>Lessons Learned</h2>

<p>Planning the JEP course was remarkably hard and I have newfound respect for teachers who do this sort of curriculum planning thing year-round.</p>

<h3>Better explanations / walkthroughs</h3>

<p>What I found with a lot of the material for juniors, especially when it was <em>brand new</em> to them, was that in order to learn they needed more than just the code itself. While it&#39;s intuitive <em>to me</em> to read code top-to-bottom and (usually) understand it first-pass, it is not the case for juniors. Writing code is  the same.</p>

<p>For this, I would involve more pseudocode and step-by-step walkthroughs of what the code should be doing in order to accomplish a particular goal. A few weeks in it was brought up by a junior that the simple task of me writing the steps of a short program on the whiteboard really helped them understand the order of what the program was doing. I think a good term for this sort of thing is &quot;chunking&quot; -- breaking problems down into their smallest pieces. We&#39;ll focus a lot on this next JEP.</p>

<p>Along the same lines, I would like to do more practice of walking through code to track how something is defined and then used throughout a Rails codebase. As an example: how would a junior know how to find how a field is displayed on a particular page, if they only knew the route and the value of the field? How would they even <em>begin</em> to debug that sort of thing? More practice is required here also.</p>

<h3>More focus on fundamentals</h3>

<p>What might&#39;ve helped here also is more practice around the fundamentals. Just how does it all work when you type in <code>http://localhost:3000</code> into your browser and hit enter? What is a HTTP request? What&#39;s HTTP? What&#39;s a port? What&#39;s DNS? What&#39;s TCP?</p>

<p>I don&#39;t mean to say that there needs to be a whole <em>week</em> dedicated to each of these things, but at least covering them in a light amount of detail would be a good start. We definitely missed doing this at the start of the JEP and the next time around I will do this as these are the real fundamental concepts of every web application.</p>

<h3>Databases <em>before</em> Rails</h3>

<p>And now for the big regret: I hinted at this earlier on, but teaching Rails <em>immediately</em> after Ruby was... well, it was one of those &quot;what was I thinking?&quot; moments. The &quot;M(odel)&quot; of Rails applications is thing that underpins it all; if there is no data (no models) within a Rails application, what&#39;s the point? Teaching databases <em>first</em> is vital.</p>

<p>Juniors must have at least an understanding of how to query databases, and perhaps also an understanding of how to model them in the first place in order to work effectively within applications that are backed by a database.</p>

<p>I would like to spend more time earlier on in the course teaching them about MVC <em>after</em> Ruby but before even talking about Rails. I want to spend time teaching them about models and what they provide, and then about views and what they do and wrap it up with how controllers bring the two together. No Rails course or book out there that I know of introduces MVC <em>slowly</em> like this, but I think it is certainly required.</p>

<h3>Flip it and reverse it</h3>

<p>Last time, we taught in roughly this (simplified) order:</p>

<ol>
<li>Ruby</li>
<li>Databases</li>
<li>Rails</li>
<li>APIs</li>
<li>JavaScript</li>
<li>React</li>
</ol>

<p>After our experiences with the JEP last time and talking about the structure of the next JEP with other people, I&#39;m now convinced that this order was backwards.</p>

<p>We should be starting at the browser and then working back from there. The whole reason why we&#39;d use Ruby to run Rails to serve an API that React reads from is so that we would see something in the browser! So I think rendering stuff in the browser <em>first</em> is a better approach.</p>

<p>This means that I would teach roughly in this order next time:</p>

<ol>
<li>HTML / CSS / JavaScript</li>
<li>React</li>
<li>APIs</li>
<li>Ruby / Sinatra</li>
<li>Databases</li>
<li>...</li>
</ol>

<p>The browser is the entry point for most requests. To understand why you need Ruby to build a web <em>thing</em>, you first need to realise what a web <em>thing</em> looks like. We could start with building a static site and then slowly make it more dynamic by bringing in things like React, external APIs, etc.</p>

<p>To work with browser tech there&#39;s sites like <a href="codepen.io">Codepen</a> and <a href="stackblitz.com">StackBlitz</a> that have zero-setup required. This means that we&#39;ll have a smoother time jumping into things too.</p>

<p>I&#39;m glad that I get to experiment with the JEP structure like this and I really look forward to seeing what comes out of this browsers-first experiment.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Junior Engineering Program: Onboarding</title>
   <link href="http://ryanbigg.com/2018/08/junior-engineering-program-onboarding"/>
   <updated>2018-08-28T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2018/08/junior-engineering-program-onboarding</id>
   <content type="html"><![CDATA[<p>This post is part of a series of posts about the first iteration of the Culture Amp Junior Engineering Program (JEP). You can read <a href="https://ryanbigg.com/2018/08/junior-engineering-program-launch">the first post here</a>.</p>

<p>In the last post, I covered how we launched the Junior Engineering Program at Culture Amp, all the way up to formally hiring the juniors.</p>

<p>In this post, I&#39;m going to cover what we did to make sure the juniors were successful when they arrived. First of all, we needed to be prepared!</p>

<h2>Preparing for the juniors</h2>

<p>First impressions matter.</p>

<p>At Culture Amp, our onboarding process is thoughtfully designed to slowly ease new people into their time with us. You can choose custom equipment if you like, and you&#39;ll get a wonderful welcome package on your first day, some of which is pictured here:</p>

<p><img src="/images/jep/onboarding.jpg" alt="Welcome package"></p>

<p>Alongside these things, they also get some Culture Amp swag, as any good tech [ex-]startup would give their employees on their first day.</p>

<p>We also spent this time getting the teams ready to bring on a junior by talking with them about what would be required and answering any questions they had about the process.</p>

<h2>The first day</h2>

<p>As I said before: first impressions really matter. This is <em>especially</em> the case for juniors who may not have worked in a development job before. The last thing we want to do is to scare them away from the tech industry completely.</p>

<p>On the first day, juniors had a lovely late start at 10am instead of the regular 9am. I greeted them at the door and led them to their first induction session where they setup their computers, all new MacBook Pros.</p>

<p>This process was led by our People and Experience crew, Ginny Fry, Thang Ngo and one of our IT admins, James Smith. Even though this session was two-hours long, there was still more to setup.</p>

<p>But before that happened, we all went out for a big JEP lunch at Tahini Diner! Here&#39;s our juniors enjoying that lunch:</p>

<p><img src="/images/jep/team-lunch.jpg" alt="Team Lunch"></p>

<p><em>Left-to-right: Lauren Hennessy, Angel Peña Ruiz, Rebecca Vo, Julie Huang, Namibia Lebron-Torres, Ramya Ravindranath, Jasmine Ellis, Jaime Terreu.</em></p>

<p>[aside] You may notice here that there are <em>eight</em> people around the table instead of <em>five</em>. Lauren, Angel and Ramya were all working at Culture Amp as juniors before the JEP started, but they chose to be a part of the program too to boost their skills. We call these people our &quot;super juniors&quot; because they had a head-start on the rest.</p>

<p>This was a great moment for all the juniors to spend some more time to get to know each other.</p>

<h2>The first week</h2>

<p>We ran our first couple of JEP sessions that week on Tuesday and Wednesday. The first session focussed on Command Line Tips &amp; Tricks. Things like:</p>

<ul>
<li>A few common command-line utils. Some examples: <code>ls</code>, <code>mkdir</code> and <code>touch</code>.</li>
<li>Using the <code>git</code> command to stage, commit and push files to a repository</li>
<li>Using <a href="https://github.com/rupa/z">z</a> to quickly navigate to a directory</li>
<li>Using <a href="https://github.com/junegunn/fzf">fzf</a> to recall commands or to find files in the current directory</li>
</ul>

<p>We chose to focus on the command-line first as its the thing that developers use the most. Learning how to be productive in the command-line is important.</p>

<p>Our second session covered Git in more detail, GitHub and Pull Requests.</p>

<p>For the Git exercise, we had the juniors write up &quot;User Manuals&quot; for themselves, which involved them filling out answers to some questions and sharing them with the group. These questions ranged from &quot;What does your perfect working day look like?&quot; to &quot;How do you take your coffee / tea / other hot beverage?&quot;. The juniors would then submit these answers as a pull request to a &quot;user manual&quot; repository, where they would then have to get a &quot;review&quot; from one of the other juniors. This was to be the first taste of the GitHub pull request review experience.</p>

<p>The idea behind this exercise was that it wasn&#39;t a pull request modifying an existing bit of code or document. It was something that was entirely unique to the junior that they could attend to and improve upon. We&#39;ll definitely do this again next time.</p>

<p>On the Thursday and Friday of that week, the juniors spent time finishing their user manuals as well as spending <em>a lot</em> of time configuring their editor and terminal setups exactly how they wanted them to be.</p>

<p>This was also to be their first introduction to the people on their teams, with all but two of the juniors going to separate teams. The teams held <em>another</em> team lunch for each of the juniors within this first week, which was a good way for the team to get to know who they&#39;d just hired.</p>

<p>On the Friday we had <em>yet another</em> welcome lunch, this time in the office to welcome all new five starters. Everyone from the Melbourne office came along. This was a good way for our juniors to meet everyone who they could work with in the office and was another way for us to make them feel welcome.</p>

<p>The goal of this entire week was to leave the juniors with an <em>excellent</em> first impression of what it is like working at Culture Amp and I think we did a great job of that.</p>

<h2>The first few weeks&#39; structure</h2>

<p>During the first weeks of the JEP, we split the week between the JEP and &quot;team time&quot;, with the juniors spending Monday and Tuesday working on the JEP, and Wednesday, Thursday and Friday working with their teams. This was designed to give the juniors two days worth of time 100% dedicated to learning, but still give them that valuable work experience that they wouldn&#39;t get if they were studying at university, or in a code academy.</p>

<p>We would start our Mondays with a retro that talked about how the previous week went: what we loved, what didn&#39;t go so well, what we wanted to learn and anything that puzzled us. This was a great way to start the week and often the juniors made some suggestions about what they wanted to learn next. We then adapted the program to suit where they wanted to go.</p>

<p>For the remainder of Monday, we&#39;d cover a particular facet of development, and then assign the juniors &quot;homework&quot; to do for the remainder of the day. They would then have <em>all</em> of Tuesday to work on that homework, and then whatever time they found throughout the rest of the week to do it.</p>

<p>On Wednesday, Thursday and Friday, they worked closely with their teams to learn the ropes about how work gets done at Culture Amp. The juniors learned about our very large Rails application. To introduce the juniors to the code, we gave them some small Trello cards to do. These tasks involved things as small as changing the text on some buttons, up to fixing a bug involving several different parts of the application. We wanted to get them some quick wins on the board so that they would feel like productive members of the team.</p>

<p>The juniors would pair with more senior developers to learn how to accomplish these tasks, with the hard-and-fast rule that the junior must be the one driving the computer as much as possible. We spent this a lot of this initial time explaining the &quot;whys&quot; of the work to help the junior understand why the work was meaningful. Rather than simply telling the junior what to type all the time, we would often ask them questions like &quot;why do you think this bug is happening?&quot; to help them practice their critical reasoning skills with the codebase.</p>

<h2>Switching to a 3-week cadence</h2>

<p>At about the 10 week mark of the program, we realised that splitting the week up in 2 days for JEP and 3 days for the team was the wrong decision to make. Splitting it up this way meant that juniors would have a &quot;split-brain&quot; between the JEP and their team work, and also that teams would not be able to prioritise meaningful work for their juniors.</p>

<p>After some discussions with our leadership at Culture Amp, it was decided that we would switch to a 3-week cadence: 1 week with the JEP, and 2 weeks with the team. This worked so much better! Juniors were able to devote more of their attention to the work they were doing in JEP, and teams were able to give the juniors meaningful work.</p>

<p>This worked so well that we&#39;ll be doing this for the next program from the first day too.</p>

<h2>Supporting the Juniors</h2>

<p>Supporting juniors is absolutely critical. Having them do homework or teamwork is never supposed to be the &quot;be-all and end-all&quot; of any junior&#39;s life. What they need is someone there that can provide them with long-term career / life support because being a junior is <em>hard</em>, especially when you&#39;re &quot;surrounded&quot; by people who you can see are better than you.</p>

<p>When anyone starts at Culture Amp, they&#39;re assigned to a Mentor. This person is typically <em>not</em> their direct boss, but someone from a different team that can provide the new hire with some career, tech or life advice when it&#39;s asked for.</p>

<p>Our juniors were no different. They were paired up with one of our Mentors from the very first week. They were told that they could go to these people and ask them for help whenever they wished. It was the Mentor&#39;s job to ensure that the junior felt encouraged and supported at Culture Amp.</p>

<p>I should also mention about the &quot;CAmp buddy&quot; program too. Everyone who starts is <em>also</em> assigned a &quot;CAmp buddy&quot; who helps answer questions like where to find things around the office, where the best lunch options are, and who&#39;s who within the office. Our juniors were all paired up with one of these too.</p>

<p>This also meant that the juniors had four points of contact for potential support at Culture Amp:</p>

<ul>
<li>Their mentor</li>
<li>Their CAmp buddy</li>
<li>Their direct team lead</li>
<li>Me as the Junior Engineering Program Lead</li>
</ul>

<p>This support net is designed to ensure that every person who joins Culture Amp is tremendously well supported. Having this support for our juniors meant that we provided a fostering and welcoming environment.</p>

<p>We wanted not just their first week, but their &quot;life&quot; at Culture Amp to be one where they were supported and encouraged to grow in their capabilities. We felt like this is the way to set juniors off on the right foot in terms of their career progression.</p>

<h2>Lessons learned</h2>

<p>Culture Amp&#39;s onboarding process has been consistently worked on, as we improve it each time we onboard someone. Giving our juniors their &quot;equipment&quot; on the first day and all the introductions were a great thing to do. Equipment, introduction and support-wise I think we&#39;re doing a great job.</p>

<p>One area that we could work on improving here is making it clearer what their responsibilities are as a junior. At Culture Amp, these juniors all joined teams that were senior-heavy. On those teams, the seniors have a high output of quality work and as a junior it can be super intimidating -- when a senior completes four cards in the time it takes you to get through half of one (or less).</p>

<p>During the first few weeks, I heard from <em>almost all of my juniors</em> about this particular feeling of inadequacy quite a lot.  While I think this is a natural part of being a junior at any company, I would love to spend more time with the next batch of juniors talking about this. I would really reenforce that their job is to <em>learn</em> and if that&#39;s all they&#39;re doing then that&#39;s <em>perfectly okay</em>. They don&#39;t have to fix bugs from Day 1 or even Week 1. More communication around this is essential next time. I did outline this once at the start, but a constant communication of this idea is required.</p>

<p>Along these same lines, I would hope to speak with the juniors&#39; team leads more next time to ensure that there&#39;s no or very little pressure coming from them to get work done. I think I didn&#39;t communicate quite enough with them about that part either. Having the juniors hear from the team leads about this attitude of &quot;your job is to <em>learn</em>&quot; would probably help the next batch too. The way to fix this would be to have a big chat with the junior&#39;s team -- including the junior too -- and to very clearly outline expectations there.</p>

<hr>

<p>In the next post, I&#39;ll cover the resources that we used to teach the juniors now that they were working at Culture Amp.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Junior Engineering Program: Launch</title>
   <link href="http://ryanbigg.com/2018/08/junior-engineering-program-launch"/>
   <updated>2018-08-27T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2018/08/junior-engineering-program-launch</id>
   <content type="html"><![CDATA[<p>Over the last year, a lot of my time has gone into developing and running a Junior Engineering Program at Culture Amp. This program ran for a total of 6 months, but the preparation took a bit longer.</p>

<p>Within this program, we taught 10 junior developers the fundamentals of programming. The juniors learned how to work effectively in teams and amongst themselves, as well as learning about Ruby, PostgreSQL, Mongo, Rails, JavaScript, Flow, React, JSON APIs and GraphQL, all within 6 months time. Our target was for the juniors to become &quot;confident and capable engineers&quot; and we have succeeded in that target. They&#39;re now super-powered juniors!</p>

<p>In this post, I&#39;m going to cover how we launched the Junior Engineering Program at Culture Amp.</p>

<p>In subsequent posts, I&#39;ll go into more detail about the onboarding process, as well as the resources and techniques that we used to teach the juniors.</p>

<h2>Getting Started</h2>

<p>I&#39;ve been mentoring junior developers for close to a decade. I do it because I have always got a thrill out of the “lightbulb moments” that happen when I’m doing that mentoring.</p>

<p>In April of 2017, Culture Amp had an internal &quot;Hackathon&quot; and one of the ideas to come out of that was a &quot;Graduate Developer Program&quot;. This ignited the interest in the company of running a structured program where we would hire more junior developers and provide structured training to the juniors that we already had, as well as providing the same training to the new juniors.</p>

<p>The idea was not immediately implemented after the Hackathon, but nevertheless the conversation continued for a couple of months and it picked up steam. I talked with a lot of people at Culture Amp about running a program, and a few months later it was decided that we would hire somewhere between 2-4 junior developers and launch this program.</p>

<p>Around about the same time, <a href="https://hooroo.com">Hooroo</a> was working on launching their own Graduate Developer Program. I had a couple of great chats with Elle Meredith and Stu Liston from that program which influenced parts of what I did with Culture Amp&#39;s program. I&#39;m grateful to them for those talks.</p>

<h2>Advertising</h2>

<p>We didn&#39;t exactly have a pool of junior developers who we could call up and ask if they wanted to apply for a job opening, and so we had to advertise these new positions.</p>

<p>We created a small landing page for this purpose:</p>

<p><img src="/images/jep/launch.png" alt="JEP Launch Page"></p>

<p>We advertised this page through out social networks, and by word of mouth. Within the first week we received 50 applications. By the cut-off date of August 25th, 3 weeks later, we had received 129 applications. Quite a few of those were on the very last day!</p>

<p>We quickly realised that we had a <em>mountain</em> of work to do. We had to filter down all these candidates to just a small handful.</p>

<h2>Resume Screening</h2>

<p>We read every single resume that was submitted to us, which took an extremely long time, but was well worth the investment.</p>

<p>What we were looking for was an interest in programming, and perhaps some examples of some development work that had been done. Even toy projects were good to see! It didn&#39;t have to be Ruby. We liked seeing anything in Ruby, JavaScript or even some HTML + CSS work.</p>

<p>Outside of the tech sphere, any work done within a team setting at another workplace was also seen as a big plus.</p>

<h2>The Initial Interview</h2>

<p>While the applications were open, we started our initial interview process. This was a quick 30 minute chat over Zoom with all the candidates who applied, just to see who they were and what their interests were. 104 candidates got through to this stage.</p>

<p>We tried to call as many of the candidates as possible to speak to them for this initial interview.  We ran into some problems getting in touch with some candidates after they applied: we couldn&#39;t contact them via email, or phone. This meant that some of the candidates missed out!</p>

<p>This initial interview went well: the best candidates felt like the ones we could talk to for much longer than half an hour!</p>

<p>This whole process took about two work weeks for two of us (Thang Ngo and myself) in our booths calling candidates. It was exhausting work, but when a great candidate came along it really sparked me back up.</p>

<p>Some candidates did not pass this initial interview. They did not have any prior experience with programming -- and we were definitely looking for this. We also liked hearing about those who had done some Ruby, but that wasn&#39;t as strict a requirement as programming in general. But this was a pretty low bar. We could&#39;ve improved this part of the process by being stricter about our requirements.</p>

<p>Candidates that &quot;passed&quot; the initial interview were sent a coding test.</p>

<h2>Coding Test</h2>

<p>We purpose-built a new coding test for juniors that applied through this program after realising our existing coding test would be too hard for juniors. This test required juniors to demonstrate an understanding of working with fundamental features of Ruby. I&#39;m going to leave that description intentionally vague, as I&#39;m probably going to re-use some ideas from that test in the next version.</p>

<p>The test was split into 6 different &quot;sections&quot;, which had an increasing grade of difficulty per section, with the final section being just that little bit harder than the previous 5. This last section contained problems that we&#39;d expect most juniors to struggle with, but it was put in the coding test to be that little bit of an extra challenge.</p>

<p>Out of the candidates that received this coding test, 69 of them sent it back to us within two weeks for a review, meaning only half of the candidates made it this far.</p>

<h2>Coding Test Feedback</h2>

<p>I gave a talk at <a href="https://www.youtube.com/watch?v=DiYjDHKSH-Q">Melbourne Ruby in October on &quot;Designing the Perfect Coding Test&quot;</a>)  where I cover more about this coding test, but here&#39;s a quick summary.</p>

<p>When building the coding test, we also built a rubric with information on what a &quot;good&quot; submission would look like, the kinds of things we cared about and what we&#39;d forgive.</p>

<p>In this coding test, we cared <em>a lot</em> about the cleanliness of the Ruby code submitted and ran <a href="https://github.com/bbatsov/rubocop/">Rubocop</a> with a custom configuration -- as Rubocop&#39;s default rules are a little <em>too</em> pedantic. We ran Rubocop over the code to determine if the code complied with Ruby style guide best practices.</p>

<p>As an example of something we didn&#39;t care too much about: if someone used <code>collect</code> instead of <code>map</code>, we didn&#39;t mind. The same goes for <code>find</code> instead of <code>detect</code>. These methods function the same, and it&#39;s OK if a junior only knew one and not the other.</p>

<p>We had a team of reviewers to review these tests, to ensure there was no bias in the reviewing process. These reviewers built feedback by reading the coding test and checking it against our rubric.</p>

<p>Reviewing a single coding test took me about 30 minutes on average, and I reviewed about 50 of the coding tests. This required about 30 hours split between two work weeks and a lot of patience.</p>

<p>We decided that we would send the feedback to the candidates after we reviewed the coding test. We wanted to give juniors Actionable, Specific and Kind (A.S.K.) feedback on their coding test so that they could know how to improve for the future. We consider this an investment in the future potential of the juniors.</p>

<p>This feedback included suggested ways of writing code, similar to the sort of comments we might leave on a GitHub Pull Request. It also included recommended reading if we thought there could be something out there that might help the juniors learn.</p>

<p>The juniors were incredibly grateful for the feedback that they received. Here&#39;s some of the feedback on the feedback we received:</p>

<ul>
<li>The feedback provided is very valuable information which will help me improve for future interviews.</li>
<li>I wanted to say thank you for the detailed feedback that was supplied for the coding challenge.</li>
<li>Thank you for the feedback. I feel like I&#39;ve already learned a lot from it.</li>
</ul>

<p>This was really heartwarming meta-feedback to receive from the juniors and we will definitely be doing this again next time.</p>

<h2>The Social and Tech Interviews</h2>

<p>I would say that more than 50% of the juniors that submitted the coding test &quot;passed&quot; the coding test; roughly 35 candidates by this stage were, according to what we were looking for, suitable for the junior position. But we only still had 3 positions to fill!</p>

<p>The next stage of the process was to be a two-interview process where we would bring the candidates into the office. We closely reviewed the best coding tests again and chose the group that would proceed through to the next stage. It ended up that just 16 of our candidates reached the 3rd stage of our interview process, or about 12.5% of our initial applicant pool.</p>

<p>This stage comprised of two interviews: a social interview and a technical interview.</p>

<h3>The Social Interview</h3>

<p>The first interview was an hour-long &quot;social&quot; interview, where we got to know the candidate a bit more. We endeavoured to have a diverse group of interviewers, with a mix of genders and people from different teams doing the interviewing.</p>

<p>In this social interview, We asked harder questions than the &quot;initial interview&quot; to gauge how enthusiastic the candidates were, talked about examples of their teamwork in the past, and asked them how they&#39;d like to grow. This was a great opportunity to get to know our candidates a lot better.</p>

<p>We had this interview as a part of our process as we wanted to hire <em>socially</em> brilliant juniors, not just <em>technically</em> brilliant ones.</p>

<p>The people who were successful in this interview were those who were the most outgoing, excited and eager people. They could hold a friendly chat with our interviewers for half an hour with ease and enthusiasm.</p>

<h3>The Tech Interview</h3>

<p>The second interview was another hour-long interview, this time focussing on the candidate&#39;s tech skills. This was also done by two people of mixed genders from the engineering team.  We started with a gentle introduction containing a couple of tech questions to gauge how well the candidate could speak about their knowledge.</p>

<p>In the 2nd part of this interview, we asked the candidates to expand on their own coding submissions, using their own tests and code.</p>

<p>We emphasised at this point that the candidate didn&#39;t need to complete this part of the coding test. In fact, the task we set in this coding test was designed to be unable to be accomplished in the 30 minutes we allowed for it. Or so we thought! There were a small handful of juniors who did manage to get through it, and that was impressive.</p>

<p>As I said before: we didn&#39;t care about completion though. We cared more about these things:</p>

<ul>
<li>Could the candidate explain their thought process well?</li>
<li>Could they ask for help when they got stuck?</li>
<li>Would they approach the problem by writing tests first, and then the code?</li>
</ul>

<p>The first two things here are critically important skills for a junior developer to have, and not just because they&#39;re well-aligned with Culture Amp&#39;s value of &quot;have the courage to be vulnerable&quot;.</p>

<p>It&#39;s because a junior developer who can explain their thought process well gets practice explaining their technical thinking to other people, which is an excellent skill to have as a developer. Asking for help when stuck shows that the junior can easily reach a point of being comfortable to ask others for help. As a junior, there&#39;s going to be <em>a lot</em> of times where you don&#39;t know something. Asking questions to get answers to figure stuff out is a lot of what a great junior will do.</p>

<p>The final one was not as cared for as the first two, but more of an interesting artefact: has the junior practiced TDD / BDD before? We check for this at Culture Amp because all the work our developers do is tested in this way. We didn&#39;t really care about the <em>style</em> or framework of the tests, just more if they would write them or not. Writing tests is a great habit to be in. It makes you think more about the code you&#39;re writing and allows you to check your assumptions in an automated fashion.</p>

<h2>Picking the final candidates</h2>

<p>By the end of the interview process we had more candidates that we loved than we had open roles. We went back to the teams and had some intense conversations, and ended up finding two more teams willing to take on a junior, bringing it up to 5 juniors that we could hire.</p>

<p>We hired our top 5 candidates, from the 16 that we brought in for interviews, and out of the 129 that initially applied. These were the &quot;top 4%&quot; of all candidates that applied. Another interesting tidbit is this: Out of these top 5, 4 were women. Women tended to grade higher on <em>both</em> the social and technical tests than the men.</p>

<h2>Founder interview</h2>

<p>For every candidate that goes through any Culture Amp interview process, they go through one final stage at the end: the Founder Interview. This isn&#39;t a &quot;pass or fail&quot; type of interview. It&#39;s more of a chat with one of our founders where the founders get to meet the candidates that the rest of us have decided are good enough to hire.</p>

<p>After this founder interview, contracts were issued and signed. We had 5 new juniors about to start!</p>

<h2>Lessons learned</h2>

<p>No process of hiring is ever perfect and what works for one person or company will not work for all.</p>

<p>We had 104 people pass our initial resume screening, which meant that they went through to the &quot;initial phone interview&quot; phase. This is a lot of people to call!</p>

<p>To speed this up next time, we&#39;re going to try something different at the start of the hiring funnel: we&#39;ll send the junior developers the coding test directly after the resume screening point. In place of the initial chat, we&#39;ll be running a few &quot;open house&quot; events so that the juniors can come in and tour our office.</p>

<p>We will also be altering the coding test to provide some more room at the top-end of skill. Grading the <em>really good</em> coding tests was difficult because there wasn&#39;t much to differentiate them on. After now mentoring a group of juniors, we now have a better idea of what where we&#39;d expect their skill level to be at from the outset and we&#39;ll adjust our coding test accordingly. This isn&#39;t to say we&#39;ll make it <em>drastically harder</em> -- that would just be mean! -- more like we&#39;ll just test for slightly different things.</p>

<p><em>Thanks to Rebecca Skinner, Kim Dowling, David Carlin and Jo Cranford for reviewing this post.</em></p>

<hr>

<p>In the next post, I&#39;ll cover how we brought these juniors into Culture Amp through our onboarding process.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Culture Amp Junior Engineering Program: Retrospective</title>
   <link href="http://ryanbigg.com/2018/08/culture-amp-junior-engineering-program-retrospective"/>
   <updated>2018-08-27T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2018/08/culture-amp-junior-engineering-program-retrospective</id>
   <content type="html"><![CDATA[<p>This post is a short summary of the <a href="https://cultureamp.com">Culture Amp</a> Junior Engineering Program (JEP) that I ran from November last year until June this year.</p>

<p>If you&#39;re keen to apply for the 2nd cohort then you can do that here:</p>

<p><strong><a href="https://boards.greenhouse.io/cultureamp/jobs/1295735">Apply here for the Culture Amp Junior Engineering Program&#39;s second cohort</a></strong></p>

<p>This post is the first in a series of four blog posts which will go into detail about how the last JEP operated, with the aim of giving potential future cohort applicants and the general public a taste of what a Culture Amp JEP looks like.</p>

<h2>Our first Junior Engineering Program</h2>

<p>Culture Amp spun up our first Junior Engineering Program in November of 2017. It ran for 6 months, and we trained 10 junior engineers on the skills they needed to be confident and capable engineers who could work on a mixture of backend and frontend applications.</p>

<p>We started this program because we think it is vital to provide a way into the programming community for newcomers. New people bring fresh ideas, and proper training ensures the longevity of our community and engineering practices by providing a steady stream of people ready to become the next generation of engineers.
Training up junior engineers is also a great way for our more experienced engineers to practice their craft too. By explaining things to new people, our engineers get to practice understanding their own thoughts, code, and processes.</p>

<p>At Culture Amp we want to provide an entry path for newcomers and we want our existing engineers to practice explaining and teaching their skills too. These are the two main reasons why we started the Culture Amp Junior Engineering Program.</p>

<h2>Recruitment</h2>

<p>After opening applications for the first program, we were blown away by the quality (and quantity!) of the applications we received.</p>

<p>We talked with most of the people who applied, gave them a junior-friendly coding test to work on, and if they passed that then we brought them in for a few more interviews too. It was a long process, but very worthwhile. We got some pretty amazing junior engineers out of it.</p>

<p>We worked hard on making our interview process as fair as possible by providing a set list of questions for all interviews and by getting pairs of people to do some of the interview stages. The goal of this was to eliminate any personal or unconscious bias that might&#39;ve happened otherwise. At each step of the process, we had some clear measures around what we were looking for too.</p>

<h2>Support and mentorship for Junior Engineers</h2>

<p>Hiring junior engineers is the easy part. After we hired them, the real work begun.</p>

<p>One of our big goals during this program was to grow these engineers into people who were confident and capable within our company. But to do this, we needed to ensure that the juniors felt 100% supported during their time at Culture Amp. A junior who is supported well is one that will learn and grow well. We took a few different paths to support our juniors.</p>

<p>Our program is designed to foster collaboration, so instead of hiring a single junior we hire a cohort of them at a time. This is designed to give junior developers the ability to grow and to share the pain and joy of being a junior developer at Culture Amp as one big cohort. Having other people to talk about shared experiences helps juniors work through any issues that might come up.</p>

<p>We gave juniors extra support by pairing them up with a mentor who would provide them with career guidance and other assistance through 1-on-1 sessions weekly. These mentors would often work on goals with the juniors and check-in regularly about their progress. If the junior was ever unsure about something, they could reach out to their mentor for support.</p>

<p>Juniors were also placed into real development teams and paired up with more senior developers who would then help out the junior by answering their questions, walking through unfamiliar code with them or helping them to understand the processes involved with working within the team.
There isn&#39;t one single thing that we could do to help the juniors feel the most supported at Culture Amp.</p>

<h2>Program Outline</h2>

<p>During the JEP, our junior engineers worked on a mixed schedule of training sessions and real-world work.
Initially, we split the week up so that they spent two days with the program and three days working in their team. We realised that this didn&#39;t work so well, so switched to a 3 week cadence of 1 week JEP, 2 weeks working on a team. The team work was designed to give juniors some time to practice the real-world skills that they learned during the JEP. This 3-week schedule worked really well last time, and it’s what we’ll be doing next time too.</p>

<h3>JEP Weeks</h3>

<p>During the JEP weeks, the juniors were given training sessions on different programming concepts. These sessions were facilitated Junior Engineering Program Lead, Ryan Bigg and occasionally, some guest lecturers too. The training sessions covered technologies like SQL, Ruby, Rails and JavaScript. We use these technologies (and a few more!) at Culture Amp daily, so that provided the juniors the practice that they needed to put their skills to the test.</p>

<p>Juniors were often given homework to accomplish outside of these sessions which would be reviewed when the next JEP session happened. The juniors would discuss their solutions to the homework within the group and with the facilitator too. Out of this session would come some feedback that the junior could then learn from and apply to their future work. This feedback was a vital part about how we supported our juniors too.</p>

<p>While we had in mind what we wanted to teach our juniors during these JEP weeks, we were not too rigorous about it. The course content was adjusted on-the-fly to match up with what the juniors wanted to work on. This kept the juniors interested and engaged in what they were learning.</p>

<h3>Team Weeks</h3>

<p>When the juniors were outside of the training sessions, they would practice their craft by working with teams to fix bugs and deliver features on our real-world applications. All of our juniors contributed to things that thousands of people use world-wide, which is a pretty incredible feat! This work ranges from things like the infrastructure that our servers run on, all the way up to entirely new features like our Effectiveness dashboard.
While the juniors were working on their teams they were paired up with a more senior engineer who could help them out with whatever they needed to do. If the junior was comfortable with being left alone, then we would give them space to do whatever they needed to do as well. This practice worked well last time, and so we’ll be keeping it too.</p>

<h2>Feedback</h2>

<p>To finish up, I want to show you the feedback that we received from the last batch of juniors that went through this program:</p>

<blockquote>
<p>These lessons were invaluable to me as it gave me a chance to step back from my day to day work and take the time to understand the basics of several technologies which I was unfamiliar with.</p>
</blockquote>

<p><hr></p>

<blockquote>
<p>The Junior Engineering Program was a great way to kickstart my career in tech. It provided me with a unique opportunity to advance my skills as a developer, while contributing to exciting real world projects.</p>
</blockquote>

<p><hr></p>

<blockquote>
<p>The Culture Amp Junior Engineering Program is a great opportunity to get started on the engineering career and get a chance to learn the current standards and best practices from some of the best people in their areas of expertise. On top of that you also get the benefits of working for a culture first company that truly cares about your wellbeing.</p>
</blockquote>

<p>We loved working with our first cohort of junior developers we would love the opportunity to work a second cohort of juniors for our next program.</p>

<p>So if you&#39;re a junior developer who&#39;s keen to learn, go and apply for Culture Amp&#39;s second Junior Engineering Program:</p>

<p><strong><a href="https://boards.greenhouse.io/cultureamp/jobs/1295735">Apply here for the Culture Amp Junior Engineering Program&#39;s second cohort</a></strong></p>
]]></content>
 </entry>
 
 <entry>
   <title>Joy of Elixir - Progress Update</title>
   <link href="http://ryanbigg.com/2018/08/joy-of-elixir-progress-update"/>
   <updated>2018-08-22T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2018/08/joy-of-elixir-progress-update</id>
   <content type="html"><![CDATA[<p>I started writing Joy of Elixir <a href="https://ryanbigg.com/2017/07/joy-of-elixir">near the end of July last year</a>. I wrote a large amount of the book in a relatively short time and I&#39;ve been quietly updating it (slowly) ever since.</p>

<p>I took time away from Joy of Elixir to publish <a href="http://leanpub.com/explodingrails">Exploding Rails</a> (which is doing very well!) and then took a little writing break to &quot;recover&quot;.</p>

<p>Recently, I received an email from someone called Svetlana Rosemond. She said:</p>

<blockquote>
<p>Hello Ryan,</p>

<p>I&#39;m currently working my way through Joy of Elixir. Well done!</p>

<p>When will you complete chapter 11? Working with Files. I&#39;m interested to see how to read and write files with Elixir.</p>

<p>Secondly, this isn&#39;t a problem with code, but I really like the way <a href="https://nostarch.com/pythoncrashcourse">Python Crash Course</a> was structured, and I think Joy of Elixir could be structured this way as well. It started with the basics and worked it&#39;s way up to intermediate topics. It might be good for chapter 1 to introduce what an Atom is and the basic types, and a chapter about if, case and cond. Also when working with files, it might be a good time to introduce try, catch, and rescue.</p>

<p>I just think Python Crash Course did a great job in how to structured it&#39;s topics and I believe all beginner level textbooks should be structured this way, but that&#39;s just my opinion. :D.</p>
</blockquote>

<p>I wrote up a relatively long reply to this, and then got her permission to publish it here. So I&#39;m going to use my email reply as a way of reporting the current status of Joy of Elixir, as well as my future plans for the book.</p>

<p>Here&#39;s my reply:</p>

<hr>

<p>Hello Svetlana,</p>

<p>I&#39;ve been pretty busy and haven&#39;t dedicated time to Joy of Elixir recently. Well, until last night!</p>

<p>Your email spurred me on. I took my notes from Chapter 11 and turned them into one section on reading a file.</p>

<p>You can read it here: https://joyofelixir.com/11-files/.</p>

<p>I will try to get the remainder of the chapter done by the end of the week and it will cover:</p>

<ul>
<li>File.write/2</li>
<li>File.rm/1</li>
<li>case statements</li>
<li>with statements</li>
</ul>

<p>I can&#39;t find a particular case (heh) for <code>cond</code> or <code>if</code> statements yet, so I&#39;m going to leave them on the backburner for the time being. I will find a place for them by the end of the book.</p>

<hr>

<p>Regarding your feedback about <a href="https://nostarch.com/pythoncrashcourse">Python Crash Course</a>: I&#39;ve read the first couple of chapters of this book and I couldn&#39;t find where exactly it listed all the basic types at once. From what I can see, it started out relatively simple with strings, variables, numbers and commenting (Chapter 2) and moved into lists (Chapter 3) in almost the same way Joy of Elixir does (Chapters 2 and 3 also).</p>

<p>I disagree that Chapter 1 would be a good place to introduce atoms. At such an early point of this book, it doesn&#39;t make sense to cover all the different types of data that Elixir can represent. There&#39;s quite a few of them! I am trying my best to only introduce concepts when they&#39;re necessary in the book and in Chapter 1 it isn&#39;t useful to know what atoms are just yet.</p>

<p>I should also mention that I haven&#39;t even covered commenting in the book either. I want to start covering this when we start building Elixir modules and putting functions in them. Comments are a super useful way to demonstrate how you can produce documentation with <code>mix docs</code>. That&#39;s where the true power of comments lies with Elixir: that Hex documentation. Oh, and doctests (just like in Python!) are super helpful as well: http://elixir-recipes.github.io/testing/doctests/. So with commenting you can introduce: documentation and automated testing in one fell swoop.</p>

<p>My aim for this book is to be something that someone with little to no programming experience could read and then use it to get a handle on at least one programming language. The chapters of the book are demonstrating what Elixir is capable of while gradually building a repertoire of skills. I think by Chapter 11 we&#39;ve got a pretty formidable set of skills!</p>

<p>There&#39;s currently 3 parts of the book, but there&#39;s also going to be a 4th part which involves a medium-sized project. During this part, I want to start the readers on building a new project with &quot;mix new&quot; and here I want to introduce concepts like:</p>

<ul>
<li>Modules</li>
<li>Structs</li>
<li>Functions with guard clauses</li>
<li>Commenting + documentation</li>
<li>Doctests</li>
<li>Using external dependencies</li>
</ul>

<p>The project is going to be one that can read a CSV file full of people&#39;s data (name, age + gender) and transform its data into a list of maps [RB: now that I think more about it, probably structs instead of maps] and then do some data crunching on that. Can we find what the average age is in this dataset? What&#39;s the gender split as a percentage? Things like that.</p>

<p>These are the last big concepts that I want to cover and I think once we&#39;ve covered those we&#39;re going to have a pretty well-rounded idea of what Elixir is capable of.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Web Directions Code Leaders: Hiring Juniors</title>
   <link href="http://ryanbigg.com/2018/08/web-directions-code-leaders-hiring-juniors"/>
   <updated>2018-08-02T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2018/08/web-directions-code-leaders-hiring-juniors</id>
   <content type="html"><![CDATA[<p><em>Here are my raw speaker notes for my Web Directions Code Leaders talk, titled &quot;Hiring Juniors&quot;. The video will be online later.</em></p>

<p>The slides for this talk are available here <a href="https://speakerdeck.com/radar/web-directions-code-leaders-hiring-juniors">on Speakerdeck</a></p>

<h2>Intro</h2>

<p>[slide]</p>

<p>Hi, I&#39;m Ryan. You know that part already. What you might not know is that I&#39;ve been mentoring juniors on-and-off for close to a decade now and I&#39;ve had varying rates of success.</p>

<p>I&#39;ve mentored juniors who have gone on to become lead developers at tech companies you&#39;d probably know about.</p>

<p>But, at the same time, I&#39;ve also mentored juniors that have quit the industry altogether.</p>

<p>Recently, I&#39;ve spent about the past 10 months recruiting, hiring and training up juniors as a part of the Culture Amp Junior Engineering Program and today I&#39;ve got some things about that process to share with you.</p>

<p>Today I&#39;m going to tell you a little bit about our Junior Engineering Program, why I think hiring juniors is the right move -- by the way of a short story -- and finish up by sharing some tips about what you can do with the juniors that you&#39;re going to hire soon.</p>

<p>[slide]</p>

<p>You&#39;ll be pleased to know that there is absolutely no subliminal messaging in this talk at all. It&#39;ll be just some plain speaking from yours truly.</p>

<p>Mentoring juniors is something that I am really passionate about and I&#39;m hoping today some of that passion will rub off on you. My goal for the end of the talk is to convince you to hire and mentor juniors at your own companies.</p>

<h2>Culture Amp&#39;s Junior Engineering Program</h2>

<p>[slide]</p>

<p>So let&#39;s start with Culture Amp&#39;s Junior Engineering Program.</p>

<p>At Culture Amp, we decided we would run a structured program for juniors as a way of teaching juniors skills that are relevant to our industry today. This is kind of like the antithesis of a university computer science course. Not a line of C or Java in sight.</p>

<p>The idea behind the program is that, over time, we would be able to bolster our best and brightest with some new faces who could help us out.</p>

<p>We ran our very first Junior Engineering Program recently, for 6 months -- from November last year until June this year.</p>

<p>[slide]</p>

<p>Before we started this program, we had 5 juniors already working at Culture Amp, and then we hired another 5 on top of that for a total of 10 juniors across the company. We put all of our juniors through this program.</p>

<p>These are a mixed bunch of fresh faces all with varying backgrounds. Not all of them have CS degrees, or have even worked in IT, for instance.</p>

<p>Just as a comparison to how fresh their faces are, all of them have a much fresher face than what I had as a junior developer.</p>

<p>[slide]</p>

<p>In the Junior Engineering Program, we taught these 10 developers the foundational skills that they needed to be confident and capable developers within our tech stack. We taught them Ruby, Rails, two different kinds of databases and a whole suite of JavaScript tools, all within 6 months. They know these things and a lot more now.</p>

<p>[slide]</p>

<p>During the program, the juniors worked part of the time with me working on learning this tech stack, and part of the time with one of our development teams, fixing bugs and delivering features. This split was designed to give the juniors the opportunity to be taught these skills, as well as a chance to get some real-world workplace experience. The best of both worlds. On one hand: they need the training, but on the other they also need the real-world job experience in order to be truly effective people.</p>

<p>We chose to run a structured program because it would allow us to train up a bunch of people all at the same time, on all the same skills. This would also mean that they could support each other throughout the process. If we brought on only a single junior it would be a &quot;The Junior vs The World&quot; type scenario, which can feel quite intimidating and disheartening. This is not the experience we want for any one, junior or not, to have at Culture Amp.</p>

<p>During this program really encouraged the juniors to succeed and to grow their skills together as a group, despite whatever struggles they might encounter. This &quot;shared pain&quot; aspect of the struggle is important: it makes juniors feel comfortable about being in a position where they don&#39;t know all the answers, and someone else also doesn&#39;t know the answer with them. They then could puzzle it out together. If they got stuck, there was still a support net of knowledgeable people who could help them out.</p>

<p>Hiring a bunch of juniors and running them through the Culture Amp Junior Engineering Program worked extremely well. The juniors that we hired in November are now confident and capable members of our teams who have helped ship real software that thousands of people use. We are very proud of what our juniors have been able to accomplish in just half a year.</p>

<p>[slide]</p>

<p>In fact, the program was so successful that we&#39;re going to be running it for a second time... real soon now.</p>

<h2>Juniors makes your team better</h2>

<p>Now that&#39;s just how we&#39;ve chosen to do it at Culture Amp but a structured program that hires cohorts of junior developers every 6 months isn&#39;t the only way to train juniors at a company.</p>

<p>You don&#39;t need to be a large established organisation, and you don&#39;t need to run a structured program to be able to hire and support a junior.</p>

<p>[slide]</p>

<p>I reckon if you&#39;ve got at least 4 senior developers within your organisation, your next hire should be a junior. As long as you&#39;ve got someone within that group who can dedicate some time to supporting a junior, you can do it.</p>

<p>And it&#39;s not like it&#39;s <em>hard</em> to hire a junior at the moment, either.</p>

<p>[slide]</p>

<p>But why would you want to hire a junior? Won&#39;t juniors slow your team down dramatically, leading to precious productivity losses? Yes, that is unavoidably true. On the you day you hire them, they will do that. And the day after that too. And the next week. But over time, and with mentoring, they will improve and productivity will be even better than before.</p>

<p>I admit that that point isn&#39;t a great one with a lot of evidence to back it up. So I have a greater one to make.</p>

<p>[slide]</p>

<p>One great side-effect of hiring and working with juniors is that everyone else <em>will get better</em> at what they&#39;re doing because they&#39;re now working with a junior. And it will be almost instantaneous. Well, it will take a week or two, but they <em>will get better</em>.</p>

<p>This is because mentoring junior developers forces the people doing the mentoring to slow down and methodically explain their thought process.</p>

<p>It makes them think of things and explain them in different and, usually, better ways. They have to practice really understanding something and being able to explain it to someone who doesn&#39;t know it.</p>

<p>Sometimes, they might even find out that they thought they knew something when, in fact, they didn&#39;t know it very well at all.</p>

<p>Mentoring juniors can be quite humbling in that regard.</p>

<h3>The Junior, the Monolith and the Microservice</h3>

<p>[slide]</p>

<p>One of my favourite stories around this point is about what happened on a team of mine when we hired a junior, back when I was a senior developer at Culture Amp. Long before the Junior Engineering Program.</p>

<p>At the time, we were building a new micro service, as was, and still is, the cool thing to do. For extra street cred: this micro service is even event sourced and written in Ruby on Erlang, oops I mean Elixir.</p>

<p>My team would often talk about the Elixir microservice in high-level terms because the team was quite senior-heavy. Us senior developers knew what we were talking about, or at least pretended to -- after all, we all have big senior developer egos to protect.</p>

<p>When this junior joined, they asked a lot of questions about the microservice. We tried our best to answer these questions. We tried explaining things to them using the jargon that we had all collectively built up. It didn&#39;t work. We tried again using different jargon. It still didn&#39;t work. The junior was still terribly confused.</p>

<p>So I ended up drawing up a diagram of the two systems, our monolith and the microservice, indicating the different parts that were involved. It was this little thing.</p>

<p>I stuck it on a wall in our team area and gave the junior a copy too. This worked! The junior wasn&#39;t confused anymore. The junior was able to look at the diagram and figure out how the two systems worked together. They understood what our jargon meant because it was labeled clearly on the diagram.</p>

<p>But then a really funny thing happened. The seniors started using the diagram more, and more, and more. We talked about the micro service a lot, but when we did we involved the diagram in a lot of those discussions. We used terms listed on the diagram rather than our own words for it. We even re-drew the diagram a few times. We, the seniors, ended up using the diagram more than the junior did!</p>

<p>By having this junior join our team we soon realised that one of our blindspots was how we communicated about this microservice. The junior&#39;s joining led to this creation of &quot;The Diagram&quot; and led to us all communicating more effectively about this microservice. Ultimately: It made us a better team.</p>

<p>This is a small example, but quite a good example of the kind of benefit that adding a junior brought to team that I was a part of.</p>

<p>[slide]</p>

<p>Now wouldn&#39;t you like that kind of thing in your teams? The one simple trick that I have to share today to make your teams better is to introduce a junior into that team and then to have the team mentor them. I&#39;ve seen this improve teams again, and again. It&#39;ll work for you too. You have my money back guarantee.</p>

<p>[slide]</p>

<p>I want you to hire at least one junior because I know <em>from my experience and the experience of teams at Culture Amp</em> that it has most certainly made our teams better. It will make your teams better too.</p>

<h2>My three tips</h2>

<p>[slide]</p>

<p>Now that I&#39;ve utterly convinced you 100% to hire a junior, I want to talk about what to do with them once you have them. This is the scariest part, but I have three easy tips that can help you.</p>

<h3>Mentorship</h3>

<p>First tip: Assign a mentor.</p>

<p>In order for juniors to grow into amazing superstar developers, you must provide them with the mentorship and direction that will get them there.</p>

<p>Juniors are going to need a lot of love and attention. You can&#39;t just put them in the corner and expect them to thrive. It won&#39;t work!</p>

<p>[slide]</p>

<p>Think more of them like a puppy than a cactus: the puppy needs love and attention and some training, but the cactus needs only sunshine and some water. The cactus is indifferent to your love, your attention or the intensity of the training you provide. Cacti are going to Cacti.</p>

<p>Junior developers don&#39;t grow into senior developers with just sunshine and water. And they don&#39;t do it just by practicing development by themselves, either. They need mentorship and thrive on direction! So give it to them!</p>

<p>[slide]</p>

<p>At Culture Amp, we provide this mentorship by pairing each junior up with a mentor within Culture Amp from day one. This is someone who has been at the company a while and can show them the ropes. The mentor&#39;s job is to work with the junior to grow their skill set. They do this by setting goals together, reviewing feedback they&#39;ve received and other activities during weekly 1-on-1s.</p>

<p>While a junior is on a development team, the team supports them by pairing them up with a senior developer who then could help them work effectively on that team and skill them up in what the team needed.</p>

<p>We assigned people this mentor and paired them up within teams as we wanted the juniors to feel super-supported at Culture Amp. We want their experience to be one of overwhelming positivity because being a junior is already hard enough.</p>

<p>I want you to do this in your organisation too. A single point of contact. Someone who can be around for the junior. I want you to have weekly check-ins with the junior and set professional goals with them. Actively seek out feedback about how they&#39;re going and work with the junior on things within that feedback. Support them as much as possible.</p>

<p>[slide]</p>

<p>The junior is going to need this support. Remember: puppy, not cactus.</p>

<h2>It is always ok to ask questions</h2>

<p>[slide]</p>

<p>My second tip is this: tell your juniors that it is always OK to ask questions. Repeat this as much as possible.</p>

<p>Or, if you have a junior at your organisation who rarely asks questions, really re-enforce with them that it&#39;s OK to be asking questions. If a junior is asking questions it means that they&#39;re looking for answers, and if they&#39;re looking for answers it means they want to know something! So take the opportunity to teach them!</p>

<p>Alongside this, pay attention to what juniors are doing. Ask them if they need assistance at all. Maybe see if they&#39;re looking uncomfortable, sad or angry. Sometimes, juniors can be too afraid to ask questions because they think they&#39;re &quot;stupid&quot; questions. Asking juniors if they have any questions gets them to open up, and helps them feel supported.</p>

<h2>Small wins matter</h2>

<p>Third tip: Small wins matter.</p>

<p>When the junior joins your organisation, they&#39;re going to have a large dose of Imposter Syndrome. A lot of &quot;why did they hire me? I know nothing!&quot;. You need to start chipping away at this right away and the best way to do that is to give them wins on the board. These things act as opposites to the feelings of imposter syndrome. Imposter syndrome is saying &quot;you&#39;re not good enough&quot; and these wins are saying &quot;you <em>are</em> good enough&quot;.</p>

<p>Get them to fix typos, investigate bugs, dive into the source to figure out things. Encourage them to drive this effort as much as possible. They&#39;ll feel better about things they were able to accomplish on their own.</p>

<p>Cushion them when they fall, but celebrate with them when they succeed. Chip away at that imposter syndrome piece by piece, and day by day by providing them with small wins. You can work them up to bigger and bigger wins later on. For the early stages, small wins are absolutely critical.</p>

<h2>Feeling Welcome</h2>

<p>[slide]</p>

<p>Ultimately, your mentorship should be about making the junior feel welcome and safe within your organisation. You&#39;ve probably sensed this as a theme to my points already, but I want to take the last few minutes of this talk to really drive this point home: In fact, this should be what&#39;s happening with everyone in your team.</p>

<p>[slide]</p>

<p>Don&#39;t just take my word for it. Google ran a study called &quot;Project Aristotle&quot; wherein they attempted to find how to build effective teams. They interviewed hundreds of their own employees and they came up with 5 things that effective teams had consistently:</p>

<p>[slide]</p>

<p>[image:EEF8C544-A631-4F6F-8796-09A3F95F045D-94246-0000594A81D4A05E/eQ<em>WsRq5-q-m</em>41eEI6GLEObqpxBYJd1pm96gIa-eRSn-QXlPjwO5K6O-DHU8sxny3ChnIQE0mjpnXaaW7QAhQ=s0.png]</p>

<p>The #1 item on this list isn&#39;t &quot;Feeling welcome&quot;, but &quot;Psychological safety&quot;. Same thing. The text underneath says: &quot;Team members feel safe to take risks and be vulnerable in front of each other.&quot; This is the #1 thing you should be encouraging your juniors to do. Take risks and be vulnerable. It is the way they will grow.</p>

<p>Juniors should ultimately feel safe to take risks and to be vulnerable in our teams. Juniors will make mistakes. This is the nature of taking risks. They <em>will</em> mess up from time to time. Give them space to make mistakes. It is how they will learn best.</p>

<p>The remainder of this list is not to be discounted. Dependability, Structure &amp; Clarity, Meaning and Impact are all vital to junior developers progressions.</p>

<p>A junior must be able to depend on the people around them for support. They must be reminded that it&#39;s always OK to ask questions. They must have people around them for that support who they can turn to and ask questions of.</p>

<p>They must have clarity on what their direction is and you can provide that with some solid mentoring and weekly 1-on-1s. Work together to set some goals for them during these 1-on-1s and help them work towards the goals. Gather up some feedback from their peers and talk about it with them.</p>

<p>The juniors must feel like they&#39;re contributing back to a greater whole to keep them motivated and enthusiastic about what they&#39;re doing. Give them meaningful work to accomplish and celebrate with them when they finish it.  You can start with small wins, but work them up from there. Chip away at their imposter syndrome. Be their champion.</p>

<p>When you hire a junior developer, keep these things in mind and ask yourself regularly if you&#39;re following along with them. These things should underpin everything you do with everyone in your organisations, but <em>especially</em> junior developers.</p>

<p>With a concerted effort to make the junior feel psychologically safe, and some semi-structured mentoring in place, they can grow into the future&#39;s most brilliant developers.</p>

<p>Let&#39;s hire and mentor juniors at all of our companies so that they become the next generation of amazing developers.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Making Tests Go Faster</title>
   <link href="http://ryanbigg.com/2018/06/making-tests-go-faster"/>
   <updated>2018-06-15T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2018/06/making-tests-go-faster</id>
   <content type="html"><![CDATA[<p>At Culture Amp, we have a large Rails app that we’ve been building since 2011. This app has about 150k LOC and an extensive test suite that uses Rubocop, RSpec, Capybara, Cucumber and FactoryBot.</p>

<p>We run these tests for the application on Buildkite and currently they take about 16 minutes to run end-to-end. This is 16 minutes that developers are waiting to get feedback on whether their build passed or failed. While this is not unacceptably high, we could do better. Developers could ship things faster, or respond quicker to build failures, with faster builds.</p>

<p>A large chunk of that build time is spent running these tests. In fact, we currently have 8 machines running tests concurrently for each build to speed it up.</p>

<p>We have a bunch of tests in this application that, like in many Rails applications, were written to get something shipped fast with no real focus on making the tests or code particularly fast. As a result, we have tests that create more records in the database than is necessary. While one test taking 1-2 seconds longer than it should isn’t a bad thing, hundreds of these tests taking seconds to run each impacts the build time.</p>

<p>One particularly major offender in our app is a factory for the Survey model. This factory creates an extensive set of records in the database and takes over a second and a half to run. Any test using this factory incurs this delay. And there’s a lot of those tests.</p>

<p>We could refactor this factory to not do such nasty things, but because this factory is for our God Class, it is used everywhere in the application. Refactoring would be a months long effort.</p>

<p>So instead, the better approach is to find tests that are slow and have a dependency on this factory and to remove that dependency where possible.</p>

<h2>Finding slow tests</h2>

<p>We configured RSpec to print out the slowest examples in a test run at the end of every test.</p>

<p>This comes from this line in our <code>spec_helper.rb</code> file:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Print the 10 slowest examples and example groups at the</span>
<span class="c1"># end of the spec run, to help surface which specs are running</span>
<span class="c1"># particularly slow.</span>
<span class="n">config</span><span class="p">.</span><span class="nf">profile_examples</span> <span class="o">=</span> <span class="mi">10</span>
</code></pre></div>
<p>When our tests run, we can view this output and see trouble spots:</p>
<div class="highlight"><pre><code class="language-" data-lang="">Top 10 slowest examples (13.85 seconds, 61.6% of total time):
    [TEST DESCRIPTION GOES HERE}
    2.08 seconds ./spec/models/report_spec.rb:134
</code></pre></div>
<p>One particular trouble spot that I saw was this <code>spec/models/report_spec.rb</code>. This whole file took about 1m20s to run locally, and only for 116 examples. This test used the survey factory extensively, which made the test slow.</p>

<p>This seemed to me like an easy target: a model test that was slow when it should be fast. So I set about fixing it.</p>

<p>That was October 2016. I have since attempted to fix it on at least five separate occasions but gave up. Then this week, I finally managed to do it. Here’s some tips I can share.</p>

<h2>Don’t create the world</h2>

<p>The first tip is a simple one: create the least amount of database objects as possible. By invoking the survey factory, 398 database queries run to create all the things that the factory (and its associated factories) builds. Most tests in our application do not require this, but some do.</p>

<p>I went through the test and replaced each survey factory invocation with a basic_survey factory:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">factory</span> <span class="ss">:basic_survey</span><span class="p">,</span> <span class="ss">class: </span><span class="no">Survey</span> <span class="k">do</span>
  <span class="n">sequence</span> <span class="ss">:name</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
    <span class="s2">"Basic Survey </span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>

  <span class="c1"># some traits go here</span>
<span class="k">end</span>
</code></pre></div>
<p>This creates the bare minimum survey in the database, and leads to ONE database query.</p>

<p>I methodically went through every example in <code>spec/models/report_spec.rb</code> and attempted to replace this call:</p>
<div class="highlight"><pre><code class="language-" data-lang="">FactoryBot.create(:survey)
</code></pre></div>
<p>With this one:</p>
<div class="highlight"><pre><code class="language-" data-lang="">FactoryBot.build(:basic_survey)
</code></pre></div>
<p>Some methods within the <code>Report</code> class do not depend on a <em>persisted</em> <code>Survey</code> object, but just one configured in a particular way. So we can use <code>FactoryBot.build</code> to initialize a new <code>Survey</code> instance with the details from the factory, meaning no database calls are made for this factory invocation.</p>

<p>For the ones that I could use <code>build</code> for, I investigated the reasons why the tests needed a persisted survey and when I was satisfied with the answer, I switched to using <code>FactoryBot.create(:basic_survey)</code>.</p>

<p>This worked for the most part, but there were some tricky parts.</p>

<h2>Tracking down extra queries</h2>

<p>The 2nd tip is that you should inspect database queries and know where they&#39;re coming from.</p>

<p>Sometimes, the tests in <code>spec/models/report_spec.rb</code> relied on the survey being setup in the very particular way that the survey factory did it. In most cases, I wasn&#39;t able to jump through the code to see where certain records were being created or updated, as our factories are pretty large and complex.</p>

<p>The first thing I did to track this down was to confirm that a database query was updating a record in a particular way. Turning on the Mongoid query logging with this line at the top of the spec file:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Mongoid</span><span class="p">.</span><span class="nf">logger</span><span class="p">.</span><span class="nf">level</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div>
<p>Meant that I could see <em>all</em> database queries that were being executed in this test.</p>

<p>From here, I could see the database query that I thought was responsible:</p>
<div class="highlight"><pre><code class="language-" data-lang="">D, [&lt;timestamp&gt; &lt;pid&gt;] DEBUG -- : MONGODB | localhost:27017 | murmur_test.update | STARTED | {"update"=&gt;"surveys", ...
</code></pre></div>
<p>But this output only tells me that the query is happening, not <em>where</em> it is happening. Fortunately, I&#39;ve got a little piece of code that I wheel out for situations like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">LoggingSubscriber</span>
  <span class="k">def</span> <span class="nf">started</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nf">command</span><span class="p">[</span><span class="s2">"update"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"surveys"</span>
      <span class="nb">puts</span> <span class="nb">caller</span><span class="p">.</span><span class="nf">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">c</span> <span class="o">=~</span> <span class="sr">/murmur/</span> <span class="p">}.</span><span class="nf">join</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
      <span class="nb">puts</span> <span class="s2">"*"</span> <span class="o">*</span> <span class="mi">50</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">succeeded</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
    <span class="c1"># p event</span>
    <span class="c1"># p event.duration</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">failed</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">subscriber</span> <span class="o">=</span> <span class="no">LoggingSubscriber</span><span class="p">.</span><span class="nf">new</span>
<span class="no">Mongo</span><span class="o">::</span><span class="no">Monitoring</span><span class="o">::</span><span class="no">Global</span><span class="p">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="no">Mongo</span><span class="o">::</span><span class="no">Monitoring</span><span class="o">::</span><span class="no">COMMAND</span><span class="p">,</span> <span class="n">subscriber</span><span class="p">)</span>
</code></pre></div>
<p>I can put this code at the top of the test file. This code subscribes to <em>any</em>  Mongo database queries through the <code>Mongo::Monitoring</code> feature built into the <code>mongo</code> gem.</p>

<p>When a query happens, the <code>started</code> method in this subscriber is called and passed the event. I can then inspect this event and make it show information about certain queries. In this example, I&#39;m getting it to output stack trace information for queries that update the <code>surveys</code> collection. The &quot;murmur&quot; here is the name of our application; I&#39;m using it here to only show stack trace lines from our application.</p>

<p>With this code in my app, I can now see both the query <em>and</em> where it is coming from:</p>
<div class="highlight"><pre><code class="language-" data-lang="">...murmur/spec/factories/common.rb:397:in `block (3 levels) in &lt;top (required)&gt;'
...murmur/spec/models/report_spec.rb:907:in `create_new_survey'
...murmur/spec/models/report_spec.rb:551:in `create_new_survey'
...murmur/spec/models/report_spec.rb:4:in `block (2 levels) in &lt;top (required)&gt;'
...murmur/spec/models/report_spec.rb:5:in `block (2 levels) in &lt;top (required)&gt;'
...murmur/spec/models/report_spec.rb:113:in `block (4 levels) in &lt;top (required)&gt;'
...murmur/spec/models/report_spec.rb:118:in `block (4 levels) in &lt;top (required)&gt;'
**************************************************
D, [2018-06-15T08:44:49.977091 #11587] DEBUG -- : MONGODB | localhost:27017 | murmur_test.update | STARTED | {"update"=&gt;"surveys",
</code></pre></div>
<p>The stack trace shows me that this query is happening in a factory. With the stack trace lighting the way, I was able to see what the query was doing and then remove the need for it in the test.</p>

<p>I then went through the remainder of this file and reduced the runtime from 1 minute and 15 seconds to 18 seconds.</p>

<h2>There&#39;s more to do</h2>

<p>Taking almost a full minute off our build time doesn&#39;t sound like much, but it&#39;s a 16th of the build time saved. There&#39;s plenty more cases like this in our application that we could fix and reduce the build time further. This would let developers get faster feedback on their builds, making the whole development cycle more efficient.</p>
]]></content>
 </entry>
 
 <entry>
   <title>On Writing Software Well #2: Using callbacks to manage auxiliary complexity: A review</title>
   <link href="http://ryanbigg.com/2018/03/on-writing-software-well-2-a-review"/>
   <updated>2018-03-15T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2018/03/on-writing-software-well-2-a-review</id>
   <content type="html"><![CDATA[<p>This blog post has been <a href="https://techracho.bpsinc.jp/hachi8833/2018_05_10/56193">translated into Japanese</a>, thanks to <a href="https://twitter.com/hachi8833">@hachi8833</a>!</p>

<p>A few people have asked for my opinions on DHH&#39;s recent video series. And others have bemoaned the lack of a critical take on the videos. So here&#39;s a critical take involving my opinions on <a href="https://www.youtube.com/watch?v=m1jOWu7woKM">DHH&#39;s 2nd video</a>) in the series.</p>

<p>Why not start with <a href="https://www.youtube.com/watch?v=H5i1gdwe1Ls">Video #1 in the series</a>? Because it was great! Code comments that explain why things are the way they are... those are incredibly useful to people new / unfamiliar with parts of a codebase. His points were well made and I find nothing worth commenting on. (Pun intended)</p>

<p>Video #2 though has the word &quot;callbacks&quot; in it and so I&#39;m intrigued to hear what DHH has to say about it.</p>

<p>So here&#39;s some &quot;real-time&quot; opinions that I wrote down while watching this video for a <em>third</em> time. If you like this sort of thing, let me know in the comments below.</p>

<h2>Initial reactions</h2>

<ul>
<li>Ew callbacks. I&#39;ve been bitten enough times by these -- mainly cases where callbacks are happening when I do not expect them to. Things like where I might call <code>create</code> on a model in a unit test and that causes some <em>other</em> behaviour via callback that isn&#39;t relevant to the test. I&#39;d prefer to be explicit in these cases to save surprises.</li>
<li>I&#39;ve heard mention that these talks might include Rails concerns (modules being included to add behaviour to classes), so I&#39;d suggest you stop right here, get out your favourite drink of choice and take a drink whenever you see a concern used in the Rails app.</li>
</ul>

<h2>1:35 - &quot;Side effects&quot;</h2>

<ul>
<li>&quot;Side effects .. has gotten also a bit of a bad reputation, especially in functional programming&quot; -- Yeah, because <em>random magical shit</em> happening when you call a method isn&#39;t easily predictable. Having the code be explicit about what it&#39;s doing makes it easier to understand it <em>now</em> and <em>later</em>. The later part is what I think DHH is missing here.</li>
</ul>

<h2>2:13 - Messages Controller</h2>

<ul>
<li><code>@bucket.record</code> takes <em>far</em> too many arguments. What is it doing with them all? And P.S. do you even newline your key / value pairs?</li>
</ul>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@bucket</span><span class="p">.</span><span class="nf">record</span><span class="p">(</span><span class="n">new_message</span><span class="p">,</span>
  <span class="ss">parent: </span><span class="vi">@parent_recording</span><span class="p">,</span>
  <span class="ss">status: </span><span class="n">status_param</span><span class="p">,</span>
  <span class="ss">subscribers: </span><span class="n">find_subscribers</span><span class="p">,</span>
  <span class="ss">category: </span><span class="n">find_category</span>
<span class="p">)</span>
</code></pre></div>
<p>I think that this reads a little better -- and the Git diff would be neater if a new key was added and removed. It <em>feels</em> like <code>category</code> <em>might</em> one be of those things that was added recently and just chucked onto the end here.</p>

<p>TBH a little surprised here that he&#39;s using <code>@parent_recording</code> which is setup as a  <code>before_action</code>,  but <code>find_subscribers</code> and <code>find_category</code> aren&#39;t. They&#39;re called explicitly here. I&#39;d expect some sort of consistency... but maybe there&#39;s a reason for that? The methods are folded at the bottom of the controller so I can&#39;t get a good idea of what those are doing to really judge whether or not it&#39;s a good choice.</p>

<h2>4:15 - <code>Mention</code> model</h2>

<ul>
<li>This model is pretty neat. I cringe a little (PTSD, I guess) on the sight of the <code>after_create</code> and <code>after_commit</code> uses.</li>
<li>Interesting that the model doesn&#39;t inherit from <code>ApplicationModel</code>. Probably a legacy app thing.</li>
<li>Neat use of <code>casecmp</code> in <code>callsign_matches?</code>.</li>
<li>The <code>unless</code> in <code>after_commit :deliver</code> irks me a little, but maybe it&#39;s due to me preferring to keep all the logic inside of methods? I&#39;d write it like this:</li>
</ul>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">deliver</span>
 <span class="k">return</span> <span class="k">unless</span> <span class="n">mentioner</span> <span class="o">==</span> <span class="n">mentioned</span>

<span class="p">.</span><span class="nf">.</span><span class="p">.</span>
<span class="nf">end</span>
</code></pre></div>
<h2>5:55 - <code>Recording::Mentions</code> concern</h2>

<p><em>DRINK</em> -- there&#39;s a concern here. [bad joke about it being &quot;concerning&quot;]</p>

<h3>Callbacks</h3>

<ul>
<li>Okay, so this is using more callbacks. I feel like <code>remember_to_eavesdrop</code> could be something set &quot;further up&quot; in the chain, probably in the controller. The controller itself could check to see if these things have changed, and then from there choose to send out the mentions.</li>
</ul>

<h3>Current Attributes</h3>

<p>The other thing is <code>Current</code> -- used in <code>eavesdrop_for_mentions</code> down the bottom of the code view here.</p>

<p>I already <a href="https://ryanbigg.com/2017/06/current-considered-harmful">wrote about CurrentAttributes at length</a>. Global variables magically being available <em>everywhere</em> in the application. Where is <code>Current.user</code> set? How can I be sure it&#39;s set to a value here?</p>

<h3>Abstracting out the logic for triggering the job</h3>

<p>This whole eavesdropping thing <em>feels</em> like it could be wrapped in some other logic (in a controller, perhaps). It&#39;s practically begging for it. Basecamp probably doesn&#39;t want to be persisting Messages to the database in its tests and having this job code run <em>every single time</em>, but that&#39;s exactly what&#39;s going to happen here. It&#39;d probably slow down the tests due to these side-effects.</p>

<p>It would be better abstracted out to a &quot;service object&quot; which creates the recording and then triggers this <code>EavesdroppingJob</code>. Bonus thing there is that you can pass <code>current_user</code> from the controller and hey look I just got rid of the <code>CurrentAttributes</code> global variable thing.</p>

<p>An idea of what that might look like:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Mention</span>
  <span class="k">class</span> <span class="nc">EavesdropForMentions</span>
    <span class="kp">attr_reader</span> <span class="ss">:recording</span><span class="p">,</span> <span class="ss">:params</span><span class="p">,</span> <span class="n">user</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">recording</span><span class="p">:,</span> <span class="n">params</span><span class="p">:,</span> <span class="ss">user: </span><span class="p">)</span>
      <span class="vi">@recording</span> <span class="o">=</span> <span class="n">recording</span>
      <span class="vi">@params</span> <span class="o">=</span> <span class="n">params</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">run</span>
      <span class="k">return</span> <span class="k">unless</span> <span class="n">eavesdropping?</span>

      <span class="no">Mention</span><span class="o">::</span><span class="no">EavesdroppingJob</span><span class="p">.</span><span class="nf">perform_later</span> <span class="n">recording</span><span class="p">,</span> <span class="ss">mentioner: </span><span class="n">user</span>
    <span class="k">end</span>

    <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">eavesdropping?</span>
      <span class="p">(</span><span class="n">active_or_archived_recordable_changed?</span> <span class="o">||</span> <span class="n">draft_became_active?</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
      <span class="o">!</span><span class="no">Mention</span><span class="o">::</span><span class="no">Eavesdropper</span><span class="p">.</span><span class="nf">suppressed?</span> <span class="o">&amp;&amp;</span>
      <span class="n">recording</span><span class="p">.</span><span class="nf">has_mentions?</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">active_or_archived_recordable_changed?</span>
      <span class="c1"># code here to check change using recordable + params</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">draft_became_active?</span>
      <span class="c1"># code here to check change using recordable + params</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>I don&#39;t have the big Basecamp app to play with, so i don&#39;t know for certain if this code will or won&#39;t work. What I do know is that it neatly encapsulates <em>potentially</em> performing the <code>Mention::EavesdroppingJob</code> later and avoids the issue where saving a <code>Recording</code> in <em>any</em> context might queue up a job as a side-effect.  My approach here decouples those two things, allowing them to happen independently.</p>

<p>Essentially, it accomplishes the same thing in (probably) as many lines, but disconnecting it from the saving of the model is the big win in my mind.</p>

<h3>Callback suppression</h3>

<p>Yay more global state appearing out of the blue (<code>Mention::Eavesdropper.suppressed?</code>). What could possibly go wrong? How can I track down easily where this might be toggled in the codepath that leads to this method? This looks like it would make debugging hard.</p>

<p>DHH himself says (at ~11mins) he thinks that there might be situations where you don&#39;t want callbacks to happen. Okay, great. So make it so that it can be an optional part of your code (as above), rather than this spooky-action-at-a-distance <code>Mention::Eavesdropper.suppressed?</code>.</p>

<p>Re-organising the code to <em>optionally</em> trigger this eavesdropping behaviour would lead to a lower cognitive overhead for working with this code.</p>

<h3><code>has_mentions?</code></h3>

<p>Special mention (ha) of <code>has_mentions?</code> at the bottom of this module which does seem to at least abstract the behaviour of checking if something has mentions.</p>

<h2>13:23 - <code>Mention::EavesdroppingJob</code></h2>

<p>It feels a lot like <code>Current.set</code> here is a cheap way of passing account through to <code>mention::Eavesdropper</code> and its associated things. I am not sure why this is wrapped this way, given that the account would be accessible in the <code>Eavesdropper</code> class -- assuming it&#39;s setup like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Mention</span>
  <span class="k">class</span> <span class="nc">Eavesdropper</span>
    <span class="kp">attr_reader</span> <span class="ss">:recording</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">recording</span><span class="p">)</span>
      <span class="vi">@recording</span> <span class="o">=</span> <span class="n">recording</span>
    <span class="k">end</span>

    <span class="p">.</span><span class="nf">.</span><span class="p">.</span>
  <span class="nf">end</span>
<span class="k">end</span>
</code></pre></div>
<p>But at least, this <code>Eavesdropper</code> class is abstracted away and isn&#39;t a concern. There feels to me like concerns are used as a bit of a &quot;golden hammer&quot; in this application.</p>

<h2>13:45 - run-through of all the parts</h2>

<p>DHH jumps straight from the controller to the <code>Recording::Mentions</code> concern here. (DRINK)</p>

<p>My initial thought here was: how is someone unfamiliar with this application supposed to know that the <code>Recording::Mentions</code> concern is where to look for this eavesdropping behaviour if they were to go about debugging it?</p>

<p>This is spooky-action-at-a-distance and it&#39;s the kind of code that I might&#39;ve written a few years ago and felt very smart <em>at the time</em>, but then months later when I&#39;ve gone back to visit it I&#39;ve asked myself: &quot;wtf was past-Ryan taking?&quot;</p>

<p>DHH says around the 14:10 mark that &quot;there&#39;s a fair amount of indirection here but it provides a very clear path of reading what&#39;s going on in the method&quot;. Out of anything else in this video, this is the #1 thing that I disagree with the <em>most</em>. The path is completely ambiguous to my &quot;untrained&quot; eye -- I am unfamiliar with this application.</p>

<p>It is &quot;clever code&quot; and that is dangerous because future-you will come back and look at the code in a few months time and wonder how it all fit together again.</p>

<h2>14:20 - <code>Mention::Eavesdropper</code></h2>

<p>And now we get to a class which actually has an idea of what the Single Responsibility Principle is.</p>

<p>(Interestingly, DHH can&#39;t navigate his own code at the ~14:30 mark)</p>

<p>I&#39;ve already talked about CurrentAttributes before, so what I&#39;ll do here is just sigh longingly, wishing wistfully for the death of global state in any and all applications.</p>

<p>&quot;Globals is not something that you should just litter over your application&quot; -- MY MAN! This is what you&#39;re doing here. &quot;Passing around this stuff isn&#39;t helpful&quot;. Ok, here&#39;s the #2 thing I disagree with. When passing things around, you gain an inkling for <em>where</em> the thing came from and if you followed the chain high enough you might find where it was originally defined. This <code>Current.person</code> mumbojumbo hides all of that for no real good reason.</p>

<p>Not sure I can state my thoughts clearer than this: <em>DEATH TO GLOBAL STATE.</em></p>

<h2>16:24 - <code>Mention::Scanner</code></h2>

<p>Ok so that <code>Mention::Scanner</code> approach looks pretty good. It&#39;s great that this code wasn&#39;t just thrown into <code>Eavesdropper</code> because it was <em>somewhat</em> related. It&#39;s a separate concern, and moving that logic into <code>Mention::Scanner</code> is a good approach.</p>

<h2>18:10 - <code>Mention</code> <code>after_commit</code> hook</h2>

<p>I still feel strongly that this could just be a method call in the controller after the <code>@bucket.record</code> is called.</p>

<h2>19:20 - <code>ProjectCopier</code> + suppression</h2>

<p>The suppression chain underneath <code>suppress_events_and_deliveries</code> wouldn&#39;t be necessary if this code previously opted-in explicitly to making these &quot;events&quot; and &quot;deliveries&quot;. It <em>still</em> feels like a poor work around for something that could be tidied up with half an hour&#39;s worth of effort.</p>

<p>And at the ~20:10 mark, DHH can&#39;t find where the suppressible behaviour is brought in. This thing where the code is hard-to-navigate  is a massive code smell. Again: if the &quot;callbacks&quot; were explicit rather than implicit, the suppression wouldn&#39;t be needed. The overall code footprint would be smaller, more explicit, and therefore easier to understand. The code does A, B, and C. No magic.</p>

<h2>20:39 - Wrap Up</h2>

<p>&quot;I hope it&#39;s clear&quot; -- it isn&#39;t. I&#39;ve been doing this Rails stuff for <em>10 years</em> now and if I saw this code in a codebase I would look into ways of making this more explicit to make it easier to work with.</p>

<p>As I&#39;ve said previously: this code feels like &quot;clever code&quot;. &quot;Look at me using all these cool Ruby features! I am so smart!&quot;. Well, yeah. You are smart.</p>

<p>But then in several months time of this thing chugging along working perfectly, you&#39;ll encounter a bug, look at the code and wonder how the hell it all fit together. There is far too much magic here.</p>

<p>But I guess that&#39;s The Rails Way&trade;.</p>

<hr>

<p>20:46: &quot;take all this logic and jam it into, what? The controller? A service object?&quot; -- No. A transaction object (see my example back at 5:55) that created the recording AND explicitly triggered the mention scanner + deliveries.</p>

<p>Another approach would be to use <a href="http://dry-rb.org/gems/dry-transaction/">dry-transaction</a>. This gem provides a very neat DSL for setting up such a thing. I&#39;d imagine it would go like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CreateRecording</span>

<span class="n">step</span> <span class="ss">:create</span>
<span class="n">step</span> <span class="ss">:scan_for_mentions</span>
<span class="n">step</span> <span class="ss">:deliver_notifications</span>

<span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="ss">bucket: </span><span class="n">bucket</span><span class="p">,</span> <span class="p">.</span><span class="nf">.</span><span class="o">.</span><span class="p">)</span>
  <span class="c1"># @bucket.record code goes here</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">scan_for_mentions</span>
  <span class="c1"># MentionScanner goes here</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">deliver_notifications</span>
  <span class="c1"># Delivery code goes here</span>
<span class="k">end</span>
</code></pre></div>
<p>It&#39;ll all be wrapped up neatly in the one class. <em>This</em> is where it should go. Not a controller. Not a service object. But a transaction object, that clearly delineates the steps involved in the transaction. There&#39;s no magic here. The steps are run in the order they are specified in. And it&#39;s possible to abort the transaction at each step.</p>

<p>This is my preferred approach. Callbacks and their implicitness have caused so much harm in previous codebases that I would never reach for them again. Transaction objects with explicit orders of operations are what I will be doing instead.</p>
]]></content>
 </entry>
 
 <entry>
   <title>My thoughts on Hanami</title>
   <link href="http://ryanbigg.com/2018/03/my-thoughts-on-hanami"/>
   <updated>2018-03-07T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2018/03/my-thoughts-on-hanami</id>
   <content type="html"><![CDATA[<p>(<a href='https://www.reddit.com/r/rails/comments/81z9oe/what_are_your_opinions_about_hanami_framework/dvale8q/?st=jegb17z5&sh=e9d18fa1'>This was originally posted as a comment on Reddit</a>)</p>

<p>This blog post has been <a href="https://techracho.bpsinc.jp/hachi8833/2018_03_28/54381">translated into Japanese</a>, thanks to <a href="https://twitter.com/hachi8833">@hachi8833</a>!</p>

<p>I&#39;ve been toying around with Hanami for a few weeks now and imo it <em>feels</em> better than Rails.  If you want to see some code rather than text, <a href="http://github.com/radar/hanami-example">here&#39;s my little example app I&#39;ve been building with Hanami</a>.</p>

<p>Here are the top three things that I like about Hanami, in long form:</p>

<h2>Repository pattern instead of Active Record</h2>

<p>Documentation link: <a href="http://hanamirb.org/guides/1.1/models/overview/">Hanami | Guides - Models Overview</a></p>

<p>The Active Record pattern encourages you to throw everything into the model. Think: callbacks, validations, persistence, database logic (queries) and business logic.</p>

<p>In contrast, the repository pattern (through ROM) leads to a cleaner separation between your database and your application. I <em>especially</em> like how validations are handled by <code>dry-validation</code>, a completely separate library to ROM. This <em>enforces</em> a separation between your models, persistence and validation layers, allowing you to pick and choose which ones you wish to use.</p>

<p>My <em>favourite</em> part about the repository pattern is that it&#39;s incredibly difficult to make database queries from a view. This helps prevent things like N+1 queries.</p>

<p>Also: ROM has no such thing as callbacks, and that&#39;s a huge plus in my eyes too. Callbacks are <em>way</em> too magical and -- using DHH&#39;s words -- too sharp a knife for developers to have. Explicitness in code leads to a much better understanding.</p>

<h2>Action classes</h2>

<p>Documentation link: <a href="http://hanamirb.org/guides/1.1/actions/overview/">Hanami | Guides - Actions Overview</a></p>

<p>Rather than throwing all your actions into the same controller, they&#39;re separated out into their own classes.  This helps keep each action isolated from one another, leading to overall a cleaner application architecture.</p>

<p>If you want to share things across actions, it&#39;s very easy to create a module for that functionality and to include it into those action classes. For instance, if you wanted a <code>find_post</code> method for <code>show</code>, <code>edit</code>, <code>update</code> and <code>destroy</code> actions, you can define this in a module and only include it in the actions you want.</p>

<p>A Rails controller is typically made messier by the addition of &quot;helper&quot; methods like this. It&#39;s not uncommon to have Rails controllers of multiple hundreds of lines, due to the complexity of the actions and these helper methods. Separating out each action into its own class indeed makes them easier to work with.</p>

<p>You&#39;re also able to test the action in complete isolation from the routing layer, as it is simply a class. I think this is what was attempted with Rails&#39; controller specs... but those never really felt &quot;right&quot; to me and I typically go to Request Specs these days instead. Hanami brings me back to testing the actions easily. I like that.</p>

<h3>Params validation for actions</h3>

<p>Documentation link: <a href="http://hanamirb.org/guides/1.1/actions/parameters/">Hanami | Guides - Action Parameters</a></p>

<p>Somewhat related to the previous point:</p>

<p>Actions in Hanami also use parameter validation (with the help of <code>dry-validation</code>, I think). This means that each action can uniquely validate the parameters. Rather than having <code>create_project_params</code> and <code>update_project_params</code> defined within a controller -- as you might do in Rails -- you can define what constitutes valid parameters right there in the action class.</p>

<p>In my Hanami experiments, I&#39;ve not found a use for this yet, but I can think of several places where I&#39;ve needed this sort of thing in a Rails app.</p>

<h2>View classes</h2>

<p>Documentation link: <a href="http://hanamirb.org/guides/1.1/views/overview/">Hanami | Guides - Views Overview</a></p>

<p>Similarly to Action classes, Hanami also has the concept of a view class.  I like these because they separate the logic of view &quot;helper&quot; methods and the templates very cleanly.</p>

<p>In a Rails application, you define a helper in a module named after the controller. I never liked this approach for two main reasons: 1) normally I would only ever use the helper in <em>one</em> particular view and 2) the helper is made <em>globally available</em> across <em>all</em> views in the application, which means I can&#39;t have a similarly named method in another helper module. A quite horrible design decision.</p>

<p>In Hanami, the view classes are a <em>great</em> place to put these little helper methods <em>and</em> because they&#39;re just small, isolated classes, you can test these without involving the router, controller or model.</p>

<h2>Conclusion</h2>

<p>As I said at the beginning: Hanami <em>feels</em> right. It&#39;s &quot;familiar&quot; enough -- still somewhat following the Model-View-Controller architecture we know-and-love Rails -- that it feels comfortable to use. There&#39;s a few places where your mind has to change into the &quot;Hanami Way&quot;, but ultimately once your mind does that you&#39;ll realise that the Hanami way <em>is</em> better.</p>

<p>Hanami has demonstrably learned the very hard lessons of big Rails application development and presents a robust, well-developed alternative web framework for Ruby.</p>

<p>In fact, it is so robust and well-developed that if I was to develop a Ruby web application from scratch for production use, I would use Hanami over Rails -- despite my 10 years Rails experience.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Hiring Juniors (RubyConf AU Talk)</title>
   <link href="http://ryanbigg.com/2018/03/hiring-juniors"/>
   <updated>2018-03-07T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2018/03/hiring-juniors</id>
   <content type="html"><![CDATA[<p><em>This is the transcript for a talk that I gave at RubyConf AU in March 2018.</em></p>

<p>The video is up! You can <a href="https://www.youtube.com/watch?v=aD6dci9rLXM">watch it here</a>.</p>

<p><a href="https://speakerdeck.com/radar/hiring-juniors-1">Slides are on Speakerdeck</a></p>

<p>I have seen the future.</p>

<p>Five years from now, someone will get on a stage like this one (or perhaps
midseven this one) and <em>blow your freaking minds</em>. This person will <em>astound</em> you
with a radical talk on a subject we, in the present, can only guess at. That
person is not going to be Sandi,  or any of the other speakers here. It&#39;s
not even going to be me -- as much as I (and my ego) would like that.</p>

<p>In fact, the person who will <em>blow your minds</em> knows a model today as someone
who would walk down a catwalk in some ostentatious outfit. They think that a
view is what you get from that lookout up in the mountains. They think that
&quot;Ruby on Rails&quot; is a cause for concern, as enough Rubies of significant sizes on
enough Rails might derail a train. And what a waste of good jewels!</p>

<p>Today, this person has just started on Chris Pine&#39;s Learn to Program. They have
invoked the <code>puts</code> method for the very first time.</p>

<p>Tomorrow, they will attempt the Ruby Koans. Next week, they will dabble a bit
in HTML and CSS. A few months from now, they might learn that Ruby On Rails
puts the HTML and the CSS and the Rubies together and it gives them those nice
shivers of excitement when it all Just Works™.</p>

<p>And five years from now they will <em>blow your freaking minds</em> with a talk of
astonishing brilliance, eloquently delivered with perfectly timed (and
tasteful) jokes.</p>

<p>And five years from now, we will know very clearly who this person is. This is
because they will be on stage, blowing our collective minds. And they will have
a name badge and the badge will tell us who they are. But hopefully, they will
tell us themselves.</p>

<p>But right now, we couldn&#39;t pick this person out from a crowd, or even a small
gathering for that matter. In our minds, this person simultaneously does and
does not exist. We can picture who they might be, but I guarantee you: the
picture doesn&#39;t match the eventual reality.</p>

<p>I&#39;m not one to give out spoilers freely, so I won&#39;t tell you who they are.
You&#39;ll just have to wait and see.</p>

<p>What I can tell you is that one of you will hire this person as a junior
developer and that will be their very first programming job. You will kick-
start the programming career of someone astonishingly brilliant and it&#39;s going
to be all because of what I&#39;m about to tell you, so pay close attention.</p>

<hr>

<p>If there was one thing that I want to stick in your minds it would be this:
hire juniors. Because those juniors you hire today will turn out to be the
people blowing our minds in 5 years time. Hire and train these juniors to be
mind-blowingly awesome.</p>

<h2>Hiring seniors</h2>

<p>&quot;But Ryan, we only hire senior Ruby developers!&quot; -- ahh the classic
ActiveMantra in the Rails community: &quot;Hiring senior Ruby developers. Hiring
senior Ruby developers. Hiring senior Ruby developers.&quot;. Maybe if we say it
enough and click our heels together our dreams might come true.</p>

<p>Yeah but how&#39;s that working out for you at the moment? Probably not so great.
It&#39;s well known that there are only three hard problems in computer science:
cache invalidation, naming things and hiring more senior Ruby developers.</p>

<p>We have drained the talent pool dry. And yet our obsession and our Active
Mantra continues. We only hire seniors. But why do we have this obsession?</p>

<p>Well, we want a senior developer -- but we might be happy to take a mid
too -- because they have the skills to instantly dive straight into our
application with little-to-no guidance and they can start shipping code. That
old expression: &quot;they can hit the ground running&quot;.</p>

<p>This is because our code is so brilliantly well-structured and organized
according to the Rails best practices. Nobody will have to upskill on any
single part of the codebase at all because we follow the Laws of Sandi and
Commandments of Avdi to the letter. There is no legacy code with their legacy
decisions that meta-programs the constants from Java, written in a hurry
because we needed to ship that thing <em>fast</em>. HA.</p>

<p>You may think that you need to hire only these best-of-the-best badasses
because your application is a large unmaintable collection of microservices
written in obscure languages surrounding a ginormous monolith and only the
badasses can understand it. That you need seniors to navigate the spaghetti
that is your legacy code. Maybe you use technologies that only <em>true</em> geniuses
can understand, like Node or Go. Or the Rails Asset Pipeline.</p>

<p>That may indeed be the case. After all, if our code was simple, elegant and only
written in a single Ruby monolith, would as many of us still be employed?</p>

<p>Companies spend thousands of dollars hunting the elusive 10x Developer
Rockstar Unicorns (note: term used ironically), but the Unicorns are no longer
out grazing in the sunny meadows, readily available for capture.  They&#39;re
already working somewhere else and the conditions of where they work are
extremely competitive. To keep with the analogy: the meadows are filled with
the greenest of grasses and the brightest of rainbows. You will have a hard
time luring these unicorns away.</p>

<p>We&#39;re out of freely available Rockstar Unicorns because they&#39;re already employed
elsewhere. Attempting to hire them is an exercise in futility. And so it&#39;s time
that we started to grow our own. It&#39;s time that we started to hire and train our
own 10x Developer Rockstar Unicorns.</p>

<hr>

<p>But where do we find these developers? Well, to start with need to lower our
bar for engineering talent and not be so caught up on hiring the
best-of-the-best <em>now</em>, but instead we should be investing more in people&#39;s
future potential.</p>

<p>Your next Rockstar Unicorn isn&#39;t within today&#39;s current top 5-10% of all
developers. The top 5-10% already works elsewhere. Your Next Rockstar Unicorn
is hanging out with the rest of their peers in the other part of this totally
scientific graph that I made up. These people need some mentoring in order to
grow into the next generation of brilliant people.</p>

<p>There isn&#39;t an endless supply of brilliant people -- sorry, I mean Developer
Rockstar Unicorns -- that we can just keep harvesting today. This talent pool
of amazingly talented and gifted developers, as we&#39;re painfully finding out,
is not limitless.</p>

<p>We must lower the bar for our hiring, and hire outside of the top 5-10%. We
must hire juniors. We must then train these juniors up to be our next
generation of brilliant minds.</p>

<p>It is very, very difficult to hire a senior developer today in Rubyland. And so
we must grow our own senior developers. This is a process that will take time.
There&#39;s no packet mix where you &quot;just add water&quot; and blammo you&#39;ve got a senior
developer. I&#39;m talking about <em>years</em> of hard work. But these are <em>vital</em> years
of hard work to ensure that our companies and this community continues to thrive
and grow. This is necessary work  to ensure that we have well-trained developers
working at our companies. We will know they&#39;re well-trained because we did the
training ourselves.</p>

<h2>Juniors make teams better</h2>

<p>We should not lower our hiring bar and hire juniors just because we can&#39;t find
seniors though. I have a much better reason for why you should hire a junior
developer and that reason is because they unequivocally make your teams better.</p>

<p>Juniors making teams better is a big claim, but I have some evidence to back it
up.</p>

<p>We know from a lot of experience that gender-diverse teams perform better than
either a team of all-men or a team of all-women. The same is true for teams that
are skill-diverse as well; teams that have a mix of people with differing
skill-levels and experiences out-perform their all-senior counterparts. The most
productive teams that I&#39;ve worked on have been teams that have had a mix of
skill-levels and experiences.</p>

<p>Juniors make your teams better because that means things will need to be
explained in simpler terms than they were before. This makes things easier to
understand for all members of the team. Concepts are no longer talked about in a
jargon-y or high-level way all the time; instead: people understand things in an
easier way.</p>

<p>Juniors make your teams better because teams that have a junior tend to document
things more. Or at all.</p>

<p>For instance, a team I was a part of recently documented the flow of an event
out of our main monolithic Rails application and into some microservices. This
documentation was done for the junior developer&#39;s benefit and it consisted of a
flowchart made up in Omnigraffle. The best part about this piece of
documentation was that we had something we could <em>physically</em> point to when
talking about things we would only normally keep in our head.</p>

<p>The funniest thing about that piece of documentation was that the <em>senior</em>
developers ended up referring to it more than the junior! We stuck it on a wall
and then talked about the structure of the system while pointing at the
different pieces in the diagram. It really helped cement the structure into our
heads and helped us know where to make improvements in the system.</p>

<p>If it wasn&#39;t for our junior developer, we wouldn&#39;t have drawn up this diagram in
the first place. We would still be talking about this system at a high-level,
with only code to point to. The diagram really helped our team become more
productive.</p>

<p>This links into my next point:</p>

<p>Communication, especially when it comes to knowledge-sharing, becomes <em>explicit</em>
out of necessity, rather than the <em>implicit</em> style of communication usually
found in all-senior developer teams. When that team I was on was only senior
developers, we communicated implicitly about the structure of the two
applications. We all just assumed everyone knew what we were talking about. As
soon as we got a junior, that communication changed to favouring explicitness
over implicitness.</p>

<p>Also on the topic of communication: more questions get asked by the junior
than the seniors on the team, usually because the junior wants to learn. It&#39;s
not the questions themselves that are the most helpful, but the answers. The
answers to these questions not only help cement the junior&#39;s knowledge, but
they give the senior developer practice in understanding and explaining
concepts that they might not have explained otherwise. I&#39;ve also learned <em>a
lot</em> from over-hearing someone else answering a question.</p>

<p>Sometimes a question from a junior can even spark a thought about how to
structure something better in the code, or how to document a part of the system
in further detail so that everyone on the team can better understand it. Those
&quot;why is this done this way?&quot; questions from juniors are my absolute favourite
because they often lead to system improvements.</p>

<p>One more thing: all of the juniors I have ever worked with have mentored senior
developers on the most important developer skill of all: patience. This is the
thing that juniors provide to your team that no senior can do. The seniors must
explain things to a junior, and that takes time. They might even have to explain
things more than once.</p>

<p>Patiently explaining something to someone, as I&#39;ve said before, helps seniors
understand their own systems better and, in my experience, makes the seniors
much better developers than if they only had to explain things to other seniors.
They need to slow down and methodically explain things, which helps solidify the
senior&#39;s knowledge.</p>

<p>Patience is a virtue that more developers should learn. The ironic thing about
me saying this is that I&#39;m a naturally impatient person (just ask anyone who&#39;s
known me for more than 5 minutes)... who&#39;s getting more patient because of the
mentoring I&#39;m doing. Huh, maybe it works.</p>

<p>This is why we should hire junior developers: it makes our teams better. Things
are better understood. Documentation exists more on teams with juniors.  Clearer
communication channels open up out of necessity. Patience is taught. The team is
better for it.</p>

<p>Better teams ship better software and better software means happier users.</p>

<h2>Hiring Juniors at Culture Amp</h2>

<p>I know that juniors make teams better because we&#39;re making it happen at Culture
Amp. I live and breath this stuff as Culture Amp&#39;s Junior Engineering Program
Lead. My entire job is to train juniors up so that they can be productive
members of their teams.</p>

<p>Last year, Culture Amp hired seven new junior developers. We now have ten junior
developers across the company. This is a ratio of about one-in-five developers
at Culture Amp being a junior developer.</p>

<p>Here are the ten juniors that we currently have at Culture Amp. Each of these
juniors comes from a diverse background: They&#39;re not all 20-35, white, and male
and yet our company is still in business. Amazing, I know.</p>

<p>These juniors are a lot more fresh-faced than I was when I was a junior
developer. Here&#39;s a photo of junior-me. Definitely not fresh-faced.</p>

<p>At the end of November last year, we started up a structured training program
for these juniors called the Culture Amp Junior Engineering Program. This
program is designed to provide an accelerated learning environment for the
juniors that we have at Culture Amp.</p>

<p>During the program, we provide structured training to these 10 juniors over
the course of 6 months. When the 6 months are up at the end of May, they&#39;ll be
fully-fledged developers, capable of shipping things mostly on their own. At
that point, they&#39;ll then be working on their teams full-time. The progress
that these juniors have made so far has been nothing short of amazing. They&#39;re
well on their way to being confident and capable developers.</p>

<p>I&#39;d like to highlight the fact that we&#39;ve hired people who aren&#39;t all white,
male, 20-35, utterly amazing, top 5-10% senior Rails developers and yet...
everything is still OK. In fact, it&#39;s better than OK: it&#39;s awesome.</p>

<p>We&#39;ve hired a mixed bunch of people with different skill levels and we train
them up and get them to work together on our applications. There&#39;s not a
single fire or brimstone as far as the eye can see.</p>

<p>We&#39;re growing the next batch of brilliant engineers today. And I can definitely
say that all of Culture Amp&#39;s teams have been made better by the addition of the
juniors.</p>

<h3>The Talent Code</h3>

<p>If all of my points so far weren&#39;t convincing enough, then I would encourage you
to read a book called &quot;The Talent Code&quot;. As the subtitle says &quot;Greatness isn&#39;t
born. It&#39;s grown.&quot; It&#39;s about 300 pages long.</p>

<p>The book covers how skills of all varieties are grown in sports, music and
plenty of other industries.</p>

<p>All of the industries that are covered in the book have active mentorship and
apprenticeship programs. Yet, this is not deeply cared about in the programming
community, and I think that&#39;s because we&#39;re still quite a young community. We
aren&#39;t mature enough to think long- and-hard about mentorship and the
sustainability of talent in this community within our companies. We haven&#39;t had
to think about potential &quot;succession plans&quot; for our codebases: Who will
maintain our code after we are gone? Our industry is not quite yet old enough to
have needed this.</p>

<p>More established industries that have been around longer have learned this
lesson. They realise that the people who are doing the work <em>today</em> are not
going to be doing the work forever. And so they have these active mentorship
and apprenticeship programs to ensure a fresh supply of talent to their
industries. I think we&#39;re on the cusp of realising this today.</p>

<p>Put another way: If Rails was a person, that person would not even be old enough
to have graduated high-school, let alone make adult decisions. This is reflected
in the design choices of the framework, but that&#39;s a conversation for another
day.</p>

<p>Back to my point: I think it might take us a touch longer to realise that
training for the future is the right thing to do. It ensures that we have a
stable talent pool that we can hire from, and overall leads to better
performance for teams.</p>

<p>Back to the book: I&#39;ll let you in on the secret that&#39;s in the Talent Code: for
anyone to get better at anything, they need to have three core components:</p>

<ol>
<li>They must practice the hell out of it</li>
<li>They must have a passion (or a drive) for whatever they&#39;re learning</li>
<li>They must have a good mentor who is encouraging and can
provide sound advice.</li>
</ol>

<p>You should definitely read this book. It really helped me understand why
it&#39;s important to mentor newbies in any community, and taught me a bit about
<em>how</em> people learn. It&#39;s definitely worthwhile to read.</p>

<p>One thing that it really highlighted for me was that the best of the best, the
Beyonces, the Kanyes, and the Ricks, didn&#39;t just one day appear out of thin air.
These people practiced the hell out of their craft, they have a passion for what
they do and they had great mentors who helped guide them. These people were
trained over <em>years</em> and that&#39;s how they got where they are today. We should do
the same for our industry to build our talent pool.</p>

<p>How do we expect to have more of our own great talent to hire if we&#39;re not
hiring juniors and letting them improve their skills by practicing on real
world applications? Remember: these people need to practice the hell out of
programming, have a passion for it and they need to have a good mentor.</p>

<p>These people do not simply pop into existence. This isn&#39;t the Matrix: we can&#39;t
just plug in, and a few seconds later we just <em>know</em> Rails like Keanu and Kung
fu. These juniors cannot just sleep on a copy of Rails 4 in Action and wake up
<em>knowing</em> Rails. These juniors have to be taught.</p>

<p>We have to grow talent if we want talent. The Talent Code helped me understand
this point very clearly.</p>

<h2>You should hire a junior</h2>

<p>I think your companies should try to hire juniors and to mentor them. I know
I&#39;ve said that a few times already, but I really want to drive that point home.</p>

<p>I&#39;m not suggesting that you should hire a batch of them all at once like Culture
Amp did. I think you should just start at hiring a single junior. Interview a
couple and pick one from that batch. If your company is at least 4 developers
and at least one of them wants to mentor, you can hire and support a junior. I
believe in you. You can do it!</p>

<p>Rather than running a structured mentorship program like Culture Amp does, you
can start by hiring a single junior and pairing with them to grow their skills
and your team. This will lay the groundwork for hiring more juniors later on.</p>

<p>Your next question might be: &quot;what do <em>we</em> (as a company) get out of hiring a
junior?&quot; Were you not paying attention at the beginning of this talk? They make
your teams better! That&#39;s what you get out of it: better <em>and bigger</em> teams. We as
a community also get some new members, and that&#39;s a big positive in my eyes too.</p>

<hr>

<h2>Finding Juniors</h2>

<p>Now that I&#39;ve hopefully convinced you to hire a junior, you might be thinking:
where do you find these juniors? What do I do with them once I have them?
Well, I have some tips!</p>

<p>Regarding finding the juniors: let&#39;s start with two places where you can find
a lot of them: Code Academies and universities.</p>

<p>Code academies and universities produce great talent, but that talent often
has a hard time finding a job afterwards because, as I mentioned earlier, the
bar for hiring at a lot of companies is too high. It feels to me like there&#39;s
a big chasm between someone graduating and getting a job at a Ruby development
shop. I hear this from a lot of junior developers that I talk to as well.</p>

<p>In fact, I even drew you a picture using my amazing powers of illustration.
The junior, shown here on the left in amazing detail, tries to make the jump
from graduating these schools to being placed in what they call &quot;a real job&quot;.
When they take this leap, they fall short, smashing into the Wall of Rejection
and leave a bloody smear as they fall down into the Pit of Depression. When we
hire and train up juniors we will begin work to close this chasm. We make it
easier for juniors to make this transition into our community.</p>

<p>Remember: senior devs don&#39;t grow on trees. We must give juniors a chance.  If
you want to hire a junior, first lower your hiring bar and then take a look at
the people coming out of code academies and universities.</p>

<p>We&#39;ve hired 3 people at Culture Amp from places like this: Jaime, Rebecca and
Jasmine. Jaime comes from Coder Academy in Melbourne, and Rebecca and Jasmine
both went to the same university, RMIT in Melbourne. All three of these junior
developers have a great talent for learning and self-development and we&#39;re glad
to have them working for us.</p>

<p>But then there are definitely juniors who have that same kind of
eagerness-to-learn and motivation who have never been to a code academy or a
university.</p>

<p>Out of the Culture Amp juniors I mentioned before, three fit this bill: Rayma,
Namibia and Julie.  While they haven&#39;t gone through intensive coding schools
or universities, they still bring to Culture Amp a great set of skills that
they&#39;ve built up themselves. Their ability to learn on their own far exceeds
those who have been classically taught, because they haven&#39;t had that support
net. Their tenacity for problem-solving and battling through things they don&#39;t
know is inspiring.</p>

<p>The people who come from coding academies, universities and who are self-
taught are the future brilliant developers of this community and we all must
hire and start training them <em>today</em>.</p>

<h3>Interviewing Juniors</h3>

<p>OK, now that you&#39;ve found a junior you&#39;re probably going to want to interview
them to get an idea about who they are.</p>

<p>When interviewing a junior, it&#39;s important to remember that it&#39;s probably going
to be one of their <em>first ever</em> programming job interviews. Treat them gentle.
Do not try to trap them with programming riddles, or vague trivia. Your
interview process should be more like a relaxed chat than an interrogation. You
want them to feel comfortable and welcome, not like you&#39;re their enemy.</p>

<p>And then after the interview, I want you to do something different: give them
some feedback on how it went. Even if you&#39;re going to reject them.</p>

<p>There are three simple rules for this feedback. It must be all of:</p>

<ul>
<li>Actionable</li>
<li>Specific</li>
<li>Kind</li>
</ul>

<p>If the feedback is Actionable and Specific but not Kind, then it might seem like a
criticism. If it is Actionable and Kind but not Specific, then the junior might
not know what they could do to do better next time. And so on.</p>

<p>We did this with Culture Amp&#39;s Junior Engineering Program, giving <em>on average</em>
7 pages of written feedback per candidate, for a total somewhere in the range
of 400 pages. We&#39;re a feedback company, and so we have a reputation to uphold.
But this wasn&#39;t the only reason why we compiled this feedback. The more
important reason is that we dind&#39;t want people to apply, only to slam into
that Wall of Rejection and fall into the Pit of Depression.</p>

<p>We used the &quot;Actionable, Specific and Kind&quot; rules because we felt that
feedback that is Actionable, Specific and Kind would motivate juniors towards
self-improvement, even if they didn&#39;t &quot;pass&quot; our interview phase. A flat &quot;no&quot;
would be incredibly de-motivating to receive as a junior. We didn&#39;t want that.
We wanted to encourage them even if we rejected them.</p>

<p>When interviewing juniors, you should give them some feedback too. It doesn&#39;t
have to be seven pages worth of feedback per candidate. Even just a single page
of feedback can be incredibly valuable for a junior.</p>

<p>Juniors <em>thrive</em> given this sort of feedback. It&#39;s vital for their future
growth. Putting in a little bit of extra effort for juniors will help them grow.
Proivde them some Actionable, Specific and Kind feedback after you interview
them.</p>

<h2>Mentorship</h2>

<p>OK, so we&#39;ve talked about where to potentially find juniors and a little tip
about interviewing them, but what do you do once you have interviewed and hired
them?</p>

<p>Well, for starters: they&#39;re going to need <em>a lot</em> of love and attention. You can&#39;t
just put them in the corner and expect them to thrive. Think more of them like a
puppy than a cactus: the puppy needs love and attention and some training, but
the cactus needs only sunshine and some water.  The cactus is indifferent to
your love, your attention or the intensity of the training you provide. Cacti
are going to Cacti.</p>

<p>Junior developers don&#39;t grow into senior developers with just sunshine and
water. And they don&#39;t do it just by practicing development by themselves,
either. They need mentorship and thrive on direction!</p>

<p>As I said before when talking about the Talent Code: Juniors need to practice
the hell out of developing things and need good mentorship to really thrive. We
must provide them these opportunities to practice, and we must provide them with
mentoring.</p>

<h3>It&#39;s OK to ask questions</h3>

<p>There&#39;s an event called the Melbourne Ruby Hack Night. This event is a
judgement-free environment where anyone and everyone can bring along a Ruby
project and work on it. Some people are even there for the first time learning
about Ruby itself, which is so great to see. These Hack Nights work because
these new developers feel safe and welcome and that no question is too &quot;dumb&quot;
to ask.</p>

<p>Just like at the Hack Night, it should be OK for anyone to ask a question
about <em>anything</em> when they work with you at your company. In fact, print this
slide up on some A1 paper and stick it to your wall.</p>

<p>Very clearly outlining to juniors that it&#39;s OK to ask <em>any</em> question about
<em>anything</em> is a great place to start. And repeat that as much as possible,
too.</p>

<h3>Pairing</h3>

<p>A great way to build that kind of hack-night-esque fostering environment is to
encourage pair programming. Pairing with juniors on small tasks initially is a
great way to build up their confidence. When I&#39;ve been mentoring juniors, the
number one thing that I find that they&#39;re lacking isn&#39;t necessarily the skill,
but the confidence. They know the answer, but they aren&#39;t sure if it&#39;s the
<em>right</em> answer. They question if they&#39;re using the right syntax or even if they
should be writing the code that particular way. When a senior pairs with a
junior, they can encourage them to try out things and learn from the things that
they try. If the junior gets it wrong, the senior can ensure them that it&#39;s OK
to get things wrong and to guide them back on track. Pairing is the quickest way
to upskill a junior and I can highly, highly recommend it.</p>

<p>Remember: puppy, not cactus. If we want talent, we have to train talent.</p>

<p>Pairing also helps reinforce your own knowledge. If you can&#39;t explain
something to someone clearly, then you do not understand it well enough
yourself. Pairing is helpful to the junior because they get knowledge out of
it, but it&#39;s also helpful to the senior: they learn how to share what&#39;s in
their brain with other people in a clearer fashion. As I said before, it also
teaches the most valuable skill of all: patience. I have benefited more than
I can count by pairing as the more &quot;senior&quot; of the pair. Not just because I get
to practice patience, but also because I have learned many new things myself
when pairing.</p>

<h3>What do you pair on with juniors?</h3>

<p>Suggesting pairing is all well and good in theory, but in reality: what should
you pair with your junior on? Well, Lydia Guarino has some good tweets about
that.</p>

<p>1) For junior devs, a good guideline for scope is something that can be
completed in 2-3 days. You want to keep your feedback loop short.</p>

<p>2) Tasks with scope of more than 3 days are tasks that are not defined well
enough. Break them down further.</p>

<p>I agree with both of these. Juniors thrive best when they&#39;re given quick wins.
You want that nice tight feedback loop to keep their confidence growing. Every
time they &quot;win&quot; at code, their confidence gets that little bit more boosted.
At Culture Amp, we started our juniors out on fixing bugs or working on little
features and then moved them up to trickier bugs and harder features from
there. Most bugs didn&#39;t take more than a day for the juniors to fix. Now we
give them harder bugs and harder features. We kept the feedback loop short
early on to build up their confidence with our codebase.</p>

<p>Once they&#39;ve built up a bit of confidence, you can let them go solo on a task.
There isn&#39;t a set timeframe for when this happens; it&#39;s all about how
confident the junior is with their own abilities. Let them loose on something
small and make it clear that they can ask any questions about what they&#39;re
doing and that there is no wrong way of doing it. They won&#39;t ship fast to
begin with. The fast comes with practice. Let them practice.</p>

<p>Once they&#39;re done, get them to submit their work in a pull request and then --
this part&#39;s important -- sit together and review it.</p>

<p>Sitting together is important here because &quot;why are you doing this?&quot; written
in text has no emotion, compared to it spoken with body language. Juniors may
interpret a &quot;why are you doing this?&quot; comment as aggressive like &quot;UGH! Why are
you doing this?&quot;.</p>

<p>Focussing on in-person communication helps establish a rapport between the
developers much better than text-based communication ever will.</p>

<p>If a junior has made a mistake in the pull request then you can discuss it
with them and talk about possible ways to correct the mistake. Pull request
reviews are great for this reason.</p>

<p>Code review also allows the senior to assess how well the junior has been
doing on the tasks they&#39;ve been given. If they&#39;re doing well on a 2-day task,
then it&#39;s probably going to be OK to give them a 4-day task too. If not, then
some more mentoring may be required. And that&#39;s perfectly OK. Give them that
mentorship and direction, and try again.</p>

<h3>Feeling welcome</h3>

<p>Ultimately, your mentorship should be about making the junior feel welcome and
safe within your team. You&#39;ve probably sensed this as a theme to my points
already, but I want to take the last few minutes of this talk to really drive
this point home: In fact, this should be what&#39;s happening with <em>everyone</em> in
your team.</p>

<p>Don&#39;t just take my word for it. Google ran a study called &quot;Project Aristotle&quot;
wherein <a href="https://rework.withgoogle.com/blog/five-keys-to-a-successful-google-%0Ateam/">they attempted to find how to build effective
teams</a>. They interviewed hundreds of their own employees and they came up with 5
things:</p>

<div class='center'>
  <img src='https://lh3.googleusercontent.com/eQ_WsRq5-q-m_41eEI6GLEObqpxBYJd1pm96gIa-eRSn-QXlPjwO5K6O-DHU8sxny3ChnIQE0mjpnXaaW7QAhQ=s0'>
</div>

<p>The #1 item on this list isn&#39;t &quot;Feeling welcome&quot;, but &quot;Psychological safety&quot;.
The text underneath says: &quot;Team members feel safe to take risks and be
vulnerable in front of each other.&quot;</p>

<p>You probably recognise that some of these things sound a lot like the
&quot;Love/belonging&quot;, &quot;Esteem&quot; and &quot;Self-actualisation&quot; parts of <a href="https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs">Maslow&#39;s
hierarchy of
needs</a>. This
indicates that Professor Maslow was probably onto something.</p>

<p>Juniors should ultimately feel safe to take risks and to be vulnerable in our
teams. Juniors will make mistakes. We&#39;ve all made mistakes. Ask me about that
time I dropped the production database for a multi-thousand user client of a
consultancy... and we had no backups. Hopefully you have processes to prevent
this sort of thing happening with your juniors when you hire them.</p>

<p>The remainder of this list is not to be discounted. Dependability, Structure &amp;
Clarity, Meaning and Impact are all vital to junior developers progressions. A
junior must be able to depend on the people around them for support. They must
have clarity on what their direction is. They must feel like they&#39;re
contributing back to a greater whole to keep them motivated; it&#39;s that drive
that I talked about earlier.</p>

<p>When you hire a junior developer, keep these things in mind and ask yourself
regularly if you&#39;re following along with them. These things should underpin
everything you do with the junior.</p>

<p>With a concerted effort to make the junior feel pyschologically safe, and some
semi-structured mentoring in place, they can grow into the future&#39;s most
brilliant developers.</p>

<hr>

<p>We must start hiring and mentoring junior developers. If not today (because
you&#39;re at a conference) then do it next week. Grow your company and this
community and make your teams better. Hiring juniors is the way to grow our
teams and this wonderful community.</p>

<p>I hope that with a concerted effort to hire juniors, our Active Mantra can
change into &quot;Hiring and mentoring junior developers&quot;. That would be wonderful.</p>
]]></content>
 </entry>
 
 <entry>
   <title>How require loads a gem</title>
   <link href="http://ryanbigg.com/2017/11/how-require-loads-a-gem"/>
   <updated>2017-11-03T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2017/11/how-require-loads-a-gem</id>
   <content type="html"><![CDATA[<p>In modern versions of Ruby, you can use the good old <code>require</code> method to load a gem.
For instance, if you&#39;ve got the gem <code>activesupport</code> installed, you can require
everything inside of activesupport (including the kitchen sink) with this line:</p>
<div class="highlight"><pre><code class="language-" data-lang="">require 'active_support/all'
</code></pre></div>
<p>You might&#39;ve just tried to open up <code>irb</code> and run that line, and it might&#39;ve
worked for you... assuming you have activesupport actually installed. It works
on my machine, at least.</p>

<p>But how does <code>require</code> know where to find gems&#39; files in Ruby? Wouldn&#39;t those
files need to be on the load path? Well, thanks to a cheeky hack in RubyGems
code, no, those files don&#39;t need to be on the load path. Instead, these gems&#39;
<code>lib</code> directories are added to the load path as they&#39;re needed. I&#39;ll show you
how.</p>

<h2>A default load path</h2>

<p>When you initialize <code>irb</code> it already has some directories added to its load
path, which you can see with this code:</p>
<div class="highlight"><pre><code class="language-" data-lang="">p $LOAD_PATH
</code></pre></div>
<p>My list looks like this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">[
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/gems/2.4.0/gems/did_you_mean-1.1.0/lib",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/site_ruby/2.4.0",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/site_ruby/2.4.0/x86_64-darwin16",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/site_ruby",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/vendor_ruby/2.4.0",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/vendor_ruby/2.4.0/x86_64-darwin16",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/vendor_ruby",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/2.4.0",
  "/Users/ryanbigg/.rubies/ruby-2.4.1/lib/ruby/2.4.0/x86_64-darwin16"
]
</code></pre></div>
<p>These paths make it possible for me to do things like <code>require &#39;net/http&#39;</code>
(haha just kidding I use <code>rest-client</code>) and <code>require &#39;csv&#39;</code>. At least one of
those directories contains files called <code>net/http.rb</code> and <code>csv.rb</code> which makes
this possible.</p>

<p>But none of these directories include a file called <code>active_support/all</code>, so
how does <code>require &#39;active_support/all</code> still work?!</p>

<h2>The cheeky hack</h2>

<p>The &quot;cheeky hack&quot; in the bundled RubyGems code <a href="https://github.com/ruby/ruby/blob/f7fb0867897ced531a33a014fb92998b0ed97ac0/lib/rubygems/core_ext/kernel_require.rb#L25-L138">is shown here in all its
glory</a>.
The comment at the top of this file gives away what happens: </p>

<blockquote> 
  <p>
    When you call <code>require 'x'</code>, this is what happens:
  </p>

  <ul>
  <li>If the file can be loaded from the existing Ruby loadpath, it
  is.</li>
  <li>Otherwise, installed gems are searched for a file that matches. If it's found in gem 'y', that gem is activated (added to the loadpath).</li>
  </ul>
</blockquote>

<p>I won&#39;t walk through the whole thing -- consider it homework! -- but the short
version is that RubyGems <a href="https://github.com/ruby/ruby/blob/f7fb0867897ced531a33a014fb92998b0ed97ac0/lib/rubygems/core_ext/kernel_require.rb#L57-L60">checks to see if there are any unresolved dependencies</a> and if there&#39;s not, then it will try a regular <code>require</code>. This results in  a <code>LoadError</code> being raised, which is <a href="https://github.com/ruby/ruby/blob/f7fb0867897ced531a33a014fb92998b0ed97ac0/lib/rubygems/core_ext/kernel_require.rb#L123-L138">then rescued</a> a little further down.</p>

<p>This error message is checked to see if it ends with the path that we passed
in, and if it does then it calls <code>Gem.try_activate(path)</code>. This method will
activate any gem that matches the specified path. Inside of the <code>activesupport</code>
gem, it <a href="https://github.com/rails/rails/blob/c3db9297c8886c404eddef806f40a6cb31c898c3/activesupport/lib/active_support/all.rb">has a file called
&#39;active_support/all&#39;</a>, and so the activesupport gem will be activated here. </p>

<p>Activating a gem adds that gem&#39;s <code>lib</code> directory to the load path, which will
then make requiring any of that gem&#39;s files possible.</p>

<p>Once the gem is activated, this <code>require</code> method <a href="https://github.com/ruby/ruby/blob/f7fb0867897ced531a33a014fb92998b0ed97ac0/lib/rubygems/core_ext/kernel_require.rb#L135">tries to require the path
once
more</a>. Due to the gem being activated, it is now possible to <code>require &#39;active_support/all&#39;</code>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Rails, Dropzone.js, Amazon S3 and imgix</title>
   <link href="http://ryanbigg.com/2017/08/rails-dropzone-js-amazon-s3-and-imgix"/>
   <updated>2017-08-28T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2017/08/rails-dropzone-js-amazon-s3-and-imgix</id>
   <content type="html"><![CDATA[<p>In this tutorial I&#39;ll cover how you can upload files directly to S3 by using a feature called <code>PresignedPost</code>. I&#39;ll then show how you can use <a href="https://imgix.com">imgix</a> to resize these images dynamically after they&#39;ve been uploaded.</p>

<p>The Rails app that I use for this tutorial is <a href="https://github.com/radar/dropzone-example">dropzone-example</a>, with the <a href="https://github.com/radar/dropzone-example/tree/finished">finished branch</a> being the final version of the code from this tutorial.</p>

<h3>Background</h3>

<p>I&#39;ve got a small hobby Rails app that I use to share photos with my extended family. This app had humble beginnings: it was a very light Rails application with one model that used <a href="https://rubygems.org/gems/paperclip">Paperclip</a> to handle the attachments. Paperclip works very well, and I especially love that I don&#39;t have to care about <em>how</em> my photos get resized; Paperclip just does it -- as long as you have the right things installed.</p>

<p>I got the attachments through to Paperclip by using the wonderful <a href="http://www.dropzonejs.com/">Dropzone.js</a>. A simple file input would also work, but I wanted to be able to upload multiple files from all kinds of devices. Dropzone lets me do that.</p>

<p>But then I wanted to add video support to this application. It&#39;s at this point that I should mention three things: 1) this application is hosted on Heroku 2) Heroku&#39;s request timeout is set to a hard 30 seconds 3) Australian internet is prohibitively slow and iPhone videos are so big that any video longer than 25 seconds does not upload within that 30 second window.</p>

<p>So I had to come up with an inventive solution. Googling for other people&#39;s attempts to solve or workaround this problem suggest that the best solution was to upload to s3 directly; but then I would lose the automatic resizing for images that comes with Paperclip. Fortunately, I knew about <a href="https:/imgix.com">imgix</a>.</p>

<p>A lot of the other writings on the internet don&#39;t really cover it from start-to-finish, and so I pieced all this together from many, many blog posts and documentation pages.</p>

<p>Contrary to my tweet earlier:</p>

<blockquote class="twitter-tweet" data-lang="en-gb"><p lang="en" dir="ltr">Hooked up dropzone + s3 direct file uploads and now I&#39;m going to keep all that knowledge to myself mwhahahaha</p>&mdash; A Ryan (@ryanbigg) <a href="https://twitter.com/ryanbigg/status/901668466599510017">27 August 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>I&#39;m not going to keep all this knowledge to myself, but instead I&#39;ll share with you how I did it here.</p>

<h3>Dropzone setup</h3>

<p>I&#39;m going to assume that people reading this already have at least a Rails application setup and they want to add this functionality to it. I&#39;ve got a <a href="https://github.com/radar/dropzone-example">small example app</a> with dropzone added, if you want to take a look.</p>

<p>I&#39;m going to go old-school on this: no Webpacker, no React. If you want those things I am sure you can figure it out.</p>

<p>To start with, you can download the Dropzone files from the Download link in the <a href="https://gitlab.com/meno/dropzone/blob/master/README.md">project&#39;s README</a>. This will download the latest release. Extract this zip, and then move <code>dropzone.css</code> into <code>vendor/assets/stylesheets/dropzone.css</code>, and <code>dropzone.js</code> into <code>vendor/assets/javascripts/dropzone.js</code>. These two files will need to be required in both <code>application.scss</code> and <code>application.js</code>:</p>

<p><strong>application.scss</strong></p>
<div class="highlight"><pre><code class="language-" data-lang="">*= require dropzone
</code></pre></div>
<p><strong>application.js</strong></p>
<div class="highlight"><pre><code class="language-" data-lang="">//= require dropzone
</code></pre></div>
<p>Then wherever you want the dropzone to appear, put this code:</p>

<p><strong>app/views/uploads/new.html.erb</strong></p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="cp">&lt;%=</span> <span class="n">form_tag</span> <span class="n">uploads_path</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"dropzone"</span><span class="p">,</span> <span class="ss">id: </span><span class="s2">"uploader"</span> <span class="k">do</span> <span class="cp">%&gt;</span>

<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div>
<p>The <code>dropzone</code> class is the special bit here: Dropzone will automatically apply itself to any element with this class. If you&#39;ve done this correctly, you&#39;ll see this:</p>

<p><img src="/images/dropzone/drop-files-to-upload.png" alt="Test"></p>

<p>The styling isn&#39;t exactly pretty, but that&#39;s something you can fix up later. (<a href="https://gist.github.com/radar/4e2957edf84efb40e222b43439e772a1">Here&#39;s the CSS</a> that I use for my own; I think I cribbed it from the Dropzone site.)</p>

<p>What this will do is submit files to the <code>uploads_path</code>, as if there was a file input and we had selected a file and hit &quot;submit&quot;. If we had a controller action to receive these files, it might look something like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="no">Photo</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="ss">photo: </span><span class="n">params</span><span class="p">[</span><span class="ss">:file</span><span class="p">])</span>

  <span class="n">head</span> <span class="ss">:ok</span>
<span class="k">end</span>
</code></pre></div>
<p>This action would use Paperclip to do the processing and resizing. The configuration in the <code>Photo</code> model would look like:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">has_attached_file</span> <span class="ss">:photo</span><span class="p">,</span>
  <span class="ss">styles: </span><span class="p">{</span> <span class="ss">small: </span><span class="s2">"250x250#"</span><span class="p">,</span> <span class="ss">large: </span><span class="s2">"1000x1000#"</span><span class="p">}</span>
</code></pre></div>
<p>This would all result in the files being stored locally, in the <code>public/system</code> directory of the application. This might suit some, but for an application hosted on Heroku it is a terrible idea, because Heroku&#39;s filesystem is read-only; your uploads would fail.</p>

<p>So let&#39;s assume that this application is going to be hosted on Heroku. That means that we need to find somewhere else to host our files, and one very good place for that is Amazon S3.</p>

<h3>Upload direct to S3</h3>

<p>There&#39;s an interim step here where you could configure Paperclip to upload the files to S3 after it has finished processing them on the server. In fact, there&#39;s a <a href="https://devcenter.heroku.com/articles/paperclip-s3">great Heroku tutorial</a> demonstrating just that.</p>

<p>However, as I mentioned at the beginning, we&#39;re looking to upload files <em>directly</em> to s3 to avoid Heroku&#39;s 30 second timeout. The Rails app may not have time to process the upload before the timeout if the file is sufficiently large enough. Therefore configuring Paperclip in this way won&#39;t suit us. What we&#39;ll do instead is upload this file directly to S3.</p>

<p><strong>I will assume at this stage that you&#39;ve setup an AWS account and at least one S3 bucket to receive uploads into. I will also assume that you know what an AWS access key and AWS secret key are. If you haven&#39;t configured these things, then go ahead and do that now.</strong></p>

<p><strong>I highly recommend creating a new user that only has read + write access to S3, and even then that access is limited to just this bucket. Your default user has <em>all</em> the permissions, and so if your keys leaked then someone could access your entire AWS account. Be careful.</strong></p>

<p>To let users upload to our application, we&#39;ll need to use an S3 feature called a <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html"><em>presigned post</em></a>. S3 Buckets by default are not writeable by the general public. In this particular case, we <em>do</em> want the general public to upload files to our bucket.</p>

<p>This feature will allow us to generate a URL and some fields for our upload form. The combination of this URL and these fields will allow regular users of our application to upload files straight to our S3 bucket.</p>

<p>To use any AWS feature in our application, we first need to add the <code>aws-sdk</code> gem to our Gemfile:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">'aws-sdk'</span><span class="p">,</span> <span class="s1">'~&gt; 2'</span>
</code></pre></div>
<p>We can use this gem to generate a presigned post, but before that we need to setup some credentials within our application. I like to use the <a href="https://rubygems.org/gems/dotenv-rails">dotenv-rails</a> gem for this purpose:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">'dotenv-rails'</span>
</code></pre></div>
<p>This gem will load any environment variable specified in an <code>.env</code> file. Let&#39;s create one of those now with these values:</p>
<div class="highlight"><pre><code class="language-" data-lang="">AWS_ACCESS_KEY_ID=[your access key goes here]
AWS_SECRET_KEY=[your secret key goes here]
AWS_REGION=[your region name goes here]
AWS_BUCKET=[your bucket name goes here]
</code></pre></div>
<p><strong>NOTE: Make sure to add this <code>.env</code> file to <code>.gitignore</code>. You don&#39;t want to commit your AWS access keys!</strong></p>

<p>Now let&#39;s go ahead and generate a presigned post in the Rails console:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">resource</span> <span class="o">=</span> <span class="no">Aws</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">Resource</span><span class="p">.</span><span class="nf">new</span>
<span class="n">post</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="nf">bucket</span><span class="p">(</span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"AWS_BUCKET"</span><span class="p">)).</span><span class="nf">presigned_post</span><span class="p">(</span>
  <span class="ss">key: </span><span class="s2">"uploads/</span><span class="si">#{</span><span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span><span class="si">}</span><span class="s2">/${filename}"</span>
<span class="p">)</span>
</code></pre></div>
<p>The <code>aws-sdk</code> gem will automatically reference the <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_KEY</code> and <code>AWS_REGION</code> keys from the environment to correctly configure itself. If you don&#39;t believe me, try these three methods:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">resource</span><span class="p">.</span><span class="nf">client</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">credentials</span><span class="p">.</span><span class="nf">access_key_id</span>
<span class="n">resource</span><span class="p">.</span><span class="nf">client</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">credentials</span><span class="p">.</span><span class="nf">secret_access_key</span>
<span class="n">resource</span><span class="p">.</span><span class="nf">client</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">region</span>
</code></pre></div>
<p>They will return the same values as specified in <code>.env</code>, if you&#39;ve configured all the above correctly.</p>

<p>Let&#39;s go back and look at what that <code>post</code> is. It&#39;s an instance of <code>Aws::S3::PresignedPost</code>, and it has two main methods that you need to know about: <code>url</code> and <code>fields</code>.</p>

<p>The <code>url</code> method is easy: it returns the URL to the bucket that will contain your uploaded files. Something like <code>https://[bucket].s3-[region].amazonaws.com</code>. Yours might be slightly different depending on the region you specified.</p>

<p>The <code>fields</code> method is a little more complicated. It will return a hash with the following keys:</p>

<ul>
<li><code>key</code>: The path where the file will live. We specified a timestamp and <code>${filename}</code> here. The <code>${filename}</code> part will be replaced by the name of the actual file when it has been uploaded.</li>
<li><code>policy</code>: A Base64 encoded JSON blob, listing the policy for this post. For more info, <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html">read here</a>.</li>
<li><code>x-amz-credential</code>: Specifies the access key used, the current date, and the scope to where this particular credential is used.</li>
<li><code>x-amz-algorithm</code>: The encryption algorithm used to generate the signature.</li>
<li><code>x-amz-date</code>: Today&#39;s date.</li>
<li><code>x-amz-signature</code>: The &quot;signed&quot; part of the request. A unique signature which verifies this request. For information on how this is constructed, <a href="http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html#query-string-auth-v4-signing">read this</a>.</li>
</ul>

<p>When we&#39;re building our form, we need to use both the <code>url</code> and the <code>fields</code> parts of this <code>PresignedPost</code>. The combination of these two things will authenticate users with AWS and allow them to put files in our S3 buckets. We must generate the <code>PresignedPost</code> object server-side first, which we can do in our <code>UploadsController</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">UploadsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
    <span class="n">s3</span> <span class="o">=</span> <span class="no">Aws</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">Resource</span><span class="p">.</span><span class="nf">new</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="n">s3</span><span class="p">.</span><span class="nf">bucket</span><span class="p">(</span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s1">'AWS_BUCKET'</span><span class="p">)).</span><span class="nf">presigned_post</span><span class="p">(</span>
      <span class="ss">key: </span><span class="s2">"uploads/</span><span class="si">#{</span><span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span><span class="si">}</span><span class="s2">/${filename}"</span><span class="p">,</span>
      <span class="ss">allow_any: </span><span class="p">[</span><span class="s1">'utf8'</span><span class="p">,</span> <span class="s1">'authenticity_token'</span><span class="p">],</span>
      <span class="ss">acl: </span><span class="s2">"authenticated-read"</span><span class="p">,</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>We&#39;re generating that <code>PresignedPost</code> here the same way as we&#39;ve done in the console, with two small differences: we&#39;re using an <code>allow_any</code> and an <code>acl</code> key.</p>

<p>Rails forms automatically insert two fields called <code>utf8</code> and <code>authenticity_token</code>. AWS uses the fields of the request to build the signature, and if any extra fields are added to the request then that may alter the signature. By using <code>allow_any</code> here, we&#39;re saying that it&#39;s OK for these fields to be <em>present</em>, and we don&#39;t -- and AWS shouldn&#39;t -- necessarily care about what those fields&#39; values are.</p>

<p>If we didn&#39;t specify this <code>allow_any</code> key, our upload would fail with a &quot;403 Forbidden&quot; status, and the response body would say:</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Error&gt;</span>
  <span class="nt">&lt;Code&gt;</span>AccessDenied<span class="nt">&lt;/Code&gt;</span>
    <span class="nt">&lt;Message&gt;</span>Invalid according to Policy: Extra input fields: utf8<span class="nt">&lt;/Message&gt;</span>
    ...
<span class="nt">&lt;/Error&gt;</span>
</code></pre></div>
<p>By setting up this little bit of configuration now, we avoid those issues later on.</p>

<p>The <code>acl</code> key will configure our uploaded objects permissions in such a way that only signed S3 requests can read those files.</p>

<p>Now with the <code>PresignedPost</code> generated server-side, we&#39;re going to need to change our upload form to use that <code>PresignedPost</code>&#39;s <code>url</code> and <code>fields</code>. Let&#39;s change <code>app/views/uploads/new.html.erb</code> to this:</p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="cp">&lt;%=</span> <span class="n">form_tag</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">url</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"dropzone"</span><span class="p">,</span> <span class="ss">id: </span><span class="s2">"uploader"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">fields</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">hidden_field_tag</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div>
<p>These simple changes will now use the <code>PresignedPost</code> object&#39;s <code>url</code> and <code>fields</code> to build out our form. When files are uploaded, they will go to the S3 bucket that we specified with <code>AWS_BUCKET</code> in <code>.env</code>.</p>

<p>There&#39;s one more small configuration change that we need to make on the AWS side of things before this will all work, and that&#39;s CORS (Cross-Origin Resource Sharing). Open up your S3 bucket in the AWS console, go to Permissions, and then CORS Configuration and paste in this:</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;CORSConfiguration&gt;</span>
 <span class="nt">&lt;CORSRule&gt;</span>
   <span class="nt">&lt;AllowedOrigin&gt;</span>*<span class="nt">&lt;/AllowedOrigin&gt;</span>

   <span class="nt">&lt;AllowedMethod&gt;</span>PUT<span class="nt">&lt;/AllowedMethod&gt;</span>
   <span class="nt">&lt;AllowedMethod&gt;</span>POST<span class="nt">&lt;/AllowedMethod&gt;</span>
   <span class="nt">&lt;AllowedMethod&gt;</span>GET<span class="nt">&lt;/AllowedMethod&gt;</span>

   <span class="nt">&lt;AllowedHeader&gt;</span>*<span class="nt">&lt;/AllowedHeader&gt;</span>
 <span class="nt">&lt;/CORSRule&gt;</span>
<span class="nt">&lt;/CORSConfiguration&gt;</span>
</code></pre></div>
<p>You may want to set the <code>AllowedOrigin</code> to your website here; I&#39;ve just left it as an asterisk to make it easier for myself. This configuration allows any authenticated website&#39;s users to issue <code>PUT</code>, <code>POST</code> and <code>GET</code> requests to this S3 bucket. If we tried to do an upload without this configuration, we would see an error that said:</p>

<blockquote>
<p>XMLHttpRequest cannot load https://[bucket].s3-[region].amazonaws.com/. Response to preflight request doesn&#39;t pass access control check: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http://localhost:3000&#39; is therefore not allowed access. The response had HTTP status code 403.</p>
</blockquote>

<p>With this configuration in place, it should now be possible to upload a file to the bucket:</p>

<p><img src="/images/dropzone/successful-upload.gif" alt="Successful upload"></p>

<p>This is what you should see too with your upload.</p>

<h3>Recording the upload</h3>

<p>Our upload now arrives safely on S3, but we currently do not have any record of it within our application. With Paperclip, when a file is uploaded we have to attach it to a particular model&#39;s instance, and through that model instance we track the location of the file. When we upload directly to S3, we don&#39;t have that same kind of &quot;automatic&quot; tracking that Paperclip provides.</p>

<p>We&#39;re going to have to come up with another way of recording this upload within our application. Some hipster ops would probably recommend that you trigger an AWS lambda event whenever a file is uploaded to the bucket, and then that event posts back to your application... but I think that is a touch too complicated.</p>

<p>What we&#39;ll do instead is to get S3 to report back after the file has been successfully uploaded. S3 will do this in the response it returns from a file upload request, as long as we configure it to do so. This response will contain the location of the file that has been uploaded, and then with that information we can then create an <code>Upload</code> record.</p>

<p>To make S3 report back information about the upload, we need to make a small change to our controller. We&#39;ll need to add an extra key to our <code>presigned_post</code> call:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@post</span> <span class="o">=</span> <span class="n">s3</span><span class="p">.</span><span class="nf">bucket</span><span class="p">(</span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s1">'AWS_BUCKET'</span><span class="p">)).</span><span class="nf">presigned_post</span><span class="p">(</span>
  <span class="ss">key: </span><span class="s2">"uploads/</span><span class="si">#{</span><span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span><span class="si">}</span><span class="s2">/${filename}"</span><span class="p">,</span>
  <span class="ss">allow_any: </span><span class="p">[</span><span class="s1">'utf8'</span><span class="p">,</span> <span class="s1">'authenticity_token'</span><span class="p">],</span>
  <span class="ss">success_action_status: </span><span class="mi">201</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div>
<p>This small change tells S3 that we would like a response back. By default, S3 returns a &quot;204 No Content&quot; status. This configuration option changes that to a &quot;201 Created&quot;, which will contain a response body that contains the file information.</p>

<p>The next issue that we have to deal with is that Dropzone + S3 are handling the upload, and we don&#39;t currently have a way to intercept the response back from S3. Fortunately, Dropzone is easily configurable and so we can get it perform an action once a file has been uploaded successfully.</p>

<p>Let&#39;s configure Dropzone like this now:</p>

<p><strong>app/assets/javascripts/uploads.js</strong></p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Dropzone</span><span class="p">.</span><span class="nx">autoDiscover</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

<span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">myDropzone</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dropzone</span><span class="p">(</span><span class="s1">'#uploader'</span><span class="p">,</span> <span class="p">{</span> <span class="na">timeout</span><span class="p">:</span> <span class="mi">0</span> <span class="p">});</span>

  <span class="nx">myDropzone</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">"success"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">request</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">resp</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">parseXML</span><span class="p">(</span><span class="nx">request</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">filePath</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">resp</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">"Key"</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>

    <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'/uploads'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">authenticity_token</span><span class="p">:</span> <span class="nx">$</span><span class="p">.</span><span class="nx">rails</span><span class="p">.</span><span class="nx">csrfToken</span><span class="p">(),</span>
      <span class="na">upload</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">filePath</span><span class="p">,</span>
        <span class="na">file_type</span><span class="p">:</span> <span class="nx">file</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span>
        <span class="na">last_modified</span><span class="p">:</span> <span class="nx">file</span><span class="p">.</span><span class="nx">lastModified</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div>
<p>Again, I&#39;m going a bit &quot;old-school&quot; with the jQuery usage. Sorry, JS hipsters. This could very well <a href="https://github.com/founderlab/react-dropzone-s3-uploader">just as easily be a React component</a>, but I&#39;m wanting to keep it relatively simple here.</p>

<p>The first thing that we do here is to turn off Dropzone&#39;s autodiscovery. We do this because we want to configure a custom dropzone component, but at the same time we want to keep the styling provided by <code>dropzone.css</code>. This styling refers to the class <code>dropzone</code>, but Dropzone&#39;s autodiscovery feature applies dropzone to any element with that class. So to have the styling but <em>not</em> the autodiscovery, we disable this option.</p>

<p>Then we go about configuring the custom Dropzone component. We start by linking it to the <code>#uploader</code> element (our <code>form_tag</code>), and setting the timeout to 0. By default Dropzone&#39;s timeout is 30 seconds, just like Heroku&#39;s. If we have a large file that we&#39;re uploading through Dropzone and/or a slow (read: Australian) internet connection, then Dropzone will cancel the request after 30 seconds. This option disables that feature.</p>

<p>The <code>on</code> function call then sets a handler for a &quot;success&quot; event, which is what happens right after a file has been uploaded. The first argument to this callback is the <code>file</code> which has just been uploaded, and contains some handy information like the file&#39;s content type and its last modification date.</p>

<p>The content type can come in handy if you want to display different files differently. For instance, for images you might want to display a smallnail but for a video or a PDF file you might want to display an icon.</p>

<p>The <code>request</code> argument represents the response that we get back from S3 after the file has been uploaded. Because of that <code>success_action_status</code> configuration in our controller, this response will be a short XML document.</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;PostResponse&gt;</span>
  <span class="nt">&lt;Location&gt;</span>https://[bucket].s3-[region].amazonaws.com/[file]<span class="nt">&lt;/Location&gt;</span>
  <span class="nt">&lt;Bucket&gt;</span>[bucket]<span class="nt">&lt;/Bucket&gt;</span>
  <span class="nt">&lt;Key&gt;</span>[file]<span class="nt">&lt;/Key&gt;</span>
  <span class="nt">&lt;ETag&gt;</span>[etag]<span class="nt">&lt;/ETag&gt;</span>
<span class="nt">&lt;/PostResponse&gt;</span>
</code></pre></div>
<p>From this XML response, we extract the <code>Key</code> element by using jQuery&#39;s <code>$.parseXML</code> function, and then send that through in a <code>POST</code> request with <code>$.post</code> to <code>/uploads</code>. With this request, we need to send through the authenticity token, which we get with <code>$.rails.csrfToken</code>.</p>

<p>This request will hit the <code>create</code> action of our <code>UploadsController</code> which doesn&#39;t yet exist, so let&#39;s create it:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="no">Upload</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="n">upload_params</span><span class="p">)</span>

  <span class="n">head</span> <span class="ss">:ok</span>
<span class="k">end</span>

<span class="kp">private</span>

<span class="k">def</span> <span class="nf">upload_params</span>
  <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:upload</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:path</span><span class="p">,</span> <span class="ss">:file_type</span><span class="p">,</span> <span class="ss">:last_modified</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>With all this hooked up, we should now see uploads coming through to this controller. Go ahead and upload one and give it a spin. If it&#39;s successful, you&#39;ll see something like this in the Rails server output:</p>
<div class="highlight"><pre><code class="language-" data-lang="">Started POST "/uploads" for 127.0.0.1 at 2017-08-29 10:36:38 +1000
Processing by UploadsController#create as */*
  Parameters: {
    "authenticity_token"=&gt;"[token]",
    "upload"=&gt;{
      "path"=&gt;"uploads/1503966995/joe.png",
      "file_type"=&gt;"image/png",
      "last_modified"=&gt;"1503965717000"
    }}
   (0.1ms)  begin transaction
  SQL (0.5ms)  INSERT INTO "uploads" ...
   (1.5ms)  commit transaction
Completed 200 OK in 21ms (ActiveRecord: 2.8ms)
</code></pre></div>
<p>Hooray!</p>

<p>One issue though: if we display these uploads from S3 then they&#39;ll be displayed in their original resolutions. With Paperclip, it automatically resized uploads to smallnail or smaller versions, but with direct-to-S3 upload we&#39;re missing out on that feature. Let&#39;s look at how we can add that feature back to our app with imgix.</p>

<h3>Serving images using imgix</h3>

<p><a href="https://imgix.com">imgix</a> is a real-time image processing and CDN service. We can use them to dynamically resize the photos uploaded to our application.</p>

<p>imgix takes image hosting quite seriously. <a href="http://photos.imgix.com/building-a-graphics-card-for-the-internet">Take a look at their &quot;Building a Graphics Card for the Internet&quot; writeup + photos</a> just to see how serious they are about it.</p>

<p>Signing up is free, and they give you a $10 credit on signing up. That should be plenty to at least trial this.</p>

<p>Sign up to imgix, and create a new source. For the &quot;Source Type&quot; you&#39;ll want to choose &quot;Amazon S3&quot;, and then you&#39;ll need to fill in the AWS Settings. The images do not have a path prefix, so leave that blank. Under &quot;Security&quot; check &quot;Secure URLs&quot;. For why you&#39;d want to check that box, read <a href="https://docs.imgix.com/setup/securing-images">this page from imgix&#39;s docs</a>.</p>

<p>Once you&#39;ve setup the source, you&#39;ll need to get the token from under the &quot;Security&quot; section. It will look like <code>5pXdqzZw69drsRgB</code>. We&#39;ll use this token to securely sign our imgix URLs.</p>

<p>To generate these URLs, we can use the <code>imgix</code> gem. Let&#39;s add that to the <code>Gemfile</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">'imgix'</span><span class="p">,</span> <span class="s1">'~&gt; 1.1.0'</span>
</code></pre></div>
<p>Then run <code>bundle install</code>. Let&#39;s add our secure token to the <code>.env</code> file, just so it&#39;s not in our committed code. We&#39;ll also add in the subdomain for the source that we setup:</p>
<div class="highlight"><pre><code class="language-" data-lang="">IMGIX_TOKEN=5pXdqzZw69drsRgB
IMGIX_SUBDOMAIN=[your subdomain goes here]
</code></pre></div>
<p>We&#39;re adding in the subdomain here as it will be different for our production environment. The subdomain here should be a <em>development-specific</em> one.</p>

<p>With that there, let&#39;s now try generating an imgix URL with this gem in the rails console. First, we&#39;ll need an <code>Imgix::Client</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">client</span> <span class="o">=</span> <span class="no">Imgix</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
  <span class="ss">host: </span><span class="s2">"</span><span class="si">#{</span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"IMGIX_SUBDOMAIN"</span><span class="p">)</span><span class="si">}</span><span class="s2">.imgix.net"</span><span class="p">,</span>
  <span class="ss">secure_url_token: </span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"IMGIX_TOKEN"</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div>
<p>Then to sign a URL, we can use <code>Imgix::Client#path</code>. By this point, we should have at least one upload, so let&#39;s use that upload&#39;s path to generate this URL:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">path</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">path</span><span class="p">(</span><span class="no">Upload</span><span class="p">.</span><span class="nf">last</span><span class="p">.</span><span class="nf">path</span><span class="p">)</span>
</code></pre></div>
<p>This gives us an <code>Imgix::Path</code> object. We can transform this path into a URL with the <code>to_url</code> method:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">path</span><span class="p">.</span><span class="nf">to_url</span>
</code></pre></div>
<p>The URL returned here will look something like:</p>
<div class="highlight"><pre><code class="language-" data-lang="">https://[imgix subdomain].imgix.net/uploads/[path]?ixlib=rb-1.1.0&amp;s=[signature]
</code></pre></div>
<p>If you open this URL in your browser you&#39;ll see the image that you have just uploaded, at the resolution you uploaded it. This is a good thing, as it proves that imgix&#39;s proxying service is working: imgix is fetching the image from the S3 bucket and serving the image through the imgix CDN.</p>

<p>The next step that we want to acheive is to get imgix to dynamically resize these photos. Let&#39;s say that we want an image that&#39;s 250×250 pixels to use as our smallnail. To get imgix to generate an image like that, we need to pass some options to <code>to_url</code>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">path.to_url(w: 250, h: 250)
</code></pre></div>
<p>This will return an image that maintains its aspect ratio, but at least the width or the height is a maximum of 250 pixels. Let me explain what I mean by this with an example: I have an image hosted through imgix that is 3264×2448 pixels. With the above options, imgix resizes this image to 250×188, effectively reducing the measurements of the photo by a ratio of 13.058.</p>

<p>However, in this particular application I want images that are perfect squares because I display these photos in a grid fashion. You might want this too, and so to generate images like this we can use the <code>:fit</code> option in <code>to_url</code>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">path.to_url(w: 250, h: 250, fit: 'crop')
</code></pre></div>
<p>imgix will now crop the image so that it fits neatly into a 250×250 square. There are <a href="https://docs.imgix.com/apis/url/size/fit">other styles of cropping, which are explained here</a>. You can load up the two images in two browser tabs to compare what they look like.</p>

<p>Let&#39;s make our images do this now through our view, and not just through the console. We can create a new class for this at <code>lib/upload_url.rb</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">UploadURL</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@client</span> <span class="o">=</span> <span class="no">Imgix</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
      <span class="ss">host: </span><span class="s2">"</span><span class="si">#{</span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"IMGIX_SUBDOMAIN"</span><span class="p">)</span><span class="si">}</span><span class="s2">.imgix.net"</span><span class="p">,</span>
      <span class="ss">secure_url_token: </span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"IMGIX_TOKEN"</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">small_url</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="vi">@client</span><span class="p">.</span><span class="nf">path</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">to_url</span><span class="p">(</span><span class="ss">w: </span><span class="mi">250</span><span class="p">,</span> <span class="ss">h: </span><span class="mi">250</span><span class="p">,</span> <span class="ss">fit: </span><span class="s1">'crop'</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">large_url</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="vi">@client</span><span class="p">.</span><span class="nf">path</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">to_url</span><span class="p">(</span><span class="ss">w: </span><span class="mi">1000</span><span class="p">,</span> <span class="ss">h: </span><span class="mi">1000</span><span class="p">,</span> <span class="ss">fit: </span><span class="s1">'crop'</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Then we can use this new class in <code>UploadsHelper</code>:</p>

<p><em>app/helpers/uploads_helper.rb</em></p>
<div class="highlight"><pre><code class="language-" data-lang="">require_dependency 'upload_url'

module UploadsHelper
  def small_image(upload)
    image_tag(upload_url.small_url(upload.path))
  end

  def large_image(upload)
    image_tag(upload_url.large_url(upload.path))
  end

  private

  def upload_url
    @upload_url ||= UploadURL.new
  end
end
</code></pre></div>
<p>We can then use these helpers to display smallnail versions of our image on the <code>index</code> template:</p>

<p><strong>app/views/uploads/index.html.erb</strong></p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="nt">&lt;h1&gt;</span>Uploads<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%</span> <span class="vi">@uploads</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">upload</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">small_image</span><span class="p">(</span><span class="n">upload</span><span class="p">)</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div>
<p>Or large images on the <code>show</code> template:</p>

<p><strong>app/views/uploads/show.html.erb</strong></p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb">...
  <span class="cp">&lt;%=</span> <span class="n">large_image</span><span class="p">(</span><span class="vi">@upload</span><span class="p">)</span> <span class="cp">%&gt;</span>
...
</code></pre></div>
<h3>Summary</h3>

<p>Dropzone, S3 and imgix allow us to upload and host our images very easily, without the need of the paperclip gem. By uploading directly to S3, we avoid tying up our application&#39;s processes with lengthy file uploads too.</p>

<p>If you found this post helpful, chuck a few bucks my way on PayPal: <a href="https://paypal.me/ryanbigg">https://paypal.me/ryanbigg</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Joy of Elixir</title>
   <link href="http://ryanbigg.com/2017/07/joy-of-elixir"/>
   <updated>2017-07-27T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2017/07/joy-of-elixir</id>
   <content type="html"><![CDATA[<p>I&#39;ve been using Elixir at work professionally for the past year and more recently I&#39;ve been starting to do some mentoring around Elixir. I&#39;ve noticed that while there are some very solid intermediate books/resources like <a href='https://elixir-lang.org/getting-started/introduction.html'>Getting Started guide on elixir-lang.org</a> the <a href='https://pragprog.com/book/elixir13/programming-elixir-1-3'>Programming Elixir</a> book and even <a href='https://elixirschool.com/'>Elixir School</a>, there doesn&#39;t seem to be anything at all book-wise directed at newbies.</p>

<p><strong>So I decided to write a little book called <a href='https://joyofelixir.com'><em>Joy of Elixir</em></a>.</strong></p>

<p><a href='https://joyofelixir.com'><img src='https://joyofelixir.com/images/small-cover.png' width='250px' style="float: right; margin-left: 20px;"></a></p>

<p>
  <strong>Joy of Elixir avoids assuming knowledge of <em>anything</em> about programming while teaching people about their first programming language: Elixir.</strong>
</p>

<aside>
  <header>Shut up and take my money!</header>

  <p>
    This book is available <a href='https://joyofelixir.com'>for free online</a> (under <a href='https://github.com/radar/joyofelixir/blob/master/license.txt'>the CC-BY-SA 4.0</a> license), and the book's <a href='https://github.com/radar/joyofelixir'>HTML + CSS-based source is on GitHub</a>.
  </p>

  <p>
    However, if you still want to throw a few dollars my way you can still <a href='https://leanpub.com/joyofelixir'>buy a PDF version</a> from Leanpub.
  </p>
</aside>

<p>
  It seemed like there is a vast, empty, <em>cavernous void</em> where there should be something like the excellent <a href='https://pine.fm/LearnToProgram/'>Learn to Program book by Chris Pine</a>. That book is for <a href='https://www.ruby-lang.org'>Ruby</a>; but there feels like there should be an equivalent to that for Elixir. I'm hoping <em>Joy of Elixir</em> can be that equivalent.
</p>

<p>
We have people completely new to programming <em>wanting</em> to learn Elixir -- because people who have learned Elixir already told them about it and how cool it is! -- but the support is not-quite-there yet. So this is an attempt to fill that void. Essentially a response to: <em>"Why won't <u>somebody</u> think of the newbies?"</em>. Well, someone <em>is</em> thinking of the newbies.
</p>

<p>
  Elixir is a great first language to get started with because its syntax is very newbie friendly and the initial concepts are very easy to learn. I would even go as far as to say that Elixir is easier to learn than Ruby because of Elixir's immutability and the way Elixir puts functions into modules -- (rather than the functions just being available, i.e. through inheritance or monkey-patching). I find it easier to navigate through other people's Elixir code, than I do to navigate through other people's Ruby code.
</p>

<p>
  I want Joy of Elixir to be the go-to-resource for teaching people programming <em>for the very first time</em> using Elixir. I want them to experience the <em>joy</em> that Elixir (and programming in general) can bring to people. I want people to feel like them have power over the machine because of the knowledge contained within this book.
</p>

<p>I want to have a book that I can confidently recommend to newbies when they ask about how they can learn Elixir. If you have a newbie in your life that wants to learn Elixir, point them at this book and let them read it. I&#39;m very keen to get some feedback from newbies (and everyone else) on how the content could be improved. There&#39;s instructions on how to give that feedback <a href='https://joyofelixir.com/about.html'>over on the &quot;About&quot; page</a>.</p>

<p>I aim to continue writing this book over the next couple of months and hope to have a finished edition by the end of the year. What&#39;s there at the moment is roughly a month&#39;s worth of work -- or put another way: 15,000 words (50ish pages). I&#39;m aiming for the book to be at about 50,000 words (125-150 pages) by the time it is done.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Rails' CurrentAttributes considered harmful</title>
   <link href="http://ryanbigg.com/2017/06/current-considered-harmful"/>
   <updated>2017-06-22T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2017/06/current-considered-harmful</id>
   <content type="html"><![CDATA[<p>This blog post has been <a href="https://techracho.bpsinc.jp/hachi8833/2017_08_01/43810">translated into Japanese</a>, thanks to <a href="https://twitter.com/hachi8833">@hachi8833</a>!</p>

<p>I was made aware of <a href="https://github.com/rails/rails/commit/24a864437e845febe91e3646ca008e8dc7f76b56">this commit</a> recently (thanks to Rebecca Skinner) to Rails which introduces what is effectively a global state to Rails applications.</p>

<p>Rather than writing why global state in-general is a bad thing myself, I will instead link you to this <a href="https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil">excellent question + answer on the Software Engineering Stack Exchange</a>.</p>

<blockquote>
<p>Very briefly, it makes program state unpredictable.</p>

<p>To elaborate, imagine you have a couple of objects that both use the same global variable. Assuming you&#39;re not using a source of randomness anywhere within either module, then the output of a particular method can be predicted (and therefore tested) if the state of the system is known before you execute the method.</p>
</blockquote>

<p>This implementation also chooses to use <a href="https://github.com/rails/rails/commit/24a864437e845febe91e3646ca008e8dc7f76b56#diff-3c3c0f647bc4702f9453c173a707aa06R90">thread-local variables</a> which <a href="https://stackoverflow.com/a/8291218/15245">this answer over on Stack Overflow</a> explains is not a good choice because:</p>

<blockquote>
<ul>
<li>It&#39;s harder to test them, as you will have to remember to set the thread-local variables when you&#39;re testing out code that uses it</li>
<li>Classes who use thread locals will need knowledge that these objects are not available for them but inside a thread-local variable and this kind of indirection usually breaks the law of demeter</li>
<li>Not cleaning up thread-locals might be an issue if your framework reuses threads (the thread-local variable would be already initiated and code that relies on ||= calls to initialize variables might fail</li>
</ul>
</blockquote>

<p>Not to mention that this also violates the well-established <a href="https://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a> too. Suddenly, <code>Current</code> is available <em>anywhere</em> in your application. Good code is <em>explicit</em> in how it makes data available to its methods / functions. This <code>CurrentAttributes</code> feature is not good code, nor is it making it <em>explicitly clear</em> how <code>Current.user</code> arrives in the model. It is just there &quot;magically&quot;.</p>

<p>I enjoy and have benefited from Rails magic in the past. Some of my favourite features are <code>render @collection</code> and the <a href="http://ryanbigg.com/2012/03/polymorphic-routes">polymorphic routing</a>. Those are great features because their scope is limited. I know that I can render a collection in a view. I know I can use polymorphic routing in controllers, models and helpers.</p>

<p>This <code>CurrentAttributes</code> is much too magical for my liking because of how it introduces a thread-local global state which hides where the actual work of setting values on <code>Current</code> is done, and because it is <em>implicit</em> about where those values come from.</p>

<p>&quot;They&#39;re just set in the controller!&quot;, may be a defense for this. But what if you don&#39;t have a controller? What if you have a background job instead? How about a test? True, in both cases you could use <code>Current</code> to provide the values:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">post_id</span><span class="p">)</span>
  <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
  <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="n">post_id</span><span class="p">)</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span>
  <span class="c1"># code to run the job goes here</span>
<span class="k">end</span>
</code></pre></div>
<p>Here, <code>Post#run_long_running_thing</code> can simply access the current user by accessing <code>Current.user</code>. But it is not immediately clear -- if all you&#39;re looking at is the <code>Post#run_long_running_thing</code> method -- where <code>Current.user</code> is being set in the first place. It&#39;s implied that it&#39;s set somewhere else, but to attempt to find where it&#39;s set in this context may be difficult. Doing a find in the project for <code>Current.user =</code> may turn up multiple places (controllers, jobs, etc.) where the variable is set. Which one is the right one <em>for this context</em>?</p>

<p>As for tests, for those you would need to setup <code>Current.user</code> before hand if you had any code relying on that. I&#39;d imagine something like:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
<span class="n">before</span> <span class="p">{</span> <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="o">=</span> <span class="n">user</span> <span class="p">}</span>

<span class="n">it</span> <span class="s2">"runs the long running thing"</span> <span class="k">do</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span>
<span class="k">end</span>
</code></pre></div>
<p>Again, it is not explicit when you&#39;re looking at the <code>run_long_running_thing</code> method or its tests where <code>Current.user</code> is being set.</p>

<p>There doesn&#39;t appear to be anywhere in the <code>CurrentAttributes</code> code -- as far as I can tell -- where it would reset the state of this <code>Current</code> object in between each test. Therefore, setting it in one test like what I&#39;ve done above now makes it bleed through &quot;magically&quot; into other tests. That behaviour seems like a horrible thing to have in a codebase. You could very well have situations where you&#39;re <em>expecting</em> <code>Current.user</code> to be <code>nil</code> but instead it&#39;s set to some vaule because some other test set it. Now which of the 500 tests in my application did that? Good luck finding it.</p>

<h3>Convention over configuration, and perhaps explicitness over implicitness?</h3>

<p>Rails is still a good framework. I know DHH&#39;s rebuttal to this will be &quot;don&#39;t use it then&quot; or something along those lines. Similar to his response to <a href="https://github.com/rails/rails/pull/25115">my reverting of callback suppression</a> a while back.</p>

<blockquote>
<p>Protecting programmers from themselves is explicitly not in the charter for Rails when it comes to providing features that have a valid use case but could be abused.</p>
</blockquote>

<p>I just can&#39;t reason with the guy at all. We have vastly different opinions on this sort of thing.</p>

<p>I think Rails choosing to go with ultra-implicitness -- like in this <code>Current</code> case -- is a vastly wrong move that will lead to a lot of frustration with Rails codebases that use this feature. I think Rails should, in situations like this, choose to opt for explicitness over implicitness. Rails has enough magic in it and it certainly doesn&#39;t need any more.</p>

<p>This feature is not something that was sought after (it appears like DHH thought it was a good idea one day and just <em>did it</em>), and we have much better ways of doing this. For instance, in the job code above, it would be better to pass it explicitly:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">post_id</span><span class="p">)</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
  <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="n">post_id</span><span class="p">)</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
  <span class="c1"># code to run the job goes here</span>
<span class="k">end</span>
</code></pre></div>
<p>Similarly, in the test explictness also wins:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>

<span class="n">it</span> <span class="s2">"runs the long running thing"</span> <span class="k">do</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>In both of these cases, it is <em>very</em> clear how <code>user</code> arrives in the <code>run_long_running_thing</code> method: it is passed in as an argument.</p>

<p>Let&#39;s finish by taking a look at the code from the pull request and look at how it can be written more explicitly.</p>

<h3>DHH&#39;s CurrentAttributes code vs my explicit code</h3>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># app/models/current.rb</span>
<span class="k">class</span> <span class="nc">Current</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">CurrentAttributes</span>
  <span class="n">attribute</span> <span class="ss">:account</span><span class="p">,</span> <span class="ss">:user</span>
  <span class="n">attribute</span> <span class="ss">:request_id</span><span class="p">,</span> <span class="ss">:user_agent</span><span class="p">,</span> <span class="ss">:ip_address</span>

  <span class="n">resets</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">zone</span> <span class="o">=</span> <span class="kp">nil</span> <span class="p">}</span>

  <span class="k">def</span> <span class="nf">user</span><span class="o">=</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="k">super</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">account</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">account</span>
    <span class="no">Time</span><span class="p">.</span><span class="nf">zone</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">time_zone</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># app/controllers/concerns/authentication.rb</span>
<span class="k">module</span> <span class="nn">Authentication</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="n">included</span> <span class="k">do</span>
    <span class="n">before_action</span> <span class="ss">:set_current_authenticated_user</span>
  <span class="k">end</span>

  <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">set_current_authenticated_user</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># app/controllers/concerns/set_current_request_details.rb</span>
<span class="k">module</span> <span class="nn">SetCurrentRequestDetails</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="n">included</span> <span class="k">do</span>
    <span class="n">before_action</span> <span class="k">do</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">request_id</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">uuid</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">user_agent</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">user_agent</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">ip_address</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">ip</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">include</span> <span class="no">Authentication</span>
  <span class="kp">include</span> <span class="no">SetCurrentRequestDetails</span>
<span class="k">end</span>
</code></pre></div>
<p>Including the <code>Authentication</code> module into <code>ApplicationController</code> to add a single method seems like a bit of premature extraction. Let&#39;s ignore that for now.</p>

<p>This implementation with its <code>before_action</code> to <code>set_current_authenticated_user</code> will mean that <code>Current.user</code> is set on all requests, even those which don&#39;t refer to the <code>current_user</code> at all.</p>

<p>A better implementation would be a <code>current_user</code> method which evaluates its <code>find</code> when it is called. You&#39;ll see this pattern in a lot of Rails applications.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">current_user</span>
  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div>
<p>In fact, this is similar to <a href="https://github.com/plataformatec/devise/blob/master/lib/devise/controllers/helpers.rb#L123-L125">how Devise presents its <code>current_user</code> method</a>. It uses <code>warden</code> instead of <code>cookies.signed</code>, but it&#39;s implementation is similar enough:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">current_</span><span class="c1">#{mapping}</span>
  <span class="vi">@current_</span><span class="c1">#{mapping} ||= warden.authenticate(scope: :#{mapping})</span>
<span class="k">end</span>
</code></pre></div>
<p>Ok, so now we&#39;ve got a <code>current_user</code> method which is available in the <em>controllers</em> but what if we want to use it in the view? For instance, if we want to say <code>Hello, #{current_user.name}</code> in a layout? Easy enough: make it a helper method.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">current_user</span>
  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
<span class="k">end</span>
<span class="n">helper_method</span> <span class="ss">:current_user</span>
</code></pre></div>
<p>Great, so now it&#39;s available in controllers, helpers and views. All without making it available <em>everywhere</em> in the current thread.</p>

<p>Now I would like to focus on the second half of DHH&#39;s code:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="no">Current</span><span class="p">.</span><span class="nf">account</span><span class="p">.</span><span class="nf">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Message</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:creator</span><span class="p">,</span> <span class="ss">default: </span><span class="o">-&gt;</span> <span class="p">{</span> <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="p">}</span>
  <span class="n">after_create</span> <span class="p">{</span> <span class="o">|</span><span class="n">message</span><span class="o">|</span> <span class="no">Event</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">record: </span><span class="n">message</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Event</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">before_create</span> <span class="k">do</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">request_id</span> <span class="o">=</span> <span class="no">Current</span><span class="p">.</span><span class="nf">request_id</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">user_agent</span> <span class="o">=</span> <span class="no">Current</span><span class="p">.</span><span class="nf">user_agent</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">ip_address</span> <span class="o">=</span> <span class="no">Current</span><span class="p">.</span><span class="nf">ip_address</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Here, DHH is <em>implicitly</em> linking the message&#39;s creator to the <code>Current.user</code> by using the <code>default</code> option on <code>belongs_to</code>. I believe that this violates the MVC layer abstraction. The <code>Current.user</code> is just &quot;magically&quot; available in the model, with absolutely no context of how it got there in the first place.</p>

<p>A common pattern in Rails applications is not to do this, but instead to explicitly set the <code>creator</code> at the point of creation:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="vi">@message</span> <span class="o">=</span> <span class="n">current_account</span><span class="p">.</span><span class="nf">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>
  <span class="vi">@message</span><span class="p">.</span><span class="nf">creator</span> <span class="o">=</span> <span class="n">current_user</span>
</code></pre></div>
<p>Let&#39;s assume <code>current_account</code> is a similar abstraction to the <code>current_user</code> one. It&#39;s clear here that in the controller that <em>this</em> is where the <code>creator</code> is assigned. With DHH&#39;s code, it is not immediately clear from the controller code itself that <code>creator</code> is assigned at all.</p>

<p>Not only that, but this also lends itself to being abstracted into a &quot;service object&quot; which is responsible for creating a message. Let&#39;s say that you want to log an <code>Event</code> whenever a <code>Message</code> is created. Oh, I see DHH&#39;s code does that already with an <code>after_create</code> callback. Well then.</p>

<p>In the case of DHH&#39;s code, the <code>after_create</code> callback will happen whenever a <code>Message</code> is created anywhere in your application. This might be suitable in a controller, but what if you want to test some database logic, or something else which requires a persisted message, and you don&#39;t care about an event being there at the same time? What if when you created an event you had extra logic on it which caused <em>another</em> record to be created too?</p>

<p>Having such a callback irrevocably ties together messages and events <em>implicitly</em>.</p>

<p>As I mentioned before, it would be better to abstract this into a &quot;service object&quot;.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CreateMessageWithCreator</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">current_user</span><span class="p">)</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">current_account</span><span class="p">.</span><span class="nf">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>
    <span class="n">message</span><span class="p">.</span><span class="nf">creator</span> <span class="o">=</span> <span class="n">current_user</span>
    <span class="n">message</span><span class="p">.</span><span class="nf">save</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>You can then call this code in your controller like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="k">if</span> <span class="no">CreateMessageWithCreator</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">message_params</span><span class="p">,</span> <span class="n">current_user</span><span class="p">)</span>
    <span class="no">Event</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">record: </span><span class="n">record</span><span class="p">)</span>
    <span class="n">flash</span><span class="p">[</span><span class="ss">:notice</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Message sent!"</span>
    <span class="n">redirect_to</span> <span class="ss">:index</span>
  <span class="k">else</span>
    <span class="n">flash</span><span class="p">[</span><span class="ss">:alert</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Message failed to send."</span>
    <span class="n">render</span> <span class="ss">:new</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This way, then you would know that in <em>this particular case</em> you&#39;re <em>definitely</em> creating a message with a linked creator and it frees you up to create messages without creators or events, if the need did arise.</p>

<p>I think having these dependencies clearly highlighted in the code rather than magically abstracted away is a much, much better solution.</p>

<h2>Conclusion</h2>

<p>Introducing a global state to Rails seems like a terrible idea and while I deeply, deeply wish this change is reverted, that is very likely not going to happen because it&#39;s DHH&#39;s change and it&#39;s his framework. DHH is allowed to be a footgun merchant if he wishes to be. I am just sad to see that, despite evidence that this is a genuinely bad idea, DHH carried on with it. I thought with his years of experience he would know better by now.</p>
]]></content>
 </entry>
 
 
</feed>