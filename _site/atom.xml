<?xml version="1.0" encoding="iso-8859-1"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The Life of a Radar</title>
 <link href="http://ryanbigg.com/atom.xml" rel="self"/>
 <link href="http://ryanbigg.com"/>
 <updated>2011-10-02T15:02:15+11:00</updated>
 <id>http://ryanbigg.com/</id>
 <author>
   <name>Ryan Bigg</name>
   <email>radarlistener@gmail.com</email>
 </author>

 
 <entry>
   <title>Leaving Chicago</title>
   <link href="http://ryanbigg.com/2011/10/leaving-chicago"/>
   <updated>2011-10-02T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2011/10/leaving-chicago</id>
   <content type="html"><![CDATA[<p>I have just spent two weeks in America being reminded what such great people live outside my own country.</p>

<p>This is a story, written in several parts, about my flying experience from Chicago back to Sydney this weekend. I found it entertaining living it, and I hope you find it entertaining reading.</p>
<hr />
<p>I&#8217;m sitting at the gate in Chicago airport and I see this 2 year old girl with her mother, and instantly, fear strikes. The little girl is being perfectly innocent, playing with her toys and giggling. She seems like a little angel, but I know better.</p>

<p>Someone has to sit near that girl, and there&#8217;s a chance (although relatively low) it&#8217;s gonna be me. This fear comes from being&#8230; traumatized&#8230; by other children screaming on planes while I&#8217;ve tried to sleep or kicking the back of my chair. She could be one of those devil children.</p>

<p>So I calm myself down and remind myself of the tiny statistical probability that I&#8217;ll be sitting near her. She seemed fine.</p>

<p>We line up for boarding and I am a ways back in the line from the girl and her mother, thinking that would be the last time I would see the two. I get on the plane and look for my seat 68H, keeping my eyes peeled on the strip above the seats with the numbers. I find row 68 easily enough (yay, sequential numbering!) and then I look down.</p>

<p>The fear came back. There they were, the mother and the daughter. And one spare seat. Just for me. On the aisle. I know how cattle who have been led to the slaughter feel like now. I instantly begin to slide down the wonderful spiral of depression (and into my seat), and then went through the 5 stages of grief in quite rapid succession.</p>

<p>Perhaps everything would be ok. The little girl was handed a bag of things to entertain her and seemed pretty enthralled by the prospect of a Toy Story puzzle. No screams, no crying, no yelling. No kicking seats. I had accepted my fate. I was doomed to sit next to the child for the next 14 hours and perhaps sleep not a wink the entire time. I was&#8230; strangely actually OK with that.</p>

<p>Then a male air host comes by and says the most beautiful words I have heard in my entire trip:</p>

<p>&#8220;Excuse me sir, are you travelling alone?&#8221; &#8220;Yes.&#8221; &#8220;Would you like to move down? I have some spare seats over here you are welcome to.&#8221;</p>

<p>A choir of angels sung in my head, the clouds covering the Chicago sky vanished and my fear turned to joy. I moved down a couple of rows to and was assigned a block of three seats, just for myself, right in front of one of the cabin dividers of the aircraft. I laughed at the absurdity of the situation: my acceptance of my approaching doom (of having to sit next to a toddler) and then being not only rescued by an air host, but also being given three. Whole. Seats. For me.</p>

<p>So thank you, Taka, from the Cathay Pacific Chicago to Hong Kong 3:25pm flight on the 28th September. Very much appreciated.</p>

<p>Oh, and Cathay Pacific have powerplugs on each seat (even back here in cattle class) and plenty of leg room. I think everything&#8217;s going to be alright.</p>

<p>The plane took off and I enjoyed the thought of having three, whole, seats, to myself for the entire flight. After takeoff, I took out my laptop and did some work for a client.</p>
<hr />
<p>Later on, I got up to go to the toilet and on my way back this stranger says in a thick American accent &#8220;Hey buddy, you&#8217;ve got that whole row to yourself up there, right?&#8221; and I confirm. He says: &#8220;Well look, I&#8217;ll do you a deal. I&#8217;ll give you one hundred dollars if you let me swap my seat here for your row&#8221; and he shows me two empty seats (the aisle and the middle seat) back in the plane, about 20 rows back from where I moved to, 10 back from the kid.</p>

<p>I ask, &#8220;is anyone sitting in that middle seat?&#8221; and he says no, so I say &#8220;Deal!&#8221;. He opens the overhead compartment, unzips his bag and pulls out a money clip full of bills, about half a centimeter thick. He leafs through them and hands me $100 in American money.</p>

<p>We go back to my seat and I pack up my things. As I do that we chat about where we both come from, what we are traveling for and where we are going. He says he&#8217;s going to the Philippines and would love to stretch out and sleep on the plane.</p>

<p>&#8220;Pleasure doing business with you!&#8221; I say as I move back in the cabin. &#8220;Same to you!&#8221; he replies.</p>

<p>I take my <em>new</em> new seat, quite pleased that I made $100 by being lucky. I do a bit more coding, watch a movie, take a sleeping pill and promptly pass out, sleeping for about 4 hours.</p>
<hr />
<p>As we are approaching Hong Kong, the lady captain comes over the PA and says (in an authoritative voice that only captains have. They probably have some kind of school for Captain Voice) &#8220;Cabin crew, 30 minutes to landing&#8221;.</p>

<p>More than 30 minutes later we are still in a holding pattern, and the captain comes over the PA again: &#8220;Good evening passengers, due to the windy conditions caused by the typhoon in Hong Kong, the Hong Kong airport is backed up and so we are delayed. We apologize for the delay&#8221;. At this point, I didn&#8217;t know there was a typhoon in Hong Kong. This was also the first time I had ever heard a pilot say &#8220;windy&#8221;. I guess typhoons are kind of like that.</p>

<p>So we hang about in the holding pattern for about 40 minutes more. &#8220;This is the captain again&#8221;, the authoritative voice over the PA announces, obviously stressed or annoyed, &#8220;we are unable to land in Hong Kong tonight&#8221;.</p>

<p>A cacophony of noise starts up. &#8220;We are diverting to Taipei airport due to the backup of planes caused by the typhoon over Hong Kong&#8221;. I think I giggled a little at this point. This flight just got weirder.</p>

<p>An older guy called Jim sitting one row back over my left shoulder started a conversation with me about our flight and reason for travel, as you do when flying. He was a woodcarver going to the Philippines on a business trip and he spoke about the plight that some of his workers had, having to walk many more miles to get wood due to the deforestation happening there.</p>

<p>As we&#8217;re approaching Taipei, the pilot announces &#8220;Cabin crew, 30 minutes until landing&#8221; again. I had a sense of deja v√∫ at this point, like I had heard her said those exact words before.</p>

<p>But I passed time by talking to Jim about programming, dreams and neural pathways in the brain and we landed alright in Taipei. Everyone on the plane did the usual thing of unbuckling their seatbelts the instant that the seatbelt sign was turned off and they stood up to get out their luggage. Jamming up the aisles with a mass of bodies and luggage.</p>

<p>We waited there for about 20 more minutes without moving. During this time Jim and I talk to another passenger, a teenage boy from Taiwan, on his row who was actually connected to Taipei through Hong Kong and this boy was really happy that the plane had diverted, even if everyone else wasn&#8217;t. It would mean that he could just get off here with everyone else, eventually. I certainly wasn&#8217;t happy as I had missed my connecting flight out of Hong Kong back to Sydney by that time (the layover was only an hour and a half), and therefore also the breakfast/lunch I had scheduled with some international friends who were arriving at the same time, or near enough.</p>

<p>The captain came over the PA yet again, annoyed still, and said &#8220;There&#8217;s been a change of plans. We are now in the process of refuelling this aircraft and changing the crew. We are now going to attempt to fly <em>back</em> to Hong Kong and land there. We really apologise for any inconvenience that this has caused you. We will inform you of your options when we get you to Hong Kong.&#8221; An American guy behind me sighed loudly and whined that he only wanted to get outside so he could smoke. Long haul flights and smokers aren&#8217;t compatible, it seems. He caught a passing flight attendant who quickly dismissed him with a short &#8220;no&#8221;. He said it was worth a try and continued talking with Jim and I as everyone begun putting their bags back up in the overhead compartment to prepare for the flight back to Hong Kong.</p>

<p>I had wrote the first part (the part about the little girl) of this post on my phone as kind of a short blog post which I thought was an interesting story. I never thought it would turn into this!</p>

<p>So to recap: I&#8217;ve been paid $100 to swap seats with a random stranger, missed my connecting flight to Sydney through Hong Kong, met a couple of new temporary airfriends and have no idea when we&#8217;re going to Hong Kong or when I will finally get back into my nice, comfortable bed in Sydney. At this stage, it certaintly feels it would be easier just to stay in Taipei on a permanent basis. I hear the people here are nice.</p>
<hr />
<p>The plane, with fresh crew and unfresh passengers, left Taipei airport somewhere between an hour and two hours after it arrived there and flew back to Hong Kong. We were stuck in the holding pattern again and the new captain, this time a guy, came over the PA: &#8220;We&#8217;re stuck in a holding pattern over Shenzhen waiting to get into Hong Kong airport. Due to the typhoon, there&#8217;s a large number of planes waiting to land in Hong Kong at this time.&#8221; mhm. Heard it all before, buddy.</p>

<p>But eventually, we did land. It was just after 1am. As soon as we landed, everyone on the aircraft performed that perfect Pavlovian response to the seatbeat sign again and crowded up the aisles. After a couple of minutes of waiting, the pilot comes over the PA again and says: &#8220;Uhh&#8230; we currently have nobody to operate the airbridge in the airport. We&#8217;re going to be waiting a few more minutes for someone to do that. Please wait.&#8221; Massive sighs and a couple of bouts of nervous laughter spread through the cabin.</p>

<p>About 10-20 minutes later we all get off the plane and we are all directed to wait outside the gate, where the crew are giving directions to people who need them. Eventually, we&#8217;re lead away from the gate area and down towards the Transfer area in the airport. Along the way, there&#8217;s <em>hundreds</em> of extremely-tired looking people who are just sitting on the ground or milling about, waiting for their flights. I had an urge to ask them how long they&#8217;d been waiting for, but didn&#8217;t ask. That was silly.</p>

<p>What happened next was an utter disaster. I <a href='https://twitter.com/ryanbigg/status/119460363082272768'>tweeted</a> <a href='https://twitter.com/ryanbigg/status/119462039927275520'>about</a> <a href='https://twitter.com/ryanbigg/status/119470295315787776'>my</a> <a href='https://twitter.com/ryanbigg/status/119477977850449920'>experiences</a> <a href='https://twitter.com/ryanbigg/status/119502614214881280'>during the</a> <a href='https://twitter.com/ryanbigg/status/119507918491103232'>whole thing</a> thanks to the free airport wi-fi. Probably the only thing that kept me relatively sane / calm through the entire debacle.</p>

<p>Our &#8220;tourguide&#8221;, a short, young Asian man, directed us to an empty spot by a shop and told us to wait 20 minutes. He said he needed to go to Head Office to get some clarification on what would happen. We waited for over an hour, perhaps two, and he didn&#8217;t come back.</p>

<p>After that, I lined up in one of the impossibly slow lines that looked vaguely like it was going in the direction of the Cathay Pacific desks. Where you would normally expect an orderly queue would flow into an orderly counter area with a 1:1 ratio on clerk to passenger, actually formed into this zombie-mosh-pit of tired travellers. As I was waiting in the line, the Woman and Child came through and actually pushed in front, about 8 people ahead. I was a little angry, but too tired to really care at that stage.</p>

<p>I waited for 3 hours in that line, speaking to various travellers about their plans and backgrounds to keep myself entertained. When I got to the front of the line I actually realised I was also the back of the line. The other people who had been behind me had obviously either pushed in front or had found alternative ways out. The guy behind the counter looked absolutely exhausted and I thanked him greatly for his work. He assigned me a ticket for a flight out of Hong Kong at 9am the next morning, as well as two $40HK vouchers for spending in the airport as a consolation for the flight delays.</p>

<p>I looked around for some seats to crash on but a couple of hundred other people had the same idea as me, so I was relegated to sleeping on the ground which was basically slightly furry concrete. An airline had handed out &#8220;consolation blankets&#8221; (<a href='https://twitter.com/ryanbigg/status/119513953096306688'>my name, not theirs</a>), thin airline blankets that people could use if they needed to. I grabbed one and used it as a base.</p>

<p>When I laid down, I noticed two buff black guys near me with deep South African accents were talking. I thought they would eventually fall asleep, and was proven wrong over the course of the next three hours. Every time I tried to fall asleep one of them would laugh or raise their voice and I would be alert again. At about 6:30 I gave up on trying to sleep and listened to their conversation. Surprisingly, they were fashion designers from South Africa. They just didn&#8217;t look like the fashion designer type to me.</p>

<p>I rolled out of bed at around 7ish and went upstairs to get some breakfast. I had no idea what exactly my vouchers could buy, so I bought McDonalds as a safety. It was McDonalds, and approximated food well enough that my stomach was not wanting to detach itself and go hunt on its own. Upstairs was packed with bleary-eyed people, probably the same people from the night before who had also missed their connecting flights.</p>

<p>After &#8220;breakfast&#8221;, I made my way to the gate and set an alarm incase I fell asleep. Thanks to the wonderful sunshine streaming in through the Hong Kong airport there was no chance of that. Eventually 9am came around and I got onto the plane, absolutely tired out of my brain. When I sat down, I felt alright, but later on when I went to the toilet again I looked in the mirror and my eyes were bloodshot and I looked the most tired I had seen myself in years.</p>

<p>The flight back to Sydney was non-eventful, apart from some children on the same row as me playing with the blinds the entire flight, opening them and letting in the &#8220;lovely&#8221; sunshine while I tried to sleep. Oh, and the absolutely cute Polish chick with the bright-green eyes sitting a row back. But at least I slept. We arrived fine. No holding patterns, no typhoon bullshit, just flying as it should be.</p>

<p>I was overjoyed to arrive at the baggage claim to see my bag there. I was worried that it may have not made the flight, but it seems these airline people know what they&#8217;re doing when it comes to planes and things. Surprise!</p>

<p>After catching a cab back home, I took a shower and brushed my teeth. Then I got into bed. Wow. That was such an amazing feeling. I cannot describe it. It had felt like I had wanted, nay, <em>needed</em> to lay in this bed for an eternity and was finally only getting to it. That was kind of the case. 40 hours in-transit is an eternity.</p>

<p>Now I&#8217;m back in Sydney and have just about adjusted back to the fact that it has sunshine at the correct times, ready to throw myself back into doing Real Work(tm) and whatever life can throw at me in Sydney.</p>

<p>America was fun and I&#8217;m already making plans to go back there again. But probably not this year, as <a href='http://rubyc.eu/speakers'>I've got a conference on in the Ukraine I have been invited to speak at</a> in November, and I would like to do a little bit of touring around my own country (Australia) in December. We&#8217;ll see.</p>]]></content>
 </entry>
 
 <entry>
   <title>Learning and Asking</title>
   <link href="http://ryanbigg.com/2011/09/learning-and-asking"/>
   <updated>2011-09-07T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2011/09/learning-and-asking</id>
   <content type="html"><![CDATA[<p>Today, I read <a href='http://495west.com/post/9885249988/the-wrong-question-i-want-to-learn-to-code-what?73331330'>this post</a> which discusses what the right question alternative to &#8220;I want to learn to code, what should I do?&#8221;. This post begins with this claim:</p>

<blockquote>
<p>If you want to learn to code and build stuff and you&#8217;re starting by asking someone else what you should do, you&#8217;re already thinking about it the wrong way.</p>
</blockquote>

<p>I think differently to this person. I think that you should be asking people what you&#8217;re doing, but not necessarily just anybody. For instance, you would not ask your grandmother what the latest and greatest changes are in Rails 3.1. You should do some research in the programming language you want to learn and ask <em>those</em> people. IRC channels, Stack Overflow, hell, even find the emails from people in the community and contact them directly. But please do this last part politely and with regard that those people are doing other things as well.</p>

<p>Jared&#8217;s post continues on by recommending to Google things:</p>

<blockquote>
<p>Go to Google and start asking questions. You want to make a webpage? Ask. You want to know what the different coding languages are and which you should learn? Ask.</p>
</blockquote>

<p>Again, I &#8220;think differently&#8221;. Going to Google and entering &#8220;Learn [programming language]&#8221; will give you <em>okay</em> results, but they won&#8217;t be the <em>best</em> results you can get. This is what the people in the community will be able to tell you better than any search engine that is catering for the masses. For instance, the search engine doesn&#8217;t know that you&#8217;ve got experience with another language, and so isn&#8217;t catering for that. If you tell <em>real, knowledgable people</em> this, they&#8217;ll probably recommend something different than if you were, say, a complete newbie to computer programming.</p>

<p>In the first and possibly also for the second case, for Ruby, I would recommend <a href='http://manning.com/black2'>The Well-Grounded Rubyist</a> by David A. Black. It&#8217;s a book that teaches you Ruby from the ground-up. Most <em>definitely</em> in the second case I would recommend <a href='http://pine.fm/LearnToProgram/'>Learn to Program</a> by Chris Pine. <em>If you read both these books you will gain a solid understanding of Ruby</em>. Promise!</p>

<p>Once you&#8217;ve got this basic understanding, then you will know what terms to Google for. Googling right from the beginning, from knowing <em>nothing</em> is akin to googling &#8220;Red lump on leg&#8221; and expecting it to diagnose your problem. Chances are Google&#8217;s going to inevitably lead to a cancer diagnosis. But, if you go speak to an expert in this particular field, like a dermatologist or a doctor at a clinic, they&#8217;re going to give you <em>so much better information</em>.</p>

<p>Please, do not Google to learn a language. The way to learn a language is to get your hands on as much reading material / exercises / screencasts that you can, follow the bouncing ball with them and then finally when you feel comfortable, go out and experiment on your own projects. If you break something, so what? Experiment some more and see if you can fix it. Push the boundaries of your knowledge and never, ever be afraid to be wrong, or even to admit it. Then, and only then, when you&#8217;re <em>completely</em> stuck on something, ask somebody who knows the language.</p>

<p>Also: ever see a cool feature in an application somewhere? Figure out how it works. Pull it apart and investigate that. You <em>will</em> learn something.</p>

<p>You will only get better with practice and experimentation <em>with the language</em> you want to learn, not basing your knowledge off what Google (of all things!) tells you.</p>]]></content>
 </entry>
 
 <entry>
   <title>With Rails 3.1, comes great things</title>
   <link href="http://ryanbigg.com/2011/09/with-rails-3-1-comes-great-things"/>
   <updated>2011-09-04T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2011/09/with-rails-3-1-comes-great-things</id>
   <content type="html"><![CDATA[<p>This is the first blog post I&#8217;ve put up here in nearly three months. Considering that I&#8217;ve posted <em>at least once a month</em> since May &#8216;07, that&#8217;s some sort of record. Since I last posted, a lot has happened. In no particular order&#8230;</p>

<p>I bought a real bicycle. I blame it for my lack of blog posts and increased fitness levels. I am a nerd, goddammit. I&#8217;ve been using to explore Sydney and heckle pedestrians more now that I am not spending weekends writing <em>all the time</em>. In similar news, I&#8217;ve lived in Sydney for a year and a half and today was the first day I went to Wentworth Falls. A++, would hike again.</p>

<p>Then there was all this:</p>

<p><a href='http://weblog.rubyonrails.org/2011/8/31/rails-3-1-0-has-been-released'>Rails 3.1 was released</a> <em>on schedule</em>. Amazing work by amazing dudes. This means that&#8230;</p>

<p>I have finished writing <a href='http://manning.com/katz'>Rails 3 in Action</a> and there will be dead trees copies at StrangeLoop conference in St Louis, where I will be in attendance and signing it. (God, that sounds so pretentious.) I honestly don&#8217;t think I&#8217;ve heard someone say &#8220;this is total bollocks&#8221; (or something along those lines), but perhaps I am selective of hearing.</p>

<p>You will get your dead-tree copies also when Manning can ship them out. I don&#8217;t have any information on these dates at the moment. Updates to the PDF coming shortly, after the typesetters have performed their magic.</p>

<p>I helped out with the now-fantastic <a href='http://guides.rubyonrails.org/asset_pipeline.html'>Official Asset Pipeline</a> guide that explains the ins-and-outs of the Asset Pipeline with Rails 3.1. Thanks to Mohammad Typaldos, Richard Hulse, and the other people who have worked on it since we first published it on this site.</p>

<p>I begun work on <a href='http://github.com/radar/muse'>a documentation tool called "Muse"</a>, the idea <em>and</em> name I &#8216;borrowed&#8217; from my co-author, Yehuda Katz and this lets me do things like <a href='https://github.com/radar/guides/blob/master/sprockets/sprockets.markdown'>an internals guide to Sprockets</a>. Muse parses <a href='https://raw.github.com/radar/guides/master/sprockets/sprockets.muse'>the source file</a> for this guide, validates that it contains correct code examples and then renders it into lovely Markdown.</p>

<p>Ideally, I would like this to work with the Rails guides too eventually, so we could test that its content is still relevant.</p>

<p>Now that the book is done, I will be focussing my efforts on completing that internals guide whenever I find myself with too much spare time and don&#8217;t feel like going for a ride or hiking in the mountains.</p>]]></content>
 </entry>
 
 <entry>
   <title>Sprocket asset tags internals</title>
   <link href="http://ryanbigg.com/2011/06/sprocket-asset-tags-internals"/>
   <updated>2011-06-19T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2011/06/sprocket-asset-tags-internals</id>
   <content type="html"><![CDATA[<p>Yesterday&#8217;s post and twitter bitching caught the eye of our <a href='http://twitter.com/dhh'>fearless leader</a> who basically claimed <a href='https://twitter.com/#!/dhh/status/81987522766450688'>that I've not made documentation patches recently</a>. I responded with a small reminder that I&#8217;ve done <a href='https://twitter.com/ryanbigg/status/81988004947828736'>some documentation work</a> and went a step further and begun an <a href='http://ryanbigg.com/guides/asset_pipeline.html'>Asset Pipeline Guide</a> because I could. I could have pulled the whole &#8220;Don&#8217;t you know who I am?!!&#8221; faux-lebrity deal, but I thought I would be humble. Append &#8220;for a change&#8221; to the end of the previous sentence, if you wish.</p>

<p>That was incredibly fun. We should do it again some time. Have your people call my people, we&#8217;ll do lunch.</p>

<p>Before all that went down, I created a short (by my standards, anyway) <a href='https://gist.github.com/1032696'>Gist about how the `Sprockets::Railtie` class is currently set up in Rails</a>. This little Gist begun as short note taking for myself and I thought that maybe other people would find the information helpful, so I formatted it all pretty like.</p>

<p>After the <em>battle of the egos</em> took place, I delved a little deeper into the Sprockets rabbit hole, got defeated by some gnarly code and thought &#8220;fuck it dude, let&#8217;s go <s>bowling</s> to sleep&#8221;. I awoke this morning and delved a little deeper into exactly how all of this magic happens.</p>

<p>This guide now lives as the <a href='https://github.com/radar/guides/blob/master/sprockets.md'>Sprockets Internals Guide</a> on my <a href='http://github.com/radar/guides'>guides</a> repository. Check out both of them. You may learn something.</p>]]></content>
 </entry>
 
 <entry>
   <title>The Asset Pipeline</title>
   <link href="http://ryanbigg.com/2011/06/the-asset-pipeline"/>
   <updated>2011-06-18T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2011/06/the-asset-pipeline</id>
   <content type="html"><![CDATA[<p>Today I begun writing the section that I&#8217;ve deemed should be at the beginning of Appendix B (&#8220;Tidbits&#8221;) of Rails 3 in Action. It&#8217;s about the asset pipeline stuff that has been brought into Rails 3.1 with the aid of the Sprockets gem. I&#8217;ve decided to put it at the beginning of this Appendix as it&#8217;s probably the most interesting thing in the entire appendix and it hasn&#8217;t been written about in this much detail (at least, from what I&#8217;ve seen) before.</p>

<p>So far, it&#8217;s looking good. I cover things like:</p>

<ul>
<li><code>image_tag</code> generating a URL such as <code>/assets/image.png</code> which actually is served through Sprockets.</li>

<li>Assets can be at either <code>app/assets</code> or <code>vendor/assets</code>. No mention of <code>lib/assets</code> because I don&#8217;t think it&#8217;s sensible to put assets in <code>lib</code>. Maybe someone can explain that one to me.</li>

<li>By inheriting from <code>Rails::Engine</code> within a gem, that gem&#8217;s <code>app/assets</code> subdirectories are now added to the load path for Sprockets. When Sprockets goes looking for an asset, it will look there, providing the directories exist. Also, <code>vendor/assets</code>, ditto.</li>

<li>Sprockets directives. Not even the <em>Sprockets README, Wiki or <a href='http://getsprockets.org/'>site</a></em> cover this. You would have thought it&#8217;s kind of a, you know, <em>core behaviour that people would wet their pants over</em>, but obviously not given the lack of documentation.</li>

<li>Pre-compiled Sass, SCSS and CoffeeScript and how their relative gems (<code>sass-rails</code> and <code>coffeescript</code>) aid in that purpose, and how they&#8217;re served through Sprockets.</li>
</ul>

<p>But the final thing that I want to cover is how it all works in the <code>production</code> environment. From what I can see, assets are given an MD5 identifier (<code>application.css</code> becomes <code>application-23daf...</code>) for some mysterious purpose and they are cached <em>somewhere</em>. So I went looking for information that explains it. Surely Sam Stephenson or <em>someone</em> else who&#8217;s worked on this <em>amazing new core feature</em> for Rails 3.1 has written <em>something</em> about it.</p>

<p>Right?</p>

<p>No. This is a feature that has been packed into Rails 3.1 with no rationale other than hearsay to back it up. The Rails Core team deemed it would be a fabulous idea to have an asset manager within Rails 3.1, and boom, there it was. I&#8217;m sure they would have gone with Jammit if only it had been created by a 37signals employee. Oh well, at least Sprockets is.</p>

<p>Jammit is exceptionally well documented and has a group of people who are already using it. Again, this whole <em>rationale</em> business comes into play. There&#8217;s no clearly laid out rationale why the Rails Core Team chose to go with Sprockets rather than Jammit. We can circulate rumours and hearsay (like the one above about it being made by a 37signals employee being the reason it was picked) all we like, but it&#8217;s not until there&#8217;s an actual official piece of documentation that says &#8220;this is why things are the way they are&#8221; that we are (usually) satisfied.</p>

<p><a href='http://gembundler.org'>Bundler&#8217;s site</a> is a <strong>fantastic</strong> example of great documentation. Hell, it even provides a <a href='http://gembundler.com/rationale.html'>rationale</a> that explains how it works and why it works in pretty easy-to-understand terms.</p>

<p><em>[breath]</em></p>

<p>So where do people who want to know about Sprockets go to learn about the rationale of why it is bundled with Rails 3.1? How about the location of any documentation about how to disable it or configure it any way? Well, that was <a href='https://github.com/lifo/docrails/commit/0fd52bb6c79f20b8dbd5c8afb774ef1dae155fc4'>added by yours truly</a> earlier today. I also wrote up <a href='https://gist.github.com/1032696'>some notes</a> just so I could understand how the <code>Sprockets::Railtie</code> works for myself. Thought others may find it useful too.</p>

<p>Not documenting things makes it <em>incredibly</em> hard for anybody else to understand what the hell you&#8217;re trying to do and provides no justification for anybody viewing your project as to why they should use it. Any single person can throw code up online. It takes someone special to make people understand why it&#8217;s there and why they should <em>want</em> to use it.</p>

<p>I think it&#8217;s great that there&#8217;s new features being added to Rails and old ones being reworked. But, I think it&#8217;s absolute crap that there&#8217;s no go-to source of explaining why these things exist and how they make our lives better. <em>I</em> certainly understand how Sprockets makes my life easier, but someone else <em>might not</em>. I don&#8217;t want to have to explain to those people every single time they ask &#8220;Why should I use sprockets?&#8221; my reason for using it. I want to be able to say &#8220;I read this guide <span>link</span> and it really helped me understand it. Perhaps you&#8217;ll understand too?&#8221;</p>

<p>It&#8217;s just so incredibly hard trying to explain something in the book when there&#8217;s just <em>no</em> reference material to go by or anybody else to ask.</p>

<p>For without this documentation / reference material, the people in search of it write ranty blog posts. And we don&#8217;t want that.</p>]]></content>
 </entry>
 
 <entry>
   <title>Mac OS X, Ruby, RVM, Rails and You</title>
   <link href="http://ryanbigg.com/2011/06/mac-os-x-ruby-rvm-rails-and-you"/>
   <updated>2011-06-06T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2011/06/mac-os-x-ruby-rvm-rails-and-you</id>
   <content type="html"><![CDATA[<p>
  <strong>This beginner's guide will set up with Ruby 1.9.2, RVM and Rails 3.0.7 and is specifically written for a <em>development</em> environment on Mac OS X, but will probably work on many other operating systems with slight modifications.</strong>
</p><p>This guide is <em>almost</em> a copy of my older <a href='http://ryanbigg.com/2010/12/ubuntu-ruby-rvm-rails-and-you/'>Ubuntu, Ruby, RVM, Rails and You</a> guide, but it's written primarily for Mac OS X.</p><p>
  If you're looking for a quick-n-dirty way, then try <a href='https://github.com/wayneeseguin/rvm/raw/master/contrib/bootstrap_rails_environment'>Wayne E. Seguin's rails_bootstrap_script</a> which probably gets a version of Rails working for you, albeit with 1.8.7 rather than 1.9.2.
</p>
<p>This guide will go through installing the <a href='http://rvm.beginrescueend.com'>RVM (Ruby Version Manager)</a>, then a version of Ruby (1.9.2), then <a href='http://rubyonrails.org'>Rails</a> and finally <a href='http://gembundler.com'>Bundler</a>.</p>

<p>By the end of this guide, you will have these things installed and have some very, very easy ways to manage gem dependencies for your different applications / libraries, as well as having multiple Ruby versions installed and usable all at once.</p>

<p>We assume you have <code>sudo</code> access to your machine, and that you have an understanding of the basic concepts of Ruby, such as &#8220;What is Rubygems?&#8221; and more importantly &#8220;How do I turn this computer-thing on?&#8221;. This knowledge can be garnered by reading the first chapter of <a href='http://manning.com/black2'>any Ruby book</a>.</p>
<h3>Housekeeping</h3>
<p>The first thing we&#8217;re going to need to install is XCode, which can be found on the second DVD of your install disks or, alternatively, on the Mac App Store for $5. It&#8217;s a big download, so you may want to find the DVDs again. We&#8217;re going to need this for the build tools that it installs to install Ruby and other packages.</p>

<p>First of all, we&#8217;re going to need to install some package management script so that we can install packages such as Git, MySQL and other things exceptionally easy. The best package management system on Mac OS X for this is <a href='https://github.com/mxcl/homebrew'>homebrew</a>. We can install this by using this command:</p>

<pre><code>ruby -e &quot;$(curl -fsSL https://gist.github.com/raw/323731/install_homebrew.rb)&quot;</code></pre>

<p>Once it&#8217;s installed, we&#8217;ll be able to install the package for <a href='http://git-scm.org'>Git</a> by using a simple command like this:</p>

<pre><code>brew install git</code></pre>

<p>We&#8217;ll need Git to install RVM as it clones it from <a href='http://github.com/wayneeseguin/rvm'>RVM's GitHub repository</a>.</p>
<h3>RVM</h3>
<p>RVM is a <a href='http://rvm.beginrescueend.com'>Ruby Version Manager</a> created by Wayne E. Seguin and is extremely helpful for installing and managing many different versions of Ruby all at once. Sometimes you could be working on a project that requires an older (1.8.7) version of Ruby but also need a new version (1.9.2) for one of your newer projects. This is a problem that RVM solves beautifully.</p>

<p>Another situation could be that you want to have different sets of gems on the same version of Ruby but don&#8217;t want to have to do deal with Gem Conflict Hell. RVM has <a href='http://rvm.beginrescueend.com/gemsets/basics/'>gemsets</a> for this. <strong>This is a feature you wouldn't have if you used the packaged Ruby</strong>.</p>

<p>We&#8217;re going to use it to install only one version of Ruby, but we can <a href='http://rvm.beginrescueend.com'>consult the documentation</a> if we want to install a different version of Ruby.</p>

<p>With <code>git</code> and <code>curl</code> installed we&#8217;ll be able to install RVM with this command:</p>

<pre><code>bash &lt; &lt;(curl -s https://rvm.beginrescueend.com/install/rvm)</code></pre>

<p>The beautiful part of this is that it installs Ruby to our home directory, providing a sandboxed environment just for us.</p>

<p>Once that&#8217;s done, we&#8217;re going to need to add a line to <code>~/.bashrc</code> file (the file responsible for setting up our bash session) which will load RVM:</p>

<pre><code>echo &#39;[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;&amp; source &quot;$HOME/.rvm/scripts/rvm&quot;&#39; &gt;&gt; ~/.bash_profile </code></pre>

<p>Then we&#8217;ll need to reload the <code>~/.bashrc</code> file which we can do with this small command:</p>

<pre><code>. ~/.bash_profile</code></pre>

<p>If we run <code>rvm notes</code> we&#8217;ll be told the certain things that we need to have installed to install the different versions of Ruby:</p>

<pre><code>Notes for Darwin ( Mac OS X )
    For Snow Leopard be sure to have Xcode Tools Version 3.2.1 (1613) or later
    You should download the latest Xcode tools from developer.apple.com.
      (This is since the dvd install for Snow Leopard contained bugs).

    If you intend on installing MacRuby you must install LLVM first.
    If you intend on installing JRuby you must install the JDK.
    If you intend on installing IronRuby you must install Mono (version 2.6 or greater is recommended).</code></pre>

<p>We&#8217;re not going to be using MacRuby, JRuby or IronRuby in this guide so we won&#8217;t need to install any of those things. If we have XCode installed we will have everything we need to install Ruby.</p>

<p>Now our Ruby lives will be as painless as possible.</p>
<h3>Ruby</h3>
<p>With RVM and XCode installed we can install Ruby 1.9.2:</p>

<pre><code>rvm install 1.9.2</code></pre>

<p>This command will take a couple of minutes, so grab your $DRINKOFCHOICE and go outside or something. Once it&#8217;s done, we&#8217;ll have Ruby 1.9.2 installed. To begin using it we can use this lovely command:</p>

<pre><code>rvm use 1.9.2</code></pre>

<p>Are we using 1.9.2? You betcha:</p>

<pre><code>ruby -v
ruby 1.9.2p136 (2010-12-25 revision 30365) [x86_64-linux]</code></pre>

<p>Or, even better, would be to make this the <em>default</em> for our user! Oooh, yes!</p>

<pre><code>rvm --default use 1.9.2</code></pre>

<p>Now whenever we open a new bash session for this user we&#8217;ll have Ruby available for us to use! Yay!</p>
<h3>Rails</h3>
<p>Now that RVM and a version of Ruby is installed, we can install Rails. Because RVM is installed to our home directory, we don&#8217;t need to use that nasty <code>sudo</code> to install things; we&#8217;ve got write-access to our own things! To install the Rails gem we&#8217;ll run this command:</p>

<pre><code>gem install rails</code></pre>

<p>This will install the <code>rails</code> gem and the other 22 gems that it and its dependencies depend on, including Bundler.</p>
<h3>MySQL</h3>
<p>If you&#8217;re planning on using the <code>mysql2</code> gem for your application then you&#8217;ll want to install the <code>mysql</code> Homebrew package using this command:</p>

<pre><code>brew install mysql</code></pre>

<p>If you&#8217;re using Rails 3.0 then you&#8217;ll need to specify a 0.2.x version of the <code>mysql2</code> gem in your Gemfile:</p>

<pre><code>gem &#39;mysql2&#39;, &#39;~&gt; 0.2.7&#39;</code></pre>

<p>If you&#8217;re using Rails 3.1, then this line will get it:</p>

<pre><code>gem &#39;mysql2&#39;</code></pre>
<h3>PostgreSQL</h3>
<p>If you want to use PostgreSQL instead of MySQL:</p>

<pre><code>brew install postgresql</code></pre>

<p>Then in the application&#8217;s <code>Gemfile</code> use the <code>pg</code> gem:</p>

<pre><code>gem &#39;pg&#39;</code></pre>
<h3>Fin.</h3>
<p>And that&#8217;s it! Now you&#8217;ve got a Ruby environment you can use to write your (first?) Rails application in with such minimal effort. A good read after this would be the <a href='http://guides.rubyonrails.org'>official guides for Ruby on Rails</a>. Or perhaps the documentation on the <a href='http://rvm.beginrescueend.com'>RVM site</a> which goes into using things such as <a href='http://rvm.beginrescueend.com/gemsets/basics/'>gemsets</a> and the exceptionally helpful <a href='http://rvm.beginrescueend.com/workflow/rvmrc/#project'>per-project .rvmrc file</a>. A quick way to generate an <code>.rvmrc</code> file is to run a command like this inside the project</p>

<pre><code>rvm use 1.9.2@rails3 --rvmrc</code></pre>

<p>RVM is such a powerful tool and comes in handy for day-to-day Ruby development. Use it, and not the packages from apt to live a life of development luxury.</p>]]></content>
 </entry>
 
 <entry>
   <title>A potential use for asset pipelining</title>
   <link href="http://ryanbigg.com/2011/06/a-potential-use-for-asset-pipelining"/>
   <updated>2011-06-01T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2011/06/a-potential-use-for-asset-pipelining</id>
   <content type="html"><![CDATA[<p>So I&#8217;ve been thinking a lot recently about the changes in Rails 3.1, particularly the asset pipelining stuff, engines and how magical precisely gems are. I&#8217;m combining these last two into a <a href='http://github.com/radar/forem'>kick-ass forum engine for Rails 3.1</a> that you may have heard about already. Its name is a terrible pun and I am proud of it. I do like puns.</p>

<p>Anyway, asset pipelining! So I wanted to add theming support to forem because it&#8217;s butt-ugly right now and I can&#8217;t design for crap. Have you seen this blog? I wanted to make theming so dead-simple for forem that people just need to put one or two lines in their application and <em>BLAMMO</em> it would work.</p>

<p>I have accomplished this goal tonight, in what was probably about 10 minutes of thinking, experimenting and saying &#8220;wow, I can&#8217;t believe it works&#8221; when it actually worked. To make theming work on forem, it&#8217;s as simple as putting this line in your <code>Gemfile</code> (<em>after</em> the <code>forem</code> gem, as it needs to be loaded first):</p>

<pre><code>gem &#39;forem-theme-base&#39;, :git =&gt; &quot;git://github.com/radar/forem-theme-base&quot;</code></pre>

<p>This gem is actually its own Rails engine, which means that it gets all the goodies that a Rails engine is bestowed, including the automatic hooks to the asset pipelining. This gem also contains this line:</p>

<pre><code>Forem::Engine.theme = :base</code></pre>

<p>This (obviously) tells forem what theme to use, and can be overriden at your wish if you had multiple themes. I am considering having a settings panel for this in the backend.</p>

<p>To actually style the forum you&#8217;ll need to put this line in the layout that forem uses:</p>

<pre><code>&lt;%= forum_theme_tag %&gt;</code></pre>

<p>I would make this happen automatically, but other people may wish to apply their site&#8217;s styles to the forum system without having to create another gem, and so I leave this as optional. This little tag generates a <code>stylesheet_link_tag</code> like this:</p>

<pre><code>&lt;%= stylesheet_link_tag &quot;assets/forem/base/style.css&quot; %&gt;</code></pre>

<p>Rails then will know where to serve this from because <code>forem-theme-base</code> is an engine.</p>

<p>Dead simple, and utterly amazing. Rails 3.1 is awesome.</p>]]></content>
 </entry>
 
 <entry>
   <title>The Richest</title>
   <link href="http://ryanbigg.com/2011/05/the-richest"/>
   <updated>2011-05-23T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2011/05/the-richest</id>
   <content type="html"><![CDATA[<p>Long, long ago in this very galaxy I used to write fiction. If you dig long enough and hard enough on the internet you&#8217;ll find it. I won&#8217;t link to it here because, to be honest, I am embarrassed by it for no particular reason. Some said it was good, but I think they were just being kind.</p>

<p>On the last day of Railsconf, a group of us went out to dinner. Somehow, the topic of &#8220;The Richest Man Alive&#8221; came up and basically the entire evening was spent coming up with hilarious fictional scenarios and repeating the best of them where the Rich guy is asked by his butler &#8220;Sherry?&#8221; to which he replies &#8220;Rather!&#8221;, in stereotypical rich-guy fashion.</p>

<p>We had some spare time at the airport on Friday morning and I had this scenario that kept playing in my head and getting more intricate and so I wrote it down on a notepad I keep in my bag with the intention of posting it <em>somewhere</em> on the internet. Little did I know then that I would come up with the brilliant idea of posting it on my main blog. This isn&#8217;t my idea, but rather an inspired idea from the awesome conversation we had Thursday night. Thanks guys, you know who you are.</p>

<p>So without further ado, I introduce you to <em>The Richest Man Alive</em>:</p>
<hr />
<p>Markus, the cleaner for Lord Nelson&#8217;s third pool, has just been found floating dead in the pool he was supposed to be cleaning.</p>

<p>Lord Nelson sits in his favourite chair by the fire that his stereotypically named butler, Alfred, has beautifully crafted. The butler stands to the right of the chair, dressed immaculately as can be expected by butlers. They discuss the death of Markus.</p>

<p>&#8220;Sherry?&#8221;, Alfred asked.</p>

<p>&#8220;Rather.&#8221;, Lord Nelson replies with his thick British-monarch-but-not accent.</p>

<p>Alfred pours a glass of sherry and hands it to Lord Nelson, who then sips it.</p>

<p>&#8220;It&#8217;s quite atrocious, really.&#8221;, Lord Nelson says.</p>

<p>&#8220;The sherry?&#8221;, Alfred asks, like a dog who&#8217;s being told off by his owner. &#8220;My deepest&#8230;&#8221;</p>

<p>&#8220;No no, Alfred, about the third pool. The cleaning lad floating in it?&#8221;</p>

<p>&#8220;Quite, sir.&#8221;</p>

<p>&#8220;When did they find him?&#8221;</p>

<p>&#8220;Yesterday afternoon, while you were golfing on the eastern course, sir.&#8221;</p>

<p>&#8220;Tragic, really. We&#8217;ll never get the smell out.&#8221;</p>

<p>&#8220;I will endeavour, sir.&#8221;</p>

<p>&#8220;That would be grand, Alfred. Please do see to his arrangements I believe he was in the 4th bedroom on the 5th floor.&#8221;</p>

<p>&#8220;Yes sir, you are correct. I will attend to those right away, sir.&#8221;</p>

<p>&#8220;Where the devil do we find one as &#8230; talented as Markus?&#8221;</p>

<p>&#8220;I do not have a clue sir, although I suspect we may be able to find one and bring him in shortly.&#8221;</p>

<p>&#8220;I am awfully fond of that idea, Alfred, but do you not remember the fuss Markus put up for the first week?&#8221;</p>

<p>&#8220;Quite, sir. He complained quite emotionally about his treatment by Boris.&#8221;</p>

<p>&#8220;Yes, Alfred.&#8221;, Lord Nelson replies, sipping his expensive sherry.</p>

<p>&#8220;Being pulled off the street and pushed into a limousine would do do that though.&#8221;</p>

<p>&#8220;I agree, but only in part. Boris does need to learn &#8216;the soft touch&#8217;&#8221;</p>

<p>&#8220;Rather, sir. I remember my &#8230; abduction, fondly.&#8221;</p>

<p>&#8220;Money fills that void, Alfred.&#8221;</p>

<p>&#8220;Quite, sir. Quite. Margaret is exceptionally glad to receive your annual letters informing her of my continued survival and exceptional service.&#8221;</p>

<p>&#8220;Indeed.&#8221;</p>

<p>&#8220;How should I deal with this, sir?&#8221;</p>

<p>&#8220;Hmm?&#8221;</p>

<p>&#8220;The body, in the third pool?&#8221;</p>

<p>&#8220;Ahh, yes. Get Boris to remove it. I hear he has &#8230; experience with these matters.&#8221;</p>

<p>&#8220;KGB, sir.&#8221;</p>

<p>&#8220;Yes, yes. Good lad. Do find a replacement, Alfred.&#8221;</p>

<p>&#8220;For Boris?&#8221;, Alfred asks hopefully.</p>

<p>&#8220;No, not yet. Just the pool boy. God rest his soul.&#8221;</p>

<p>&#8220;Will that be all sir?&#8221;</p>

<p>&#8220;Yes, Alfred.&#8221;</p>

<p>&#8220;Thank you sir, I will deal with these matters right away.&#8221;</p>

<p>Alfred leaves the room, while Lord Nelson finishes his sherry.</p>]]></content>
 </entry>
 
 <entry>
   <title>Whodunit: Devise, OmniAuth, OAuth or GitHub?</title>
   <link href="http://ryanbigg.com/2011/04/whodunit-devise-omniauth-oauth-or-github"/>
   <updated>2011-04-11T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2011/04/whodunit-devise-omniauth-oauth-or-github</id>
   <content type="html"><![CDATA[<p>(If it wasn&#8217;t obvious enough: my previous blog post about Rails 3.1 in Action is an April Fools joke. If Rails 3.1 is released before Rails 3 in Action goes to print, Rails 3 in Action will most likely contain the 3.1 updates necessary)</p>

<p>I&#8217;m currently writing what is the final chapter in Rails 3 in Action and I&#8217;m pretty excited about it. It&#8217;s the &#8220;Alternative Authentication&#8221; chapter, Chapter 14. It&#8217;s not to say there are 14 chapters in the book&#8230; there aren&#8217;t. There&#8217;s seventeen chapters two, maybe three appendicies. This happens to be the last chapter I have to work on and its number is 14.</p>

<p>When I begun writing the book back near the end of April last year I sketched out the idea of this chapter thinking it would be a good thing to show people because a lot of people seem to struggle (myself included) in setting up alternative means of authentication using OAuth (and OpenID, etc.) providers. I personally had no idea what I was going to do write in it at that point in time, but that&#8217;s how I&#8217;ve been writing the book thus far and it&#8217;s turned out pretty alright I hear.</p>

<p>Then a couple of months ago, <a href='http://github.com/intridea/omniauth'>OmniAuth</a> came onto the scene. My god, it was like Christmas came early. It claimed to simplify the authentication process of alternative services down to its most basic forms. I distinctly remembering trying it out almost immediately and staring in starry-eyed wonder at the process as it worked seamlessly with Twitter and GitHub. That was back in November and I had other chapters I was working on then, like Chapter 11.</p>

<p>With the final chapters of the book I&#8217;ve adopted a &#8220;work on whatever you feel like&#8221; stance with them, as they aren&#8217;t required to be done in any particular order. For example, I did the &#8220;Engines&#8221; chapter (16) before I did the chapter on &#8220;Basic performance enhancements&#8221; (15) and &#8220;Rack applications&#8221; (17). It just so happened that Chapter 14 got left to last.</p>

<p>So I worked on it beginning the middle of last week, implementing basic Twitter authentication and writing a pretty decent first draft of it over the next two days. Then on Friday I accidentally deleted my work for the chapter up to about the 20th line in the document (from somewhere around the 350 range) when I ran one of my publishing scripts over it. I had no backups, and it wasn&#8217;t version controlled. I felt like an idiot.</p>

<p>Over this past weekend I&#8217;ve re-written all of what I did with Twitter on the Friday night and Saturday (which was a poor day of writing, was too distractable). Sunday morning I revised the section and Sunday afternoon I begun in my attempt to use GitHub. That&#8217;s when things stopped flowing.</p>

<p>When I write the book I attempt things in the ticketee application first and then just copy over the working code samples from that into the book. It&#8217;s a little bit of a laborious process, but it&#8217;s worked so far (I know there&#8217;s better ways, I just don&#8217;t have the time to do them). When I attempted GitHub authentication using Devise 1.2.1&#8217;s OmniAuth (0.2.1) authentication support it told me &#8220;Invalid credentials&#8221;.</p>

<p>I was incredulous. How could I stuff up something so basic when it worked so well with Twitter? I spent the afternoon calling Devise nasty names both out loud and on Twitter and went to bed early, defeated. I could not for the life of me figure this out.</p>

<p>I awoke after a terrible night&#8217;s sleep (the kind you have when the problem is right there and you know the solution is there, but isn&#8217;t). I dreamed mostly of code. I awoke feeling strangely refreshed at 6am and did the usual morning things before attempting the problem again.</p>

<p>I made sure I had the absolute latest version of Devise and OmniAuth. I did.</p>

<p>I made sure I was able to create a new GitHub application and duplicate these conditions, both on Ticketee and on a brand new Rails application. I was able to do that too.</p>

<p>I was still utterly convinced it was something Devise was doing. I had pointed my finger squarely at it for the past 9 awake hours and why should I question my opinion then? I wanted to make extra sure, so I tried <em>another</em> brand new Rails 3 application but didn&#8217;t use Devise. I used straight OmniAuth (thanks to <a href='http://railscasts.com/episodes/241-simple-omniauth'>Ryan Bates' superb Railscast on it</a>) and it still didn&#8217;t work.</p>

<p>Blast! My prime suspect was no longer prime, nor a suspect! So it was something to do with OmniAuth then, perhaps. I found an application called <a href='http://github.com/markusproske/omniauth_pure'>`omniauth_pure`</a> which claimed to offer a basic example of OmniAuth authentication. I tried this and&#8230;</p>

<p>It worked! The damn thing worked. So what was different? Well, I noticed that they were using an older version of the oa-oauth gem (v0.2.0) where I was using v0.3.0. I suspected a problem had been generated between these two versions, and my finger was then pointed at OmniAuth as being the source of all my trouble.</p>

<p>I cloned <code>git://github.com/intridea/omniauth</code> into the <code>vendor/gems/omniauth</code> folder of my application, update the <code>Gemfile</code> accordingly, and tried it again and it was still broken. Ok, it still looked like an omniauth problem. So I did a <a href='https://gist.github.com/912916'>git bisect</a> (saviour!) and came up with a commit by none other than Michael Bleigh himself: <code>72b9b619bbc2a41b61ee4ec108bdfa4dc16838f9</code>.</p>

<p>Aha! This commit bumped the oauth2 dependency and, according to <code>git bisect</code>, that commit is to blame for my source of woe. But it&#8217;s not, because it&#8217;s innocently bumping a gem version up, it&#8217;s actually oauth2.</p>

<p>So my finger now switches for a second time to the oauth2 gem. I clone this into the <code>vendor/gems/oauth2</code> directory, update the <code>Gemfile</code> and do a git bisect on it. The <a href='https://gist.github.com/912926'>results</a> indicated a commit that I could blame for all my troubles.</p>
<a href='https://github.com/intridea/oauth2/commit/1dbfe18af997c45a69fdea29192f599f20d80879'>This commit.</a>
<p>It dutifully changes a small detail, the <code>@token_param</code> to be the <a href='http://tools.ietf.org/html/draft-ietf-oauth-v2-10#section-5.1.2'>OAuth2 draft 10 specified (in section 5.1.2)</a> &#8220;oauth_token&#8221; rather than &#8220;access_token&#8221;. This means that all providers who have updated to this draft specification are now supported by the oauth2 gem but those who have not, <em>like GitHub</em>, are left behind.</p>

<p>Ladies and gentleman, after my long story, let me present to you Exhibit A, direct from <a href='http://develop.github.com/p/oauth.html'>GitHub's OAuth documentation</a>:</p>
<img src='https://img.skitch.com/20110411-qn2ps6uckm4deq851ubydjtf71.png' />
<p>A keen eye, keener than my own, would notice here that the parameter is not called &#8220;oauth_token&#8221; as is being supplied by the oauth2 gem now as of the afore-mentioned commit, but rather it&#8217;s still called &#8220;access_token&#8221;.</p>

<p>I submit to you that GitHub&#8217;s OAuth 2 specification is broken, but the <a href='http://support.github.com/discussions/site/3398-your-oauth-implementation-is-broken-but-heres-a-fix'>fix is extremely easy</a> and only GitHub (or a hack to oauth2) can fix it.</p>

<p>That was quite a lot of frustration caused by that one small little detail. This was very fun to track down and the high I got from solving it was well worth it. It&#8217;s one of the things I enjoy most as a programmer is solving a difficult bug.</p>
<strong>Update:</strong>
<p>The problem itself won&#8217;t be fixed until the OAuth2 specification solidifies or <code>oauth2</code> hacks around it to support different services calling this parameter by different names.</p>]]></content>
 </entry>
 
 <entry>
   <title>Rails 3.1 in Action</title>
   <link href="http://ryanbigg.com/2011/04/rails-3-1-in-action"/>
   <updated>2011-04-01T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2011/04/rails-3-1-in-action</id>
   <content type="html"><![CDATA[<h1>THIS WAS MY APRIL FOOLS JOKE FOR 2011. DO NOT TAKE THIS SERIOUSLY.</h1>
<p>I&#8217;m edging ever closer to finishing Rails 3 in Action with only 3 and a half chapters remaining (_Translations_, <em>Background Jobs</em>, <em>Alternative Authentication</em> and <em>Mounting Rack Applications</em> being the half). I&#8217;m hoping to knock them off on the next couple of weeks and then the book will be (besides the appendicies) content complete! Finally.</p>

<p>So I think now is a good time to announce my next book: tentatively called <em>Rails 3.1 in Action</em>. This book will contain the same content as Rails 3 in Action but will be specifically directed at people who are running Rails 3.1 rather than Rails 3.0 and so some of the content will be modified to accommodate these changes. The main changes of this will be the moving of the <em>Engines</em> and <em>Mounting Rack Applications</em> chapters from <em>Rails 3 in Action</em> into <em>Rails 3.1 in Action</em>, basically because Rails 3.0 doesn&#8217;t have the necessary features to accommodate the awesome things these chapters do, where Rails 3.1 does. Another change is the updating of Chapter 8 from using Prototype (eeew) to jQuery (yaaaay). If you have bought copies of these chapters for <em>Rails 3 in Action</em> we ask kindly that you return them (the chapters, you can keep the rest of the book) and wait until <em>Rails 3.1 in Action</em> comes out with the updated copies.</p>

<p>Manning, Yehuda, our reviewers and I have been talking about the best way to accommodate the readers who have 3.0 applications as well as 3.1 applications (soon enough, this will be the case) and we have decided the best way is to split it out into another book. Rather than have a <em>2nd edition</em> released so close to the first edition, we&#8217;re going to give this book another name to clearly differentiate it between the original (and quite clearly, the best) Rails 3 book.</p>

<p>The day that Rails 3.1 is released is the same day you can expect to be able to visit your nearest bookshop and purchase this new installment of the <em>Rails X in Action</em> series.</p>

<p>Thanks for your support, purchases, comments and praise so far. It really helps!</p>]]></content>
 </entry>
 
 <entry>
   <title>Railscamp NZ</title>
   <link href="http://ryanbigg.com/2011/03/railscamp-nz"/>
   <updated>2011-03-22T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2011/03/railscamp-nz</id>
   <content type="html"><![CDATA[<p>This weekend I was on the north island of New Zealand, counting sheep and attending the first Railscamp NZ. I&#8217;ve attended every Railscamp in AU since #2 and I&#8217;ve really enjoyed them and this one was no exception to that. Railscamps are just great all the time.</p>

<p>I&#8217;d like to first of all thank the people who attend the camp who make it a <em>Railscamp</em>, and most importantly the camp organisers Breccan McLeod-Lundy and Nahum Wild for their work on organising it, despite their workloads and/or natural disasters.</p>

<p>The camp site seems capable of fitting more people in than what we had the camp and I think due to our (hopefully) good standing with the people who ran the camp we should definitely continue to have the camp at this venue, if the organisers choose to run another camp.</p>

<p>This camp, I helped set up the server and network stuff on Friday night and then spent parts of the weekend investigating more of the behind-the-scenes workings of Git, learning how to use an SSH account to authorize pushes and pulls just like GitHub does, as well as post-receive hook logging of events such as branch creation and commit logging. I figured that it&#8217;s far enough away from what I&#8217;d usually be doing which is straight Rails and I really like working out how other people have set that kind of thing up. It&#8217;s just a great way to learn. If people want to take this and use it as a base for a fake GitHub next Railscamp, I wouldn&#8217;t be adverse to that idea at all.</p>

<p>I also did some work with Phil Arndt of RefineryCMS (not to be confused with RadiantCMS) fame on making <a href='http://github.com/radar/forem'>forem</a> a Refinery plugin. It&#8217;ll be cool to see where else this goes.</p>

<p>Finally, I wrote another section of the basic performance enhancements chapter over Saturday and Sunday night when I got time, as well as working with Breccan on patching the Rails scaffold controller to use a controller-level <code>respond_to</code> rather than a per-action <code>respond_to</code>. It&#8217;ll be interesting to see if that patch gets accepted into Rails or not. I think generating it with the <code>respond_to</code> at all is excessive and a scaffold should generate the most basic thing required to get going. XML doesn&#8217;t fall into that bracket.</p>

<p>Here&#8217;s a mind dump of other observations about the camp, in no particular sensible order because I&#8217;m much too tired to do any serious editorial work.</p>

<h3 id='transport'>Transport</h3>

<p>Transport to and from the venue was exceptionally easy. Tim McEwan, Gareth Stokes, Ivan Vanderbyl and I met Phil Arndt and David Jones from Christchurch in Wellington Airport then we got a shuttle directly to the train station which all up cost $40NZ. At Wellington&#8217;s train station there&#8217;s a grocery store where we picked up supplies (read: beer and cider) for the camp. Initially stunned by the prices of a 4 pack of cider, I did the conversion to AUD and found out it was actually cheaper. Phew.</p>

<p>The camp organisers had organised a coach to take us to the camp grounds and I&#8217;d say that most of the people who attended the camp opted for this option. The trip to the campsite (Kaitoke) was about an hour from the city (due to peak hour traffic) and I spent a lot of it talking to a guy called Arthur Gunn about various things.</p>

<p>A coach from a central transport hub is a brilliant idea. Previously, other camps have used cars to shuttle people around and I think that&#8217;s just as fine as well, but this camp we needed a coach due to the sheer number of out-of-country-ers.</p>

<h3 id='the_hall'>The Hall</h3>

<p>The derth of powerpoints could have lead to some issues. Perhaps future Railscamps could consider a venue that offers 3-phase power if they wish to have a higher capacity, as I think that we&#8217;d be flipping some fuses trying to run more computers than we had off that many powerpoints.</p>

<p>It was nice and toasty inside the hall at night, thanks to the bodies who occupied it as well as the computers which were cranked.</p>

<p>It wasn&#8217;t as serious a problem as I thought it may have been, but there were only two bins in the main hall (as far as I could see). This has become a problem with other Railscamps where the limited number of bins coupled with the general laziness of the attendees have caused them to overflow. We can increase the number of bins to fix this problem&#8230; but a better fix would be that if you see a full bin you take it out.</p>

<p>This camp we had two coffee machines which were, and I quote Tim McEwan, &#8220;so appropriate&#8221;. People were able to brew their coffee in the morning to recouperate from the excessive hangovers generated from the night before. The hangovers were generated courtesy of some kegs provided by Henry Collinridge, as well as the beer / alcohol that the campers themselves bought.</p>

<h3 id='network_infrastructure'>Network infrastructure</h3>

<p>The server wasn&#8217;t &#8220;railscamp ready&#8221; when it came to Railscamp, and ended up being one of the organiser&#8217;s laptops. The same organiser attempted to set up the gem server on a tiny notebook but it didn&#8217;t have enough RAM, and so had to use his beefier &#8220;man-sized&#8221; laptop.</p>

<p>I&#8217;d recommend that other camps have a dedicated server box with at least 8GB of RAM (the server at this camp had 376kb free, was swapping, but was scaling fine to 40 people). This way, you could run the gem server, Apache (or nginx, depending on your tastes) and a Rails app or two. This time we didn&#8217;t really have the server serving any serious files like last time as users had figured that out already.</p>

<p>Still on the subject of servers, I have to say: omg dnsmasq is awesome. That provided the DNS for the network just fine and is very easy to configure. Thanks to Ben Hoskings for giving the <em>#protip</em> on that one.</p>

<p>Having an Ubuntu dep mirror so that people running Ubuntu can install things would be extremely helpful. If there was an equally easy way to get the deps for port / homebrew then it would be beneficial to have those too. The Ubuntu deps would be beneficial for the server as well, as you may miss a package when setting up the server.</p>

<p>Oh, and it&#8217;d be good to have all the sources for the different Ruby versions so that people can use RVM successfully at the camp. On the topic of Ruby stuff, thanks to Julian Doherty for providing the files for that. A small caveat was that we didn&#8217;t get the source index file caching and so whenever somebody went to install a gem or bundle install it wasn&#8217;t as instant as it should have been, but it wasn&#8217;t really seriously a problem this camp. For bigger camps, it may be.</p>

<p>This is the second camp that I know of that ran the entire wireless network for the camp on an Airport Extreme. They&#8217;re great pieces of hardware that can handle the load and damn easy to configure. We also had two Airport Express units that we used to extend the network out to another building. It&#8217;ll be interesting to see if it can scale to the size of a large camp on the mainland.</p>

<h3 id='accommodation'>Accommodation</h3>

<p>This camp had the accommodation away from the main hall, which is usually beneficial because people stay up until the wee hours coding, talking and generally making noise. This time however, a lot of people went to bed earlier than I thought they would and so the hall was pretty quiet.</p>

<p>There&#8217;s bunk rooms behind and in the same building (but away from the hall) with beds for 6 people, and again I think we could have doubled the amount of people attending the camp and not filled them. In each bunk room there&#8217;s a toilet and a shower which (thankfully) were used by the attendees on a regular basis.</p>

<h3 id='food'>Food</h3>

<p>The food at this camp was fantastic. I had (and these are just the meatitarian options I can remember) Chicken Stir fry for dinner on Friday, wraps for lunch on Saturday and Sunday, Spaghetti Bolognese for dinner Saturday and a fillet of fish in coconut sauce with mixed vegetables on the side for dinner on Sunday night. The organisers said they had paid a little bit extra to get better food for this camp and I think this is just a requirement now. If there&#8217;s an option to get better food for a little bit more, do it. It&#8217;s so worth it.</p>

<h3 id='other_areas'>Other areas</h3>

<p>There was another building with a small room with room for about 40 people that was used for talks during the day and Werewolf at night. It was a shame that this room didn&#8217;t have a projector like usual, but I think we did just fine with the TV that was in the room. Downstairs from the room was a gymnasium with a full-sized basketball court that (I think) nobody from the camp used.</p>

<p>Further down the hill away from the hall there was a small island which contained a firepit and we had a campfire on Sunday night. What would a Railscamp be without a fire?</p>

<h3 id='talks'>Talks</h3>

<p>There were talks in the small room near the gym and they were well-organised up on a whiteboard at the front of the hall. These were on anything from Rails engines (me) to Vim, Coffeescript to how to be web scale. I prefer the talk format of Railscamp to that of a conference, as they&#8217;re not mandatory attendance. If I wanted to stay in the hall and hack on something, I could.</p>

<h3 id='werewolf'>Werewolf</h3>

<p>Werewolf was a great success as it is most camps. It&#8217;s just a great mainstay of the Railscamp &#8220;theme&#8221;, with old friendships being broken and new ones being forged. Lachlan Hardy had it out for a guy called Paul, often citing &#8220;FUCK PAUL!&#8221; as the reason to nominate Paul as one of the werewolves. Another favourite nominees of the players was the camp organiser Breccan. All in all, it was good to see a lot of people come out and play this.</p>

<p>My secret to learning the names of people at the camp is being the narrator of Werewolf or playing it.</p>

<p>We played it into the wee hours on all nights, with myself being the narrator for most games. We played the Hunter, Cupid and Witch cards to great success. The Witch is bloody interesting, as they can choose to resurrect who the werewolves killed or alternatively, to kill another person. Cupid&#8217;s less interesting, but the death-acting is Grade-A kind of stuff. I expect Leon to receive his Academy Award nomination any time soon.</p>

<p>The final game we placed an extra Seer card in the deck and then they acted as the <a href='http://www.brenbarn.net/werewolf/rules.html'>Fool</a>. One of the two seers is told possibly a wrong answer when they ask who the werewolves are. The narrator shouldn&#8217;t lie to the Fool all the time, as if the Fool is told that somebody&#8217;s a werewolf and then they&#8217;re killed by the wolves, it&#8217;s kinda obvious to the Fool that they are the Fool.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>There&#8217;s quite a lot you can get out of a Railscamp. I met a lot of people who I didn&#8217;t know or had only known through the intertubes, talked about RubyX, Rails 3 in Action and whatever else came up. It&#8217;s absolutely worth going to. The next one in the Oceanic region is going to be near Byron Bay in northern New South Wales in Australia at a place called Lake Ainsworth. <a href='http://railscamp9.eventbrite.com/'>You should come along!</a></p>]]></content>
 </entry>
 
 <entry>
   <title>Code doesn't protect against stupid</title>
   <link href="http://ryanbigg.com/2011/03/code-doesn-t-protect-against-stupid"/>
   <updated>2011-03-06T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2011/03/code-doesn-t-protect-against-stupid</id>
   <content type="html"><![CDATA[<p>Herein lies a tale of woe, heartache and eventual triumph over stupidity.</p>

<p>I&#8217;ve been developing <a href='http://github.com/radar/forem'>forum engine</a> for the past week or so as part of my research for the engines chapter on Rails 3 in Action. It&#8217;s been an interesting experience.</p>

<p>This afternoon, I was contacted by Adam McDonald who&#8217;s working with me on it as part of a learning exercise for him and free labour for myself. He asked questions about how to get the engine running so that he could see it and I told him to run <code>bundle exec rails s</code> and go to <code>http://localhost:3000/forem</code>. Only one of those two things worked. So I told him to instead just run the tests and I&#8217;d take a look at the issue later on, as I was completing Chapter 13 of the book.</p>

<p>So now (actually, just previous to this post) I remembered the issue and tried it myself. It was still broken! This was simply because we didn&#8217;t have a <code>root</code> route defined in the routes file, like <a href='https://github.com/radar/forem/commit/f0d9f261d1ad4af2350c5c074b4767761f467070'>this commit adds</a>. So I added one.</p>

<p>Then I saw <code>uninitialized constant Forem::ForumsController</code>.</p>

<p>WHAT?! How <em>dare</em> code be broken on my watch! The tests passed, so this code had absolutely no reason to be broken. I thought it may have been because the engine wasn&#8217;t loading the controllers in that special mode of <code>bundle exec rails s</code>. It turns out I was almost right.</p>

<p>So I got hacky and ended up doing a <code>require ENGINE_ROOT + &quot;app/controllers/forem/forums_controller&quot;</code> which just <em>didn&#8217;t</em> work. I checked that <code>ENGINE_ROOT + &quot;app/controllers/forem&quot;</code> was indeed the right path by using <code>File.expand_path</code> and then copy+pasting it to the command line and <code>cd</code>&#8216;ing into the directory. That god damned file was there.</p>

<p>A moment of swearing took place where I ranted in IRC and to Adam about the lack of documentation on engines making things impossible.</p>

<p>Then when I calmed down, I went back into the console and saw this.</p>

<p><img src='https://img.skitch.com/20110306-dgugwhpaij8h38fjqifxbg42se.png' alt='Only one l' /></p>

<p>The well-trained eye (not mine) would see quite immediately that <code>forums_controler.rb</code> is missing an l.</p>

<h3 id='so_why_did_this_work_in_the_first_place'>So why did this work in the first place?</h3>

<p>Oh my God. I was stunned. How could I be so stupid? I corrected it and sure enough the route worked. Major &#8220;oh durr&#8221; moment was had.</p>

<p>This has worked all this time because I&#8217;ve been running only the tests (<code>bundle exec rspec spec</code>, for the curious), which run in the <code>test</code> environment. This environment dutifully duplicates the <code>production</code> environment habit of loading all the files in <code>app/**/*</code>, regardless of the names. That way when requests are made to the application, it doesn&#8217;t need to go looking for the files containing the right classes; everything should (and is) loaded by that point.</p>

<p>When I run <code>bundle exec rails s</code>, Rails starts up in <code>development</code> mode instead! When we make a request to a route, Rails will go looking for the proper controller (in this case, <code>app/controllers/forem/forums_controller.rb</code>, with TWO l&#8217;s) and if it can&#8217;t find it then it will scream at you, claiming that you treated it wrong.</p>

<p>Well, that was a fun experience. I don&#8217;t think I&#8217;ll ever do that again and I&#8217;ll be checking the dark corners of my applications for this little furry beast.</p>]]></content>
 </entry>
 
 <entry>
   <title>When to Cuke</title>
   <link href="http://ryanbigg.com/2011/03/when-to-cuke"/>
   <updated>2011-03-03T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2011/03/when-to-cuke</id>
   <content type="html"><![CDATA[<p>I think <a href='http://github.com/aslakhellesoy/cucumber'>Cucumber</a> is great, but not great for everything. Many people (including myself) use it and swear by it. You get to write <em>features</em> in <em>English</em> (or other languages), man. It&#8217;s really awesome if you want to show these stories to people who you&#8217;re developing for as they can read it and understand it.</p>

<p>I personally feel, in some cases, Cucumber isn&#8217;t the right solution. If you&#8217;re developing something that has no non-Ruby savvy stakeholder, why would you write it in Cucumber? I personally don&#8217;t see the point. It overly complicates things.</p>

<p>Take this example: I want to create a feature for posting a new comment on a post. It would go like this:</p>

<pre><code>Feature: Comments
In order to tell the masses what&#39;s on my mind
As a user
I want to post comments on the site

Background:
  Given there is a post:
    | title        | text                         |
    | When to Cuke | I think Cucumber is great... |

Scenario: Creating a comment
  Given I am on the homepage
  When I follow &quot;When to Cuke&quot;
  And I fill in &quot;Text&quot; with &quot;I am posting a comment. Look at me go!&quot;
  And I press &quot;Post Comment&quot;
  Then I should see &quot;I am posting a comment.&quot; within &quot;#comments&quot;</code></pre>

<p>I&#8217;ve tried to keep it as simple as I can here, but it should demonstrate the point I am trying to make. The logic of how the &#8220;Given there is a post&#8221; step is defined something like this:</p>

<pre><code>Given /^there is a post:$/ do |table|
  hash = table.hashes.first
  @post = Post.create!(hash)
end</code></pre>

<p>Where&#8217;s it defined? Well, it could be anywhere. That&#8217;s the problem! Usually, I&#8217;d define this in a file at <code>features/step_definitions/post_steps.rb</code> because it deals with <code>Post</code> objects, but that&#8217;s just me. People have different tastes and therefore, undoubtedly, will do it differently. Maybe I&#8217;ve been too mollycoddled by Rails, but this is completely arbitrarily decided by whoever&#8217;s writing the feature at the time. It gets to me.</p>

<p>Oh, then what happens if you want to have some kind of association, say you want to add an author to that post, transforming the step into this:</p>

<pre><code>Given there is a post:
  | title        | text                         | author                  |
  | When to Cuke | I think Cucumber is great... | radarlistener@gmail.com |</code></pre>

<p>Yes, it&#8217;s an email address. But what does it mean? Well, that behaviour would have to be defined in the step definition, which is &#8220;in another castle&#8221;.</p>

<pre><code>Given /^there is a post:$/ do |table|
   hash = table.hashes.first
   hash[&quot;author&quot;] = Factory(:user, :email =&gt; hash[&quot;author&quot;])
   @post = Post.create!(hash)
 end</code></pre>

<p>There&#8217;s no way you can specify a pre-existing Ruby object to be a value for one of the keys in the table in Cucumber. Therefore, you have to hack around it like this.</p>

<p>Additional gripe: I&#8217;m constantly typing &#8220;Given I&#8221; and &#8220;When I&#8221; and &#8220;And I&#8221;. <strong>Boring</strong>. I&#8217;m a programmer, coding a site that programmers will use. Why am I writing it in English?</p>

<h2 id='enter_capybara'>Enter: Capybara</h2>

<p>Now let&#8217;s see this <em>same</em> test, but written as a Capybara integration test:</p>

<pre><code>describe &quot;Comments&quot; do
  before do
    Factory(:post, :title =&gt; &quot;When to Cuke&quot;,
                   :text =&gt; &quot;I think Cucumber is great...&quot;,
                   :user =&gt; Factory(:user, :email =&gt; &quot;radarlistener@gmail.com&quot;))
  end
  
  it &quot;creating a comment&quot; do
    visit root_path
    click_link &quot;When to Cuke&quot;
    fill_in &quot;Text&quot;, :with =&gt; &quot;I am posting a comment. Look at me go!&quot;
    click_button &quot;Post Comment&quot;
    within(&quot;#comments&quot;) do
      page.should have_content(&quot;I am posting a comment. Look at me go!&quot;)
    end
  end
end</code></pre>

<p>No bullshit, everything&#8217;s there that I need to understand the spec. There are no step definitions. I can &#8220;parse&#8221; this code much faster in my head than I can with its Cucumber brother, allowing me to be a more productive developer. There&#8217;s nothing extra on the lines. No &#8220;Given&#8221;, no &#8220;When&#8221;, it just <em>does</em> things. There&#8217;s nobody on my team that doesn&#8217;t understand this code.</p>

<p>Note also here how I&#8217;m able to pass through an object to the <code>user</code> key in the <code>Post</code> factory without having to hack around it.</p>

<p>Simple, elegant and effective. Yes please. Oh, and it&#8217;s shorter too. I&#8217;m using RSpec + Capybara to develop the <a href='http://github.com/radar/forem'>forem gem</a> (eventual aim: a decent forum engine for Rails 3) and I&#8217;m loving it. It just works, and there&#8217;s no extraneous syntax in my specs.</p>

<p>If you&#8217;re working with people who aren&#8217;t technically-inclined then perhaps it would be easier to use Cucumber, as it is the easiest to read. But when working on a team of Ruby developers, developing something internal, I think Capybara is the way to go. If you&#8217;re looking for a way to combine the two techniques then I&#8217;d recommend taking a look at <a href='http://github.com/cavalle/steak'>cavalle's steak</a> gem, or <a href='http://jeffkreeftmeijer.com/2011/acceptance-testing-using-capybaras-new-rspec-dsl/'>this post by Jeff Kreeftmeijer</a>, showing how to do it with straight Capybara.</p>]]></content>
 </entry>
 
 <entry>
   <title>RTFM</title>
   <link href="http://ryanbigg.com/2011/02/rtfm"/>
   <updated>2011-02-01T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2011/02/rtfm</id>
   <content type="html"><![CDATA[<p>A scene that plays out in every single programming languages&#8217; (oh, and let&#8217;s not forget the glorious #gentoo) IRC channel I&#8217;ve come across:</p>

<pre><code>&lt;new_guy&gt; How do I do x?
&lt;old_hat&gt; omg noob RTFM plz</code></pre>

<p>Or something to that degree.</p>

<p>As Yehuda Katz <a href='http://yehudakatz.com/2010/02/09/the-blind-men-and-the-elephant-a-story-of-noobs/'>wrote nearly a year ago</a>:</p>
<blockquote>
  ... the "noob" can stare at "the f***ing manual" all day and simply fail to find something staring him in the face. Importantly, this does not reflect a failing on the part of the new developer.
</blockquote>
<p>When a person enters a channel and asks a question, our immediate reaction should not be one to shout at them to &#8220;RTFM&#8221;, but to point them to the specific point <em>in the manual</em> where they <em>may</em> find their answers. If they don&#8217;t happen to find the answer there, then either spend some time helping them or, if you&#8217;re thinking of something nasty to say, do nothing. Go surreptitiously tweet about it or something (but if you do that, you&#8217;re still a dick). Whatever you do, abusing the person who is coming to you, who is respecting your opinion on the topic, for <em>no apparent reason</em> is just not on.</p>

<p>Ridiculing them will only lead them to hate you, hate the language that they&#8217;re trying so darn hard to learn and they will abandon it. They will tell their friends that the people in the channel are arrogant and unhelpful.</p>

<p>In the Ruby channels, we must be better than #gentoo, better than ##php. We must strive to rise above being &#8220;holier-than-thou&#8221; and instead of getting on our high horse because we know everything we should share that knowledge with those who do not yet possess it.</p>

<p>How else do you expect them to learn?</p>]]></content>
 </entry>
 
 <entry>
   <title>Rails 3 in Action: 50% off</title>
   <link href="http://ryanbigg.com/2011/01/rails-3-in-action-50-off"/>
   <updated>2011-01-27T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2011/01/rails-3-in-action-50-off</id>
   <content type="html"><![CDATA[<h1>This is a very old blog post. The discount code is no longer valid.</h1>
<p>From now until the 23rd of February, <a href='http://manning.com/katz/'>Rails 3 in Action</a> is 50% off when you use the code <strong>rails350</strong>. This means you get the book for a discounted price of only $17.50.</p>

<p>Rails 3 in Action is a new breed of programming book; one that takes you on a journey of how you would develop an application in the real world, one step at a time. The book comes out of a collaboration between Yehuda Katz and Ryan Bigg (me1).</p>

<p>About this book</p>

<p>Rails 3 in Action begins by introducing Ruby on Rails and the basic underlying concepts. Right off the bat you&#8217;ll be developing an application and learning how Rails works. Then we take a short break from Rails, delving instead into two of the core foundations of the book: Test Driven Development (TDD) and Behaviour Driven Development (BDD). We extensively use these practices throughout the book in order to build a maintainable application, just like Rails shops worldwide operate.</p>

<p>From the get go you&#8217;re taught how to develop using tests, which really pays off in the end for any project, allowing you to write code that breaks less often.</p>

<p>Chapters 3-17 cover developing a ticket tracking application, one feature at a time. We cover things such as:</p>

<ul>
<li>RSpec &amp; Cucumber</li>

<li>The basics of a maintainable Rails application</li>

<li>RESTful routing</li>

<li>Authentication &amp; Authorization Systems</li>

<li>Sending email</li>

<li>Writing an API</li>
</ul>

<p>There&#8217;s more than that though! Check out the chapter listing to see what other exciting topics are covered.</p>

<p>Chapters 18-23 go through the more advanced sections of Rails such as how to build a Railtie (a Ruby library that ties in with Rails) and how to build mini-applications that can be plugged into other applications, called engines.</p>

<p>Rails 3 &#8211; and the evolving ecosystem around it &#8211; brings a new generation of Ruby on Rails development, whilst still staying familiar to those who&#8217;ve used previous versions. This book is a must-read for everybody who&#8217;s interested in Rails 3, from new people all the way up to experienced developers, you are guaranteed to learn something by reading this awesome book.</p>

<p>So use the <strong>rails350</strong> discount code today to get 50% off on <a href='http://manning.com/katz/'>Rails 3 in Action</a>.</p>]]></content>
 </entry>
 
 <entry>
   <title>Why Pivotal now charging for Tracker is a good thing</title>
   <link href="http://ryanbigg.com/2011/01/why-pivotal-now-charging-for-tracker-is-a-good-thing"/>
   <updated>2011-01-20T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2011/01/why-pivotal-now-charging-for-tracker-is-a-good-thing</id>
   <content type="html"><![CDATA[<p>Today, Pivotal Labs has announced that they <a href='http://pivotallabs.com/users/dan/blog/articles/1537-introducing-pivotal-tracker-pricing'>will start charging people to use (Pivotal) Tracker</a>, but only if their project is not public, for-profit or not for education. As they explain in the article, they&#8217;ve been working on Tracker now for 5 years.</p>

<p>5 years (or around 1,826 days) is immensely long time for a <em>Rails</em> project to have been around. 5 years ago, Rails was at 0.9.4, very nearly at 0.9.5. This project was before Rails was mainstream. The Pivotal Labs crew have done a tremendous job on it, constantly upgrading its features and most recently overhauling the UI to something very, very hot. For 5 years, it&#8217;s been free to use for anyone and everyone, but now they would like to start charging for it and I think this is a great idea. With the Pivotal Labs team now electing to transform Tracker to a paid service, they&#8217;ll be able to dedicate more people to work on it and maintain it, leading to a better experience overall.</p>

<p>There&#8217;s quite a lot of people who are already using the service (including myself) and love it. $50 a month for 10 collaborators is a good price point and one I&#8217;m sure any company I&#8217;d work for would be willing to pay. Pivotal Tracker has played, ahem, a pivotal role in many projects I have been on and it&#8217;s only fair that we continue to use their service and pay their toll to show our respect for 5 years of good, hard work that they&#8217;ve put into it. There&#8217;s 180,000 users (an astonishing figure for a (previously) non-commercial software), of Pivotal Tracker today, so they must be doing something right.</p>

<p>Please don&#8217;t abandon Pivotal Tracker now because they&#8217;re asking for money. How would you feel if you worked on something for that long only for the people to abandon you? You&#8217;d feel used by those people. Support Pivotal, as they have provided a kick ass project management tool (publicly) for near on two and a half years now.</p>]]></content>
 </entry>
 
 <entry>
   <title>Rails 3 in Action: SaaS</title>
   <link href="http://ryanbigg.com/2011/01/rails-3-in-action-saas"/>
   <updated>2011-01-06T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2011/01/rails-3-in-action-saas</id>
   <content type="html"><![CDATA[<p>I&#8217;ve been writing the 12th chapter for Rails 3 in Action for about a month now. It&#8217;s been a tough process because I haven&#8217;t felt sold on the idea or the &#8220;flow&#8221; of the chapter since I begun writing it. It&#8217;s a chapter about Software as a Service (SaaS), mainly covering letting users sign up for an account on a monthly subscription that has different limits depending on the plans they picked. My main thought has been &#8220;What does this have to do with Rails 3?&#8221;. Sure, there&#8217;s some elements of it such as using the <code>scope</code> method in routes to change the URLs from <code>/projects/1/tickets/2</code> to <code>/[account_name]/projects/1/tickets/2</code>, (which by the way I hear the <a href='http://api.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-scope'>API&#8217;s got a pretty good example of</a>) but as for introducing new features, it&#8217;s a pretty barren chapter.</p>

<p>Plus, it&#8217;s long. Simply implementing that scope breaks a whole bunch of functionality in the application and the chapter (in its current form) goes through covering how to fix that up. Most of it is the same two fixes. Not all that terribly exciting. I had planned to put the fixing-everything-up into one chapter (12) and then the actual SaaS stuff into the next chapter (13). However, tonight the fixing-everything-up chapter has gotten too long and it just feels tedious writing it.</p>

<p>That&#8217;s not what I want a chapter of Rails 3 in Action to feel like. It should be showing you features of Rails 3 that will help you along in your daily life. It should be exciting, not the same landscape for section after section after section. SaaS, to me, just doesn&#8217;t seem to fit in the book, but that isn&#8217;t to say that I&#8217;m scrapping my work entirely on this.</p>

<p>I will be taking the SaaS stuff out of Rails 3 in Action to reduce page count and I will complete it and release it as a separate guide when the book is complete. This wouldn&#8217;t be such a pain if refactoring a Rails application to have all its routes under a scope was so difficult.</p>

<p>I&#8217;m sorry to anybody who expected the final release to contain the SaaS chapter, but I think it&#8217;s best if we let that one simmer for the time whilst we cook up something more exciting, such as how to write an API.</p>

<p>Thanks for reading the book so far, I really hope you&#8217;ve enjoyed it. If you&#8217;ve got any qualms or queries, you can reach me through <a href='mailto:radarlistener@gmail.com'>email</a>, <a href='http://twitter.com/ryanbigg'>twitter</a> or GTalk at radarlistener@gmail.com.</p>

<p>I&#8217;ve put a Chapter 12 related question <a href='http://stackoverflow.com/questions/4613996/implementing-account-scoping'>on Stack Overflow</a> that somebody may know the answer to. It&#8217;s to do with the routing helpers, which was the main headache with this chapter.</p>]]></content>
 </entry>
 
 <entry>
   <title>Why you should run bundle update</title>
   <link href="http://ryanbigg.com/2011/01/why-you-should-run-bundle-update"/>
   <updated>2011-01-04T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2011/01/why-you-should-run-bundle-update</id>
   <content type="html"><![CDATA[<h3 id='prelude'>Prelude</h3>

<p><code>bundle update</code> is a command provided by the Bundler gem which will update <em>all</em> your gem dependencies to their latest versions. Providing you have a <code>Gemfile.lock</code> pre-existing, running <code>bundle install</code> will only install the versions specified in the <code>Gemfile.lock</code> and will complain that you have incompatible versions:</p>

<pre><code>Bundler could not find compatible versions for gem &quot;activesupport&quot;:
  In snapshot (Gemfile.lock):
    activesupport (3.0.0)

  In Gemfile:
    rails (= 3.0.3) depends on
      activesupport (= 3.0.3)

Running `bundle update` will rebuild your snapshot from scratch, using only
the gems in your Gemfile, which may resolve the conflict.</code></pre>

<p>This command advises you to run <code>bundle update</code> which &#8220;will rebuild your snapshot from scratch&#8221;, or in layman&#8217;s terms: throw out the <code>Gemfile.lock</code> file and start again, finding <em>newer</em> versions of gems if they are available and building a bundle for those.</p>

<p>Beneath is an example of just this happening, and an argument as to why you should run it, but carefully.</p>

<h3 id='alexs_tale'>Alex&#8217;s Tale</h3>

<p>There&#8217;s <a href='http://optimisdev.com/posts/don-t-ever-run-bundle-update'>a post by Alex from OptimisDev</a> that basically says: &#8220;Don&#8217;t even run bundle update&#8221;. That&#8217;s even the title of the post. His argument is that by running <code>bundle update</code> his I18n version changed from <code>0.4.0</code> to <code>0.5.0</code> which caused his translations to break. This is because in <code>i18n 0.5.0</code> the translation syntax has changed <em>from</em> <code>\{\{key\}\}</code> <em>to</em> <code>%{key}</code>. Why did this happen? He was using the <a href='http://rubygems.org/gems/formtastic/versions/1.2.3.beta'><code>formtastic</code> gem</a> which had specified a dependency on <code>i18n</code> of <code>&gt;= 0.4.0</code> which will install any version of i18n that is <code>0.4.0</code> or greater, a category that <code>i18n 0.5.0</code> with its breaking API changes falls into.</p>

<h3 id='a_story_on_gem_versioning'>A story on gem versioning</h3>

<p>Generally speaking, there&#8217;s three parts of a version for a gem: the major, the minor and the tiny. For example, Rails right now has a major version of 3, a minor version of 0 and a tiny version of 3, making the full version <code>3.0.3</code> currently.</p>

<p>The &#8220;rule&#8221; (or perhaps it&#8217;s more of a guideline) of gem versioning is that any subsequent releases for the <em>same</em> minor version, but a newer, higher tiny version number should fix any bugs that existed in the previous version, without breaking any functionality. Therefore you should be able to have a gem dependency like this in your <code>Gemfile</code> without any fear that it would break:</p>

<pre><code>gem &#39;rails&#39;, &#39;~&gt; 3.0.0&#39;</code></pre>

<p>The <code>~&gt;</code> part of the version indicates that we want the latest version in the series that we&#8217;ve specified. Because we&#8217;ve specified a major, minor and tiny version here, we&#8217;ll get the latest tiny release of the <code>3.0</code> series (<code>3.0.3</code> at current writing) when we run <code>bundle install</code>. In a new tiny release, there should be <em>no breaking changes</em>, only patches. Therefore, specifying versions like this is considered the safest method.</p>

<p>For minor and major releases, things can be broken and so developers should take care when running any kind of task that updates their gems to the latest version.</p>

<h3 id='when_gem_dependencies_go_bad'>When gem dependencies go bad</h3>

<p>In Alex&#8217;s case, formtastic has declared it depends on <code>i18n &gt;= 0.4.0</code> which is how <em>gem dependencies go bad</em>. In new minor or major releases of <code>i18n</code>, it&#8217;s just about guaranteed that shit will be broke, and that&#8217;s exactly what&#8217;s going to be installed when an unwitting person runs <code>bundle update</code>. As gem authors (and I&#8217;m probably guilty of this myself), we should be specifying <code>~&gt;</code> for their own gem dependencies. And we as application developers should be doing for our own gem dependencies in our <code>Gemfile</code> files. This is the way to be safe against breaking changes from a new minor or major gem version. I&#8217;m not saying that <em>every</em> new major/minor release has breaking changes, but rather to be wary when you&#8217;re upgrading.</p>

<h3 id='staying_safe'>Staying safe</h3>

<p>If we follow these simple guidelines then we can live a peaceful life of Gem Dependency Heaven instead of Gem Dependency Hell (think pre-Bundler days).</p>

<p>Whilst it&#8217;s probably not a good idea to run <code>bundle update</code> (and Alex used stronger wording with the &#8220;ever&#8221; word), it&#8217;s still useful in some contexts. Recently, David Chelimsky released a new tiny version of rspec-rails (2.4.1) which fixed a single bug. If I had <code>gem &#39;rspec-rails&#39;, &#39;~&gt; 2.4.0&#39;</code> and had <code>rspec-rails 2.4.0</code> installed but wanted to use the newest gem, I could update it by running a simple command:</p>

<pre><code>bundle update rspec-rails</code></pre>

<p>This command updates the <code>rspec-rails</code> gem and its dependencies to satisfy their latest version specifications, leaving every other gem untouched.</p>

<p>So it&#8217;s <em>almost always unsafe</em> to run <code>bundle update</code> because new versions of gems could break your application, but there is a chance everything could go off without a hitch if people (including you) have been smart in specifying proper gem dependencies. Best you stick to updating single dependencies at a time rather than the whole bundle.</p>]]></content>
 </entry>
 
 <entry>
   <title>Extending Active Record</title>
   <link href="http://ryanbigg.com/2011/01/extending-active-record"/>
   <updated>2011-01-02T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2011/01/extending-active-record</id>
   <content type="html"><![CDATA[<p>This guide was originally posted in my <a href='http://github.com/radar/guides'>guides</a> repository, but I thought I would cross-post it on the blog too to increase exposure. I hope it helps some who are trying to figure this kind of thing out.</p>

<p>If you want to see more guides like this, <a href='http://pledgie.com/campaigns/14034'>donate to me!</a>. I&#8217;m thinking of doing one on Rails engines after I finish the <a href='http://ryanbigg.com/guides/initialization.html'>initialization guide</a></p>

<p>This guide will demonstrate how we can extend Active Record&#8217;s functionality to provide a couple of new methods on our models which will allow us to find records based on a specified month or year, implementing the same functionality as found in the <a href='http://github.com/radar/by_star'>by_star</a> gem, but in a modern Rails 3 way using the features that Active Record and ARel provide.</p>

<p>This guide assumes you&#8217;ve read the &#8221;<a href='http://github.com/radar/guides/blob/master/gem-development.md'>Gem Development</a>&#8221; guide which introduces how to develop a basic gem with Bundler. We extensively use the skills learned in that guide in this guide to build this gem, including Bundler and RSpec.</p>

<p>When we&#8217;re done here, we&#8217;ll have a gem that we can add into a Rails application and then be able to call methods on the Active Record models in the application, such as these <code>by_year</code> permutations which will find records based on the year passed in:</p>

<pre><code>Invoice.by_year
Invoice.by_year(2010, :field =&gt; :sent_at)</code></pre>

<p>Lastly, we&#8217;ll add a method which we can call inside classes to set up a default for this gem:</p>

<pre><code>by_star do
  field :sent_at
end</code></pre>

<h3 id='the_beginning'>The Beginning</h3>

<p>To begin with, we&#8217;re going to generate a new gem using the <code>bundle gem</code> command:</p>

<pre><code>bundle gem by_star</code></pre>

<p>This command generates the beginning scaffold, but there&#8217;s something missing&#8230; tests! We&#8217;ll add RSpec to the <code>by_star.gemspec</code> file that was generated as a development dependency, changing our development dependencies to now contain both the <code>bundler</code> and <code>rspec</code> gems:</p>

<pre><code>s.add_development_dependency &quot;bundler&quot;, &quot;&gt;= 1.0.0&quot;
s.add_development_dependency &quot;rspec&quot;, &quot;~&gt; 2.3&quot;</code></pre>

<p>We&#8217;ll also need to add a development dependency for sqlite3-ruby as we&#8217;ll be using an SQLite3 database for our tests:</p>

<pre><code>s.add_development_dependency &quot;sqlite3-ruby&quot;</code></pre>

<p>Whilst we&#8217;re in this file we&#8217;ll add a dependency for Active Record 3, given that we&#8217;re going to be extending it:</p>

<pre><code>s.add_dependency &quot;activerecord&quot;, &quot;~&gt; 3.0&quot;</code></pre>

<p>To make sure all these gems are now installed we can run <code>bundle install</code>.</p>

<h3 id='setting_up_the_first_test'>Setting up the first test</h3>

<p>Our first test is going to implement the first version of the <code>by_year</code> method. Let&#8217;s create the file that will include this test at <code>spec/lib/by_star_spec.rb</code> now:</p>

<pre><code>require &#39;spec_helper&#39;

describe &quot;by_star&quot; do
  context &quot;by_year&quot; do
    it &quot;current year&quot; do
      Post.by_year.map(&amp;:text).should include(&quot;First post!&quot;)
    end
  end

end</code></pre>

<p>For this test to begin to run, we&#8217;ll need to create the <code>spec_helper</code> file it requires on the first line. This file will be responsible for setting up the environment and test data so that our test will run. The first thing this file needs to do is exist at <code>spec/spec_helper.rb</code> and the second thing is to set up the test data. We&#8217;re going to need a database where we can execute queries. We&#8217;ll begin this file like this:</p>

<pre><code>require &#39;by_star&#39;

ActiveRecord::Base.establish_connection(:adapter =&gt; &quot;sqlite3&quot;, 
                                       :database =&gt; File.dirname(__FILE__) + &quot;/by_star.sqlite3&quot;)</code></pre>

<p>The <code>require</code> here to the <code>by_star</code> (<code>lib/by_star.rb</code>) file should load everything that this gem needs to run, including Active Record. We&#8217;ll modify <code>lib/by_star.rb</code> to have a require to load Active Record as its first line now:</p>

<pre><code>require &#39;active_record&#39;</code></pre>

<p>With Active Record required, <code>spec/spec_helper.rb</code> will be able to use <code>ActiveRecord::Base.establish_connection</code> to create a new database located at <code>spec/by_star.sqlite3</code>. It&#8217;s in this database that we&#8217;ll set up our test data, but to do that we&#8217;re first going to need to set up the schema for the tables. Underneath the <code>establish_connection</code> line in <code>spec/spec_helper.rb</code> we&#8217;ll now put this:</p>

<pre><code>load File.dirname(__FILE__) + &#39;/support/schema.rb&#39;</code></pre>

<p>This will load the file at <code>spec/support/schema.rb</code> which should define the schema for our tables. In this file, we&#8217;ll put this:</p>

<pre><code>ActiveRecord::Schema.define do
  self.verbose = false

  create_table :posts, :force =&gt; true do |t|
    t.string :text
    t.timestamps
  end
end</code></pre>

<p>This piece of code will define the schema that we need in our database for us, using the syntax we&#8217;re familiar with from Rails migrations. Now we&#8217;ll define the data in a file also in the <code>spec/support</code> file, but this time we&#8217;ll call it <code>spec/support/data.rb</code>. We&#8217;ll keep the data separate because it&#8217;s easier to manage these two separate from one another. In this file we&#8217;ll put this:</p>

<pre><code>Post.create(:text =&gt; &quot;First post!&quot;)</code></pre>

<p>To define the model, we&#8217;ll create one more final file at <code>spec/support/models.rb</code> and define the <code>Post</code> model in this:</p>

<pre><code>class Post &lt; ActiveRecord::Base

end</code></pre>

<p>To load this file and <code>spec/support/data.rb</code> we&#8217;ll put these lines in <code>spec/spec_helper.rb</code>, right under the other <code>load</code>:</p>

<pre><code>load File.dirname(__FILE__) + &#39;/support/models.rb&#39;
load File.dirname(__FILE__) + &#39;/support/data.rb&#39;</code></pre>

<p>With the schema, models and data now all set up we should be able run our spec and have it fail because it&#8217;s missing the <code>by_year</code> method now:</p>

<pre><code>$ bundle exec rspec spec
F

Failures:

  1) by_star by_year current year
     Failure/Error: Post.by_year.map(&amp;:text).should include(&quot;First post!&quot;)
     undefined method `by_year&#39; for #&lt;Class:0x00000101febfd0&gt;
     # ./spec/lib/by_star_spec.rb:6:in `block (3 levels) in &lt;top (required)&gt;&#39;</code></pre>

<p>Ah, now it can&#8217;t find the <code>by_year</code> method, so now we get to the extending part.</p>

<h3 id='implementing_'>Implementing <code>by_year</code></h3>

<p>To add these methods to Active Record, we&#8217;ll use the <code>extend</code> method which will add methods from the module to the class, there by <em>extending</em> it. Get it? Good. At the bottom of <code>lib/by_star.rb</code> we&#8217;ll add this line:</p>

<pre><code>ActiveRecord::Base.extend ByStar</code></pre>

<p>Now we just need to define the <code>by_year</code> method inside the <code>ByStar</code> module now. This method should return all objects that are in the given year. For now, we&#8217;ll just get it to do objects in the current year. Let&#8217;s define the <code>by_year</code> method in the module now:</p>

<pre><code>module ByStar
  def by_year
    start_time = Time.now.beginning_of_year
    end_time = Time.now.end_of_year
    where(self.arel_table[:created_at].in(start_time..end_time))
  end
end</code></pre>

<p>Here we get the times at both ends of the year, the very first microsecond and the very last microsecond. Then we call <code>self.arel_table</code> which returns an <code>ARel::Table</code> object which we can then use to build our queries. We call the <code>[]</code> method and pass in <code>:created_at</code> as the key and then call the <code>in</code> method on that, passing in the beginning and the end of the year. This will construct a <code>BETWEEN</code> SQL query for us for the <code>created_at</code> column in our <code>posts</code> table:</p>

<pre><code>SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;created_at&quot; BETWEEN &#39;2011-01-01 00:00:00.000000&#39; AND &#39;2011-12-31 23:59:59.999999&#39;)</code></pre>

<p>That time should be precise enough for anyone! The <code>by_year</code> method will return an <code>ActiveRecord::Relation</code> object which can then be used for further scoping if the people using our gems want to do something else to it, such as limiting it to return only 5 records by calling it like this:</p>

<pre><code>Post.by_year.limit(5)</code></pre>

<p>Such is the power of Active Record 3.</p>

<p>With this method defined, let&#8217;s see if we can have one passing spec now:</p>

<pre><code>$ bundle exec rspec spec/
.

Finished in 0.00169 seconds
1 example, 0 failures</code></pre>

<p>Cool! Next, we&#8217;ll get it to work with a numbered year and a time object, and then we&#8217;ll get to passing options to this method.</p>

<h3 id='a_numbered_year'>A numbered year</h3>

<p>We need a new test that will let <code>by_year</code> now take a year. Let&#8217;s add one to the the <code>context &quot;by_year&quot;</code> in <code>spec/lib/by_star_spec.rb</code>:</p>

<pre><code>it &quot;a specified year&quot; do
  Post.by_year(Time.now.year - 1).map(&amp;:text).should include(&quot;So last year!&quot;)
end</code></pre>

<p>To test this, we&#8217;re going to need a post from last year. We&#8217;ll add one to <code>spec/support/data.rb</code> now:</p>

<pre><code>Post.create(:text =&gt; &quot;So last year!&quot;, :created_at =&gt; Time.now - 1.year)</code></pre>

<p>To get <code>by_year</code> to support this we will change the method to now take one argument which, defaults to the current year, and use it to construct a <code>Time</code> object to use in the method itself.</p>

<pre><code>def by_year(year=Time.now.year)
  start_time = Date.strptime(&quot;#{year}-01-01&quot;, &quot;%Y-%m-%d&quot;).to_time
  end_time = start_time.end_of_year
  where(self.arel_table[:created_at].in(start_time..end_time))
end</code></pre>

<p>The <code>Date.strptime</code> call here will convert the year into a <code>Date</code> object, and then we call <code>to_time</code> on it to get a <code>Time</code> object, just like the one we got from <code>Time.now</code>. Let&#8217;s see if this makes our spec run now:</p>

<pre><code>$ bundle exec rspec spec/
..

Finished in 0.00358 seconds
2 examples, 0 failures</code></pre>

<p>We&#8217;re just flying through these. The final modification we&#8217;ll make to how this method is called is get it to take options which will customise what field it does the searching on.</p>

<h3 id='methods_and_options_sitting_in_a_tree'>Methods and options, sitting in a tree</h3>

<p>We&#8217;re going to get the <code>by_year</code> method to take a set of options which will modify its behaviour. This set of options will only contain one key, but as it will be a <code>Hash</code> object, it leaves it open to taking multiple options at a later stage. Options that are not <code>:field</code> (or <code>&#39;field&#39;</code> if people feel so inclined) will do nothing. Let&#8217;s write a new spec for this now in <code>spec/lib/by_star_spec.rb</code>:</p>

<pre><code>it &quot;a specified year, with options&quot; do
  published_posts = Post.by_year(Time.now.year, :field =&gt; &quot;published_at&quot;)
  published_posts.map(&amp;:text).should include(&quot;First published post!&quot;)
  published_posts.map(&amp;:text).should_not include(&quot;First post!&quot;)
end</code></pre>

<p>Here the options are going to be <code>{ :field =&gt; &quot;published_at&quot; }</code> and this will modify the <code>by_year</code> method to look up based on this field instead. We ensure that we don&#8217;t see the &#8220;First post!&#8221; post because this doesn&#8217;t have a <code>published_at</code> field set, and shouldn&#8217;t show up in our test if the options are being interpreted as they should be. The <code>published_at</code> field doesn&#8217;t exist in our database&#8217;s schema yet, so we&#8217;ll add it to the <code>spec/support/schema.rb</code> file, changing our <code>posts</code> table definition to this:</p>

<pre><code>ActiveRecord::Schema.define do
  self.verbose = false

  create_table :posts, :force =&gt; true do |t|
    t.string :text
    t.timestamps
    t.datetime :published_at
  end
end</code></pre>

<p>When we re-run our tests, the <code>posts</code> table will be re-created with this new field. To get a record with the <code>published_at</code> attribute set to something, we&#8217;ll set one up in <code>spec/support/data.rb</code>:</p>

<pre><code>Post.create(:text =&gt; &quot;First published post!&quot;, :published_at =&gt; Time.now)</code></pre>

<p>Now to get this variety of the <code>by_year</code> method to work, we&#8217;ll convert the method to this:</p>

<pre><code>def by_year(year=Time.now.year, options={ :field =&gt; &quot;created_at&quot; })
  start_time = Date.strptime(&quot;#{year}-01-01&quot;, &quot;%Y-%m-%d&quot;).to_time
  end_time = start_time.end_of_year
  field = options[:field]
  
  where(self.arel_table[field].in(start_time..end_time))
end</code></pre>

<p>There we have the <code>options</code> defaulting to a hash with the <code>:field</code> key set to &#8220;created_at&#8221;. If we pass through another field, like we do in the test, then it will alter the field used to do the lookup. So, does this test pass? Let&#8217;s find out:</p>

<pre><code>$ bundle exec rspec spec/
...

Finished in 0.0049 seconds
3 examples, 0 failures</code></pre>

<p>There we go, passing too! One final thing: the class configuration.</p>

<h3 id='configuring_the_gem_in_the_class'>Configuring the gem in the class</h3>

<p>If we&#8217;ve got a model that doesn&#8217;t have a <code>created_at</code> field, but does have another field, then we don&#8217;t want to always be passing in the <code>:field</code> option everywhere. Instead, we want to configure this option on a per-class basis like this:</p>

<pre><code>class Event &lt; ActiveRecord::Base
  by_star do
    field :date
  end
end</code></pre>

<p>To test this implementation, we&#8217;ll define a new model called <code>Event</code> in <code>spec/support/models.rb</code> using exactly the same code as above. Then we&#8217;ll need to add the table for this to <code>spec/support/schema.rb</code>:</p>

<pre><code>create_table :events, :force =&gt; true do |t|
  t.string :name
  t.date :date
end</code></pre>

<p>And then finally, to test that this actually works, we need to add data to <code>spec/support/data.rb</code>:</p>

<pre><code>Event.create(:name =&gt; &quot;The Party&quot;, :date =&gt; Time.now)</code></pre>

<p>Oh, and yes we&#8217;ll need to add a test for this too in <code>spec/lib/by_star_spec.rb</code>:</p>

<pre><code>it &quot;pre-configured field&quot; do
  Event.by_year.map(&amp;:name).should include(&quot;The Party&quot;)
end</code></pre>

<p>Let&#8217;s run our specs now:</p>

<pre><code>$ bundle exec rspec spec
... undefined method `by_star&#39; for Event(Table doesn&#39;t exist):Class</code></pre>

<p>There&#8217;s currently no <code>by_star</code> method defined on the <code>Event</code> class&#8230; because we&#8217;re still yet to define it. This method takes a block which we&#8217;ll use to configure the gem for this model and we&#8217;ll now place it inside the <code>ByStar</code> module inside <code>lib/by_star.rb</code>:</p>

<pre><code>def by_star(&amp;block)
  @config ||= ByStar::Config.new
  @config.instance_eval(&amp;block) if block_given?
  @config
end

class Config
  def field(value=nil)
    @field = value if value
    @field
  end
end</code></pre>

<p>When the <code>by_star</code> method is called, it will get a new <code>ByStar::Config</code> object and evaluate the block it&#8217;s given within the context of that object, so that any method called inside the block is now called on the <code>ByStar::Config</code> object itself. In the <code>Config</code> class, we define a <code>field</code> method which will set <code>@field</code> to a value if one&#8217;s given and return it, or if no value is given then simply return the set value. Using this, we can reference the field as <code>by_star.field</code> in our <code>by_year</code> method. But we must take care to recognise that the passed option to the method should have precedence over the class&#8217;s default. Therefore, our <code>by_year</code> method should now look like this:</p>

<pre><code> def by_year(year=Time.now.year, options = {})
   beginning_of_year = Date.strptime(&quot;#{year}-01-01&quot;, &quot;%Y-%m-%d&quot;).beginning_of_year
   end_of_year = beginning_of_year.end_of_year
   field = options[:field] || by_star.field || &quot;created_at&quot;
   where(self.arel_table[field].in(beginning_of_year..end_of_year))
 end</code></pre>

<p>We&#8217;ve taken out the default in the <code>options</code> argument for the method, because if it defaulted to <code>created_at</code> then we wouldn&#8217;t know if that was what was passed in or if that was the default. So instead, on the second-to-last line for this method, we check if the <code>:field</code> key in <code>options</code> is set and if it isn&#8217;t then fall back to <code>by_star.field</code> and if that&#8217;s not set then finally <code>created_at</code> becomes our default once more. One more run of our specs and everything should now be peachy:</p>

<pre><code> $ bundle exec rspec spec/
 ....

 Finished in 0.01141 seconds
 4 examples, 0 failures</code></pre>

<h3 id='conclusion'>Conclusion</h3>

<p>In this guide you have learned how to extend Active Record to have a <code>by_year</code> method which finds records based on the current year, or one that was passed in. The lookup field is configurable by passing in a <code>:field</code> option to the method. Finally, we set up a way to configure the options for our method using a class method called <code>by_star</code>.</p>

<p>I hope you&#8217;ve learned something by reading this, and thanks for doing so! You can find the end-result of this gem in the <a href='https://github.com/radar/guides/tree/master/extending-active-record'>extending-active-record directory</a> on <a href='http://github.com/radar/guides'>this project</a>.</p>

<p>If you like my work, <a href='http://pledgie.com/campaigns/14034'>donate to me!</a></p>]]></content>
 </entry>
 
 <entry>
   <title>Converting from WordPress to Jekyll</title>
   <link href="http://ryanbigg.com/2010/12/converting-from-wordpress-to-jekyll"/>
   <updated>2010-12-27T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2010/12/converting-from-wordpress-to-jekyll</id>
   <content type="html"><![CDATA[<p>Yesterday I converted this blog from WordPress to Jekyll, thanks to some prompting from <a href='http://twitter.com/lenary'>Sam Elliott</a> and <a href='http://twitter.com/rohitarondekar'>Rohit Arondekar</a>. All in all, the process wasn&#8217;t actually all that painful. What triggered this whole thing was three factors:</p>

<ul>
<li>My Slicehost server crashed, possibly due to some intense load I was getting from the <a href='http://ryanbigg.com/2010/12/ubuntu-ruby-rvm-rails-and-you'>Ubuntu, Ruby, RVM, Rails and You</a> post I wrote (whilst under the influence of delicious cider).</li>

<li>When the server rebooted, I was unable to boot Apache2 back up because <em>somebody</em> (read: me) had fucked with sqlite3 to try to get his IRC bot to work on the server.</li>

<li>Slicehost charged me $38/month for a 512MB box. Linode charges about half that for the same thing. Fuck Slicehost.</li>
</ul>

<p>So off I went on a magical journey to fix these three problems.</p>

<h3 id='never_work_on_live_systems'>Never work on live systems</h3>

<p>A rule that every developer has to learn the hard way (be it from anywhere to their own system up to a website with a couple of hundred users) is that you <strong>never ever, ever, ever work on live systems because something will go terribly, terribly wrong</strong>. The second rule that every developer learns is <strong>backups, motherfucker, do you have them?</strong>. So when I had 3 years of posts that I didn&#8217;t want to lose I obeyed these two rules.</p>

<h3 id='wordpress_conversion'>Wordpress conversion</h3>

<p>First task was to take an SQL backup from the WordPress install that I had and move it over to my own system. Next, I imported this SQL into a local install of MySQL and made sure it was the latest-and-greatest. Sure, enough it was. Rohit had pointed me at the <a href='https://github.com/mojombo/jekyll/wiki/blog-migrations'>Blog migrations wiki page</a> for Jekyll and it had what appeared to be clear instructions for WordPress there.</p>

<p>So I cloned the <a href='http://github.com/mojombo/jekyll'>Jekyll</a> project into my <code>~/Sites/gems</code> folder and ran just the wordpress commands because I have tunnel vision when reading documentation (note: not my real username and password):</p>

<pre><code>$ export DB=ryanbigg
$ export USER=lolno 
$ export PASS=nopass4u 
$ ruby -r &#39;~/Sites/gems/jekyll/lib/jekyll/migrators/wordpress&#39; -e &#39;Jekyll::WordPress.process( &quot;#{ENV[&quot;DB&quot;]}&quot;, &quot;#{ENV[&quot;USER&quot;]}&quot;, &quot;#{ENV[&quot;PASS&quot;]}&quot;)&#39;</code></pre>

<p>To my surprise, it worked. I had a whole bunch of <code>_posts</code> files representing the posts in my system.</p>

<h3 id='booting_jekyll'>Booting Jekyll</h3>

<p>I installed the <code>jekyll</code> gem itself using <code>gem install jekyll</code> and then ran <code>jekyll --server</code> and it threw up a ton of &#8220;errors&#8221;, which actually turned out to be warnings about my ability to sometimes intersperse invalid HTML / Markdown with valid Markdown (or the other way around). When I went to http://localhost:4000 I got a 403 error. So I checked out other Jekyll blogs like <a href='http://github.com/qrush/litanyagainstfear'>Nick Quaranto's litanyagainstfear repository</a> to see what I was missing. I instantly came across the <a href='https://github.com/qrush/litanyagainstfear/blob/master/index.html'>index.html</a> file in this repository and &#8220;borrowed&#8221; it for my own blog, turning it into <a href='https://github.com/radar/ryanbigg.com/blob/master/index.html'>what's now here</a>. I choose to only show the last 25 posts because everything before that is ancient history. The links to them will still work, but I&#8217;m just not showing them in the archive list to conserve space.</p>

<h3 id='stylin'>Stylin&#8217;</h3>

<p>The next thing I needed to do was to create a <a href='https://github.com/radar/ryanbigg.com/blob/master/_layouts/default.html'>default.html layout</a> file in the <code>_layouts</code> folder to style this new home page of mine. I created a <code>css</code> folder at the root of the project and put in <a href='https://github.com/radar/ryanbigg.com/blob/master/css/style.css'>`style.css`</a> and got to work styling it. I wanted something a little more lightweight than the old theme and I think what I came up with was alright. This morning I added a <a href='https://github.com/radar/ryanbigg.com/blob/master/css/mobile.css'>`mobile.css`</a> which should format the blog just fine for mobile screens. It looks great on my iPhone 4.</p>

<h3 id='comments'>Comments</h3>

<p>I wanted to keep the comments from the WordPress site and Rohit recommended Disqus as a way to do that. I installed the <a href='http://wordpress.org/extend/plugins/disqus-comment-system/'>WordPress plugin</a> for it and followed the bouncing ball and had my comments exported to Disqus in no time. I needed to add the following to the <a href='https://github.com/radar/ryanbigg.com/blob/0c30ab8b5b9721b16fa125d94270d797d4eb556e/_layouts/post.html#L16-30'>post layout</a> to support the Disqus comment system. The <code>wordpress_id</code> field is the &#8220;secret sauce&#8221; here for how Disqus knows which post links up to what comments. The only caveat I&#8217;ve been informed about for Disqus is that the comments won&#8217;t be indexed by Google because they&#8217;re loaded via a JavaScript request, but I can tolerate that. Any useful information I would put in a post, probably.</p>

<h3 id='wordpress_pages'>WordPress pages</h3>

<p>To convert over the pages from WordPress that weren&#8217;t posts I&#8217;ve copied the source of them (such as the <a href='http://ryanbigg.com/about-me.html'>About me</a> page) and put them as static HTML files in the root of the project. When Jekyll compiles the site, these are copied over to the <code>_site</code> directory.</p>

<h3 id='deployment'>Deployment</h3>

<p>Currently going via the low-tech method of an SSH + <code>git pull</code> on the server, but hoping to switch to a commit hook in the future.</p>

<h3 id='benefits'>Benefits</h3>

<p>The benefits are many. My posts are now <a href='http://github.com/radar/ryanbigg.com'>open source</a> which means that if people find problems with them that can send in pull requests, but that&#8217;s just a pipe dream probably.</p>

<p>The main benefit is the speed. On the vanilla WordPress install I had I was lucky to get 2 requests per second for the home page. With Jekyll, I&#8217;m getting about 2,300 reqests per second. This is due to the fact all my posts are static assets now. I think I could double this if I <a href='http://ryanbigg.com/2009/06/how-to-make-your-rails-application-578-times-faster/'>switched to Nginx</a>, which I plan on doing when I don&#8217;t have a use for the PHP version anymore.</p>

<p>I also get to write my posts the way I like to: Markdown + HTML. No crummy little editor window, I can do it all from within TextMate.</p>

<p>I&#8217;m really liking Jekyll as lightweight alternative to WordPress and it&#8217;s great to finally be off a PHP-based system. I mean, if Ruby is so good <a href='http://en.wikipedia.org/wiki/Not_Invented_Here'>why would I be using a PHP based system?</a></p>]]></content>
 </entry>
 
 
</feed>