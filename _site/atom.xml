<?xml version="1.0" encoding="iso-8859-1"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The Life of a Radar</title>
 <link href="http://ryanbigg.com/atom.xml" rel="self"/>
 <link href="http://ryanbigg.com"/>
 <updated>2017-08-23T20:36:38+10:00</updated>
 <id>http://ryanbigg.com/</id>
 <author>
   <name>Ryan Bigg</name>
   <email>radarlistener@gmail.com</email>
 </author>

 
 <entry>
   <title>Joy of Elixir</title>
   <link href="http://ryanbigg.com/2017/07/joy-of-elixir"/>
   <updated>2017-07-27T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2017/07/joy-of-elixir</id>
   <content type="html"><![CDATA[<p>I&#39;ve been using Elixir at work professionally for the past year and more recently I&#39;ve been starting to do some mentoring around Elixir. I&#39;ve noticed that while there are some very solid intermediate books/resources like <a href='https://elixir-lang.org/getting-started/introduction.html'>Getting Started guide on elixir-lang.org</a> the <a href='https://pragprog.com/book/elixir13/programming-elixir-1-3'>Programming Elixir</a> book and even <a href='https://elixirschool.com/'>Elixir School</a>, there doesn&#39;t seem to be anything at all book-wise directed at newbies.</p>

<p><strong>So I decided to write a little book called <a href='https://joyofelixir.com'><em>Joy of Elixir</em></a>.</strong></p>

<p><a href='https://joyofelixir.com'><img src='https://joyofelixir.com/images/small-cover.png' width='250px' style="float: right; margin-left: 20px;"></a></p>

<p>
  <strong>Joy of Elixir avoids assuming knowledge of <em>anything</em> about programming while teaching people about their first programming language: Elixir.</strong>
</p>

<aside>
  <header>Shut up and take my money!</header>

  <p>
    This book is available <a href='https://joyofelixir.com'>for free online</a> (under <a href='https://github.com/radar/joyofelixir/blob/master/license.txt'>the CC-BY-SA 4.0</a> license), and the book's <a href='https://github.com/radar/joyofelixir'>HTML + CSS-based source is on GitHub</a>.
  </p>

  <p>
    However, if you still want to throw a few dollars my way you can still <a href='https://leanpub.com/joyofelixir'>buy a PDF version</a> from Leanpub.
  </p>
</aside>

<p>
  It seemed like there is a vast, empty, <em>cavernous void</em> where there should be something like the excellent <a href='https://pine.fm/LearnToProgram/'>Learn to Program book by Chris Pine</a>. That book is for <a href='https://www.ruby-lang.org'>Ruby</a>; but there feels like there should be an equivalent to that for Elixir. I'm hoping <em>Joy of Elixir</em> can be that equivalent.
</p>

<p>
We have people completely new to programming <em>wanting</em> to learn Elixir -- because people who have learned Elixir already told them about it and how cool it is! -- but the support is not-quite-there yet. So this is an attempt to fill that void. Essentially a response to: <em>"Why won't <u>somebody</u> think of the newbies?"</em>. Well, someone <em>is</em> thinking of the newbies.
</p>

<p>
  Elixir is a great first language to get started with because its syntax is very newbie friendly and the initial concepts are very easy to learn. I would even go as far as to say that Elixir is easier to learn than Ruby because of Elixir's immutability and the way Elixir puts functions into modules -- (rather than the functions just being available, i.e. through inheritance or monkey-patching). I find it easier to navigate through other people's Elixir code, than I do to navigate through other people's Ruby code.
</p>

<p>
  I want Joy of Elixir to be the go-to-resource for teaching people programming <em>for the very first time</em> using Elixir. I want them to experience the <em>joy</em> that Elixir (and programming in general) can bring to people. I want people to feel like them have power over the machine because of the knowledge contained within this book.
</p>

<p>I want to have a book that I can confidently recommend to newbies when they ask about how they can learn Elixir. If you have a newbie in your life that wants to learn Elixir, point them at this book and let them read it. I&#39;m very keen to get some feedback from newbies (and everyone else) on how the content could be improved. There&#39;s instructions on how to give that feedback <a href='https://joyofelixir.com/about.html'>over on the &quot;About&quot; page</a>.</p>

<p>I aim to continue writing this book over the next couple of months and hope to have a finished edition by the end of the year. What&#39;s there at the moment is roughly a month&#39;s worth of work -- or put another way: 15,000 words (50ish pages). I&#39;m aiming for the book to be at about 50,000 words (125-150 pages) by the time it is done.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Rails' CurrentAttributes considered harmful</title>
   <link href="http://ryanbigg.com/2017/06/current-considered-harmful"/>
   <updated>2017-06-22T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2017/06/current-considered-harmful</id>
   <content type="html"><![CDATA[<p>This blog post has been <a href="https://techracho.bpsinc.jp/hachi8833/2017_08_01/43810">translated into Japanese</a>, thanks to <a href="https://twitter.com/hachi8833">@hachi8833</a>!</p>

<p>I was made aware of <a href="https://github.com/rails/rails/commit/24a864437e845febe91e3646ca008e8dc7f76b56">this commit</a> recently (thanks to Rebecca Skinner) to Rails which introduces what is effectively a global state to Rails applications.</p>

<p>Rather than writing why global state in-general is a bad thing myself, I will instead link you to this <a href="https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil">excellent question + answer on the Software Engineering Stack Exchange</a>.</p>

<blockquote>
<p>Very briefly, it makes program state unpredictable.</p>

<p>To elaborate, imagine you have a couple of objects that both use the same global variable. Assuming you&#39;re not using a source of randomness anywhere within either module, then the output of a particular method can be predicted (and therefore tested) if the state of the system is known before you execute the method.</p>
</blockquote>

<p>This implementation also chooses to use <a href="https://github.com/rails/rails/commit/24a864437e845febe91e3646ca008e8dc7f76b56#diff-3c3c0f647bc4702f9453c173a707aa06R90">thread-local variables</a> which <a href="https://stackoverflow.com/a/8291218/15245">this answer over on Stack Overflow</a> explains is not a good choice because:</p>

<blockquote>
<ul>
<li>It&#39;s harder to test them, as you will have to remember to set the thread-local variables when you&#39;re testing out code that uses it</li>
<li>Classes who use thread locals will need knowledge that these objects are not available for them but inside a thread-local variable and this kind of indirection usually breaks the law of demeter</li>
<li>Not cleaning up thread-locals might be an issue if your framework reuses threads (the thread-local variable would be already initiated and code that relies on ||= calls to initialize variables might fail</li>
</ul>
</blockquote>

<p>Not to mention that this also violates the well-established <a href="https://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a> too. Suddenly, <code>Current</code> is available <em>anywhere</em> in your application. Good code is <em>explicit</em> in how it makes data available to its methods / functions. This <code>CurrentAttributes</code> feature is not good code, nor is it making it <em>explicitly clear</em> how <code>Current.user</code> arrives in the model. It is just there &quot;magically&quot;.</p>

<p>I enjoy and have benefited from Rails magic in the past. Some of my favourite features are <code>render @collection</code> and the <a href="http://ryanbigg.com/2012/03/polymorphic-routes">polymorphic routing</a>. Those are great features because their scope is limited. I know that I can render a collection in a view. I know I can use polymorphic routing in controllers, models and helpers.</p>

<p>This <code>CurrentAttributes</code> is much too magical for my liking because of how it introduces a thread-local global state which hides where the actual work of setting values on <code>Current</code> is done, and because it is <em>implicit</em> about where those values come from.</p>

<p>&quot;They&#39;re just set in the controller!&quot;, may be a defense for this. But what if you don&#39;t have a controller? What if you have a background job instead? How about a test? True, in both cases you could use <code>Current</code> to provide the values:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">post_id</span><span class="p">)</span>
  <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
  <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="n">post_id</span><span class="p">)</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span>
  <span class="c1"># code to run the job goes here</span>
<span class="k">end</span>
</code></pre></div>
<p>Here, <code>Post#run_long_running_thing</code> can simply access the current user by accessing <code>Current.user</code>. But it is not immediately clear -- if all you&#39;re looking at is the <code>Post#run_long_running_thing</code> method -- where <code>Current.user</code> is being set in the first place. It&#39;s implied that it&#39;s set somewhere else, but to attempt to find where it&#39;s set in this context may be difficult. Doing a find in the project for <code>Current.user =</code> may turn up multiple places (controllers, jobs, etc.) where the variable is set. Which one is the right one <em>for this context</em>?</p>

<p>As for tests, for those you would need to setup <code>Current.user</code> before hand if you had any code relying on that. I&#39;d imagine something like:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
<span class="n">before</span> <span class="p">{</span> <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="o">=</span> <span class="n">user</span> <span class="p">}</span>

<span class="n">it</span> <span class="s2">"runs the long running thing"</span> <span class="k">do</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span>
<span class="k">end</span>
</code></pre></div>
<p>Again, it is not explicit when you&#39;re looking at the <code>run_long_running_thing</code> method or its tests where <code>Current.user</code> is being set.</p>

<p>There doesn&#39;t appear to be anywhere in the <code>CurrentAttributes</code> code -- as far as I can tell -- where it would reset the state of this <code>Current</code> object in between each test. Therefore, setting it in one test like what I&#39;ve done above now makes it bleed through &quot;magically&quot; into other tests. That behaviour seems like a horrible thing to have in a codebase. You could very well have situations where you&#39;re <em>expecting</em> <code>Current.user</code> to be <code>nil</code> but instead it&#39;s set to some vaule because some other test set it. Now which of the 500 tests in my application did that? Good luck finding it.</p>

<h3>Convention over configuration, and perhaps explicitness over implicitness?</h3>

<p>Rails is still a good framework. I know DHH&#39;s rebuttal to this will be &quot;don&#39;t use it then&quot; or something along those lines. Similar to his response to <a href="https://github.com/rails/rails/pull/25115">my reverting of callback suppression</a> a while back.</p>

<blockquote>
<p>Protecting programmers from themselves is explicitly not in the charter for Rails when it comes to providing features that have a valid use case but could be abused.</p>
</blockquote>

<p>I just can&#39;t reason with the guy at all. We have vastly different opinions on this sort of thing.</p>

<p>I think Rails choosing to go with ultra-implicitness -- like in this <code>Current</code> case -- is a vastly wrong move that will lead to a lot of frustration with Rails codebases that use this feature. I think Rails should, in situations like this, choose to opt for explicitness over implicitness. Rails has enough magic in it and it certainly doesn&#39;t need any more.</p>

<p>This feature is not something that was sought after (it appears like DHH thought it was a good idea one day and just <em>did it</em>), and we have much better ways of doing this. For instance, in the job code above, it would be better to pass it explicitly:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">post_id</span><span class="p">)</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
  <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="n">post_id</span><span class="p">)</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
  <span class="c1"># code to run the job goes here</span>
<span class="k">end</span>
</code></pre></div>
<p>Similarly, in the test explictness also wins:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>

<span class="n">it</span> <span class="s2">"runs the long running thing"</span> <span class="k">do</span>
  <span class="n">post</span><span class="p">.</span><span class="nf">run_long_running_thing</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>In both of these cases, it is <em>very</em> clear how <code>user</code> arrives in the <code>run_long_running_thing</code> method: it is passed in as an argument.</p>

<p>Let&#39;s finish by taking a look at the code from the pull request and look at how it can be written more explicitly.</p>

<h3>DHH&#39;s CurrentAttributes code vs my explicit code</h3>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># app/models/current.rb</span>
<span class="k">class</span> <span class="nc">Current</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">CurrentAttributes</span>
  <span class="n">attribute</span> <span class="ss">:account</span><span class="p">,</span> <span class="ss">:user</span>
  <span class="n">attribute</span> <span class="ss">:request_id</span><span class="p">,</span> <span class="ss">:user_agent</span><span class="p">,</span> <span class="ss">:ip_address</span>

  <span class="n">resets</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">zone</span> <span class="o">=</span> <span class="kp">nil</span> <span class="p">}</span>

  <span class="k">def</span> <span class="nf">user</span><span class="o">=</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="k">super</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">account</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">account</span>
    <span class="no">Time</span><span class="p">.</span><span class="nf">zone</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">time_zone</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># app/controllers/concerns/authentication.rb</span>
<span class="k">module</span> <span class="nn">Authentication</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="n">included</span> <span class="k">do</span>
    <span class="n">before_action</span> <span class="ss">:set_current_authenticated_user</span>
  <span class="k">end</span>

  <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">set_current_authenticated_user</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># app/controllers/concerns/set_current_request_details.rb</span>
<span class="k">module</span> <span class="nn">SetCurrentRequestDetails</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="n">included</span> <span class="k">do</span>
    <span class="n">before_action</span> <span class="k">do</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">request_id</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">uuid</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">user_agent</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">user_agent</span>
      <span class="no">Current</span><span class="p">.</span><span class="nf">ip_address</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">ip</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">include</span> <span class="no">Authentication</span>
  <span class="kp">include</span> <span class="no">SetCurrentRequestDetails</span>
<span class="k">end</span>
</code></pre></div>
<p>Including the <code>Authentication</code> module into <code>ApplicationController</code> to add a single method seems like a bit of premature extraction. Let&#39;s ignore that for now.</p>

<p>This implementation with its <code>before_action</code> to <code>set_current_authenticated_user</code> will mean that <code>Current.user</code> is set on all requests, even those which don&#39;t refer to the <code>current_user</code> at all.</p>

<p>A better implementation would be a <code>current_user</code> method which evaluates its <code>find</code> when it is called. You&#39;ll see this pattern in a lot of Rails applications.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">current_user</span>
  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div>
<p>In fact, this is similar to <a href="https://github.com/plataformatec/devise/blob/master/lib/devise/controllers/helpers.rb#L123-L125">how Devise presents its <code>current_user</code> method</a>. It uses <code>warden</code> instead of <code>cookies.signed</code>, but it&#39;s implementation is similar enough:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">current_</span><span class="c1">#{mapping}</span>
  <span class="vi">@current_</span><span class="c1">#{mapping} ||= warden.authenticate(scope: :#{mapping})</span>
<span class="k">end</span>
</code></pre></div>
<p>Ok, so now we&#39;ve got a <code>current_user</code> method which is available in the <em>controllers</em> but what if we want to use it in the view? For instance, if we want to say <code>Hello, #{current_user.name}</code> in a layout? Easy enough: make it a helper method.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">current_user</span>
  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
<span class="k">end</span>
<span class="n">helper_method</span> <span class="ss">:current_user</span>
</code></pre></div>
<p>Great, so now it&#39;s available in controllers, helpers and views. All without making it available <em>everywhere</em> in the current thread.</p>

<p>Now I would like to focus on the second half of DHH&#39;s code:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="no">Current</span><span class="p">.</span><span class="nf">account</span><span class="p">.</span><span class="nf">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Message</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:creator</span><span class="p">,</span> <span class="ss">default: </span><span class="o">-&gt;</span> <span class="p">{</span> <span class="no">Current</span><span class="p">.</span><span class="nf">user</span> <span class="p">}</span>
  <span class="n">after_create</span> <span class="p">{</span> <span class="o">|</span><span class="n">message</span><span class="o">|</span> <span class="no">Event</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">record: </span><span class="n">message</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Event</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">before_create</span> <span class="k">do</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">request_id</span> <span class="o">=</span> <span class="no">Current</span><span class="p">.</span><span class="nf">request_id</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">user_agent</span> <span class="o">=</span> <span class="no">Current</span><span class="p">.</span><span class="nf">user_agent</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">ip_address</span> <span class="o">=</span> <span class="no">Current</span><span class="p">.</span><span class="nf">ip_address</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Here, DHH is <em>implicitly</em> linking the message&#39;s creator to the <code>Current.user</code> by using the <code>default</code> option on <code>belongs_to</code>. I believe that this violates the MVC layer abstraction. The <code>Current.user</code> is just &quot;magically&quot; available in the model, with absolutely no context of how it got there in the first place.</p>

<p>A common pattern in Rails applications is not to do this, but instead to explicitly set the <code>creator</code> at the point of creation:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="vi">@message</span> <span class="o">=</span> <span class="n">current_account</span><span class="p">.</span><span class="nf">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>
  <span class="vi">@message</span><span class="p">.</span><span class="nf">creator</span> <span class="o">=</span> <span class="n">current_user</span>
</code></pre></div>
<p>Let&#39;s assume <code>current_account</code> is a similar abstraction to the <code>current_user</code> one. It&#39;s clear here that in the controller that <em>this</em> is where the <code>creator</code> is assigned. With DHH&#39;s code, it is not immediately clear from the controller code itself that <code>creator</code> is assigned at all.</p>

<p>Not only that, but this also lends itself to being abstracted into a &quot;service object&quot; which is responsible for creating a message. Let&#39;s say that you want to log an <code>Event</code> whenever a <code>Message</code> is created. Oh, I see DHH&#39;s code does that already with an <code>after_create</code> callback. Well then.</p>

<p>In the case of DHH&#39;s code, the <code>after_create</code> callback will happen whenever a <code>Message</code> is created anywhere in your application. This might be suitable in a controller, but what if you want to test some database logic, or something else which requires a persisted message, and you don&#39;t care about an event being there at the same time? What if when you created an event you had extra logic on it which caused <em>another</em> record to be created too?</p>

<p>Having such a callback irrevocably ties together messages and events <em>implicitly</em>.</p>

<p>As I mentioned before, it would be better to abstract this into a &quot;service object&quot;.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CreateMessageWithCreator</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">current_user</span><span class="p">)</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">current_account</span><span class="p">.</span><span class="nf">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>
    <span class="n">message</span><span class="p">.</span><span class="nf">creator</span> <span class="o">=</span> <span class="n">current_user</span>
    <span class="n">message</span><span class="p">.</span><span class="nf">save</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>You can then call this code in your controller like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="k">if</span> <span class="no">CreateMessageWithCreator</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">message_params</span><span class="p">,</span> <span class="n">current_user</span><span class="p">)</span>
    <span class="no">Event</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">record: </span><span class="n">record</span><span class="p">)</span>
    <span class="n">flash</span><span class="p">[</span><span class="ss">:notice</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Message sent!"</span>
    <span class="n">redirect_to</span> <span class="ss">:index</span>
  <span class="k">else</span>
    <span class="n">flash</span><span class="p">[</span><span class="ss">:alert</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Message failed to send."</span>
    <span class="n">render</span> <span class="ss">:new</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This way, then you would know that in <em>this particular case</em> you&#39;re <em>definitely</em> creating a message with a linked creator and it frees you up to create messages without creators or events, if the need did arise.</p>

<p>I think having these dependencies clearly highlighted in the code rather than magically abstracted away is a much, much better solution.</p>

<h2>Conclusion</h2>

<p>Introducing a global state to Rails seems like a terrible idea and while I deeply, deeply wish this change is reverted, that is very likely not going to happen because it&#39;s DHH&#39;s change and it&#39;s his framework. DHH is allowed to be a footgun merchant if he wishes to be. I am just sad to see that, despite evidence that this is a genuinely bad idea, DHH carried on with it. I thought with his years of experience he would know better by now.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Rails 5 in Action</title>
   <link href="http://ryanbigg.com/2017/03/rails-5-in-action"/>
   <updated>2017-03-30T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2017/03/rails-5-in-action</id>
   <content type="html"><![CDATA[<p>I have been asked a few times since Rails 5 was released when Rails 5 in Action (an update to <a href="https://www.manning.com/books/rails-4-in-action">Rails 4 in Action</a>) will be published. The short answer is that it won&#39;t be.</p>

<p>After Rails 4 in Action, I cut ties with Manning due to problems I&#39;ve outlined in many previous posts. Most recently <a href="http://ryanbigg.com/2015/08/my-self-publishing-success-story">&quot;My self-publishing success story&quot;</a>. It just isn&#39;t worth any more energy/time to continue to work with that particular publisher. Since they are the ones that own the rights to the Rails * in Action series and the IP of the book, working on an update to Rails 4 in Action would mean working with the publisher, and that&#39;s not something that I would choose to do again.</p>

<p>Couple this with a 3-year &quot;no-compete&quot; clause that means I won&#39;t be able to publish any book-length Rails beginner content. So even a competing book to Rails 4 in Action is out of the question (at least for the next two and a bit years).</p>

<p>So Rails 5 in Action is <em>never</em> coming out. <a href="https://github.com/rubysherpas/r4ia_examples/">Rails 4 in Action&#39;s code</a> will still work with Rails 5 (mostly) and it&#39;s a valuable demonstration of how to build a decently sized Rails application.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Toy Robot, Deep Dive Rails and AsciiDoc Toolchain</title>
   <link href="http://ryanbigg.com/2017/02/toy-robot-deep-dive-rails-and-asciidoc-toolchain"/>
   <updated>2017-02-20T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2017/02/toy-robot-deep-dive-rails-and-asciidoc-toolchain</id>
   <content type="html"><![CDATA[<p>This really should be three separate blog posts, but since they&#39;re all tangentially related to writing they&#39;re going to be one blog post. Here goes.</p>

<h2>Toy Robot</h2>

<p>I went to write a blog post here in December about how to do the Toy Robot exercise (the one <a href="https://joneaves.wordpress.com/2014/07/21/toy-robot-coding-test/">written by Jon Eaves</a>). I thought that post would be about 10k-15k words. It ended up being 25k. My buddy <a href="https://twitter.com/parndt">Phil Arndt</a> suggested that I make it into a book because it&#39;s so long.</p>

<p>I&#39;ve done just that: <strong><a href="https://leanpub.com/toyrobot/">The Toy Robot book</a> is now available for as little as $5 on Leanpub.</strong></p>

<p>The book is a guided walkthrough on how I would personally implement the Toy Robot exercise, and it isn&#39;t designed to be a <em>100% perfect implementation that makes every coder weep at its joy</em>. It&#39;s just one attempt at the problem, and I put it out there because I think perhaps some people can learn from my approach and the explanation that goes along with it in the book. A few Ruby newbies I&#39;ve talked to have found the Toy Robot hard to do (they don&#39;t know where to start, usually). This is a book for those people. It breaks the problem down into small chunks and tackles them one-at-a-time. If you know of any Ruby newbies, be sure to let them know about this book.</p>

<p>I&#39;ve heard from a couple of those Ruby newbies that they love the book and have learned some things from it. Things like:</p>

<blockquote>
<p>I would like to say that your toy robot book is fantastic!</p>
</blockquote>

<p>So that&#39;s nice.</p>

<h2>Deep Dive Rails</h2>

<p>I started writing <a href="https://leanpub.com/ddr">Deep Dive Rails</a>, according to the Git logs, in April of 2015.</p>

<p>This was around the time that I picked back up on <a href="https://www.manning.com/books/rails-4-in-action">Rails 4 in Action</a> and worked on finishing it with <a href="https://twitter.com/sevenseacat">Rebecca Skinner</a>. That was a process. After that, I took a short writing break for a few months and then went about writing <a href="https://leanpub.com/multi-tenancy-rails-2">the 2nd edition of Multitenancy with Rails</a>. I finished that near the end of June last year. Then my daughter was born in September and I&#39;ve been busy since.</p>

<p>Enough people have bought Deep Dive Rails (50 at this moment) that I think I am obliged to finish it. I think I&#39;ve now got enough time on train journeys and whatnot to finish it, and that&#39;s what I&#39;m going to be focussing on for the remainder of this year.</p>

<p>I was going through the refunds page for this book just out of interest and I found this choice quote:</p>

<blockquote>
<p>The book is basically taking you through what already exists. <a href="http://guides.rubyonrails.org/initialization.html">The Rails Initialization Guide</a>. Granted, there are some filled in details but even those are not necessarily comprehensive. For example, even when starting out, the first examples entirely depend on what Ruby distribution platform you are using, such as RVM or rbenv. Essentially, the paths of where to look for things can be a bit different. When I had to search out those things on my own, that&#39;s when I came across the existing material that this author was clearly cribbing from. Again, this isn&#39;t to say that the book is not trying to offer something perhaps new or at least more in-depth but right now that simply doesn&#39;t exist in the book.</p>
</blockquote>

<p>This refund reason is extremely ironic, because I wrote the original version of this guide. The guide has been an idea I&#39;ve had since about 2010. I explain as much in the intro to the book:</p>

<blockquote>
<p>This book has been a long time coming. I (Ryan) originally started writing
something along these same lines when I was taking donations to work on Rails
documentation back at the end of 2010. I got about 8,000 words into writing it
as a Rails guide and figured that nobody would want to read a guide that long
and so I gave up.</p>
</blockquote>

<p>Interestingly, Deep Dive Rails is now around 15,000 words long and given that 50 people have purchased a copy, I&#39;d say that there definitely <em>are</em> people interested in reading it. 2010-Ryan was wrong.</p>

<p>I hope that this reader that got the refund realises the error of their ways and buys Deep Dive Rails once more.</p>

<p>So yes, I will continue working on Deep Dive Rails this year. I&#39;m currently working on updating it for Rails 5. Once I&#39;m done updating the existing content for that version of Rails, I&#39;ll release a new version. That should happen within the next couple of weeks. Then I&#39;ll be adding new content to the book. No idea of when I&#39;ll be finished with it. When it&#39;s done, I guess.</p>

<h2>AsciiDoc Toolchain</h2>

<p>In the process of writing Rails 4 in Action and <a href="https://leanpub.com/ddr">Deep Dive Rails</a>, we built a toolchain to help us work with the <a href="http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/">AsciiDoc markup language</a>. We chose AsciiDoc for Rails 4 in Action because it was a much more pleasant experience than XML or Microsoft Word to write a book in, and it compiles down to DocBook (XML). Writing books in DocBook is not advisable or safe for your mental health. AsciiDoc certainly is though.</p>

<p>Compare and contrast.</p>

<p>Here&#39;s some DocBook XML:</p>

<p><img src="/images/asciidoc/docbook.png" alt="Docbook"></p>

<p>Here&#39;s some AsciiDoc for the exact same text:</p>

<p><img src="/images/asciidoc/asciidoc.png" alt="AsciiDoc"></p>

<p>I certainly know which one I prefer. I wish somebody told me about AsciiDoc sooner. It&#39;s really nice to write in.</p>

<p>(The IDs on the XML elements in the DocBook example is because Manning&#39;s review tool required each element to have a unique ID so that it could track notes on individual elements over the course of their lives.)</p>

<p>Recently, another author has asked me about how I write in AsciiDoc, and so I&#39;ve decided to <a href="https://github.com/radar/asciidoc-toolchain">put the toolchain up on GitHub</a>. If you want to start writing a book in AsciiDoc, you can clone this repo and that&#39;ll provide you with a good starting point. It comes with Rake tasks that will allow you to generate good looking HTML and PDF editions of your book, but I can&#39;t say the same for the epub and mobi formats. Patches welcome.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Validating nested JSON data with ex_json_schema</title>
   <link href="http://ryanbigg.com/2016/11/validating-nested-json-data-with-ex_json_schema"/>
   <updated>2016-11-24T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2016/11/validating-nested-json-data-with-ex_json_schema</id>
   <content type="html"><![CDATA[<p>I&#39;ve been working on an Elixir service which reads events from a JSON API and then processes those events. The code to deserialize the events runs a little like this:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Event</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">deserialize</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">%{</span><span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="n">id</span><span class="p">,</span> <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="n">type</span><span class="p">,</span> <span class="sd">"</span><span class="s2">body"</span> <span class="o">=&gt;</span> <span class="n">body</span><span class="p">}</span> <span class="o">=</span> <span class="n">data</span>
    <span class="p">%</span><span class="bp">__MODULE__</span><span class="p">{</span>
      <span class="ss">id:</span> <span class="n">id</span><span class="p">,</span>
      <span class="ss">type:</span> <span class="n">type</span><span class="p">,</span>
      <span class="ss">body:</span> <span class="n">body</span> <span class="o">|&gt;</span> <span class="n">event_module</span><span class="o">.</span><span class="n">deserialize</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>It&#39;s invoked like <code>Event.deserialize(Response, data)</code>, where <code>data</code> looks something like:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="p">%{</span>
  <span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">1"</span><span class="p">,</span>
  <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">response"</span><span class="p">,</span>
  <span class="sd">"</span><span class="s2">body"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
    <span class="sd">"</span><span class="s2">survey_id"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">123456"</span><span class="p">,</span>
    <span class="sd">"</span><span class="s2">answers"</span> <span class="o">=&gt;</span> <span class="p">[</span>
      <span class="p">%{</span>
        <span class="sd">"</span><span class="s2">comment"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">Some text goes here"</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>I&#39;ve come across an issue where <em>sometimes</em> the event&#39;s data is either malformed, or entirely missing and so I want to validate it as it arrives in the service. The way that I&#39;ve chosen to do this is to use <a href="https://github.com/jonasschmidt/ex_json_schema"><code>ex_json_schema</code></a>, which allows you to validate that an Elixir <code>Map</code>  matches a <a href="http://json-schema.org/">JSON Schema</a> specification, which is also defined as an Elixir <code>Map</code>.</p>

<p>In the case of the above data, I want to make sure that the data <em>definitely</em> contains the <code>survey_id</code>, and <code>answers</code> properties, and that every answer has a <code>comment</code> property. If these conditions aren&#39;t met, then the data should be declared invalid and the event should not be processed.</p>

<p>To do this, I first declare a schema in the <code>Response</code> module:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Response</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">schema</span> <span class="k">do</span>
    <span class="p">%{</span>
      <span class="sd">"</span><span class="s2">definitions"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
        <span class="sd">"</span><span class="s2">answer"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
          <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">object"</span><span class="p">,</span>
          <span class="sd">"</span><span class="s2">required"</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="sd">"</span><span class="s2">comment"</span><span class="p">],</span>
          <span class="sd">"</span><span class="s2">properties"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
            <span class="sd">"</span><span class="s2">comment"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
              <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">string"</span>
            <span class="p">},</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">},</span>
      <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">object"</span><span class="p">,</span>
      <span class="sd">"</span><span class="s2">required"</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="sd">"</span><span class="s2">survey_id"</span><span class="p">,</span> <span class="sd">"</span><span class="s2">answers"</span><span class="p">],</span>
      <span class="sd">"</span><span class="s2">properties"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
        <span class="sd">"</span><span class="s2">survey_id"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
          <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">string"</span>
        <span class="p">},</span>
        <span class="sd">"</span><span class="s2">answers"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
          <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">array"</span><span class="p">,</span>
          <span class="sd">"</span><span class="s2">items"</span> <span class="o">=&gt;</span> <span class="p">%{</span>
            <span class="sd">"</span><span class="s2">$ref"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="err">#</span><span class="s2">/definitions/answer"</span>
          <span class="p">}</span>
        <span class="p">},</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="o">|&gt;</span> <span class="no">ExJsonSchema</span><span class="o">.</span><span class="no">Schema</span><span class="o">.</span><span class="n">resolve</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This schema defines that the <code>survey_id</code> and <code>answers</code> properties within the &quot;root&quot; of the <code>Map</code> that I&#39;m providing are present, and also validates that all the items within <code>answers</code> have a <code>comment</code> property. Not only this, but it also validates the type of the data that&#39;s incoming too. The <code>survey_id</code> and <code>comment</code> properties should <em>always</em> be strings. If they aren&#39;t, then the data will be invalid according to this schema.</p>

<p>To use this schema, we first have to <em>resolve</em> it. The <code>ex_json_schema</code> documentation suggests resolving the schema only once:</p>

<blockquote>
<p>You should only resolve a schema once to avoid the overhead of resolving it in every validation call.</p>
</blockquote>

<p>In order to follow that instruction, I pass the schema to the <code>deserialize</code> function:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Event</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">deserialize</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span> <span class="k">do</span>
    <span class="o">...</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>To validate that the data matches the schema, I&#39;m doing this:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Event</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">process</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">validate</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span>
    <span class="o">|&gt;</span> <span class="n">deserialize</span><span class="p">(</span><span class="n">event_module</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">validate</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">%{</span><span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="n">id</span><span class="p">,</span> <span class="sd">"</span><span class="s2">body"</span> <span class="o">=&gt;</span> <span class="n">body</span><span class="p">}</span> <span class="o">=</span> <span class="n">event</span>

    <span class="k">case</span> <span class="no">ExJsonSchema</span><span class="o">.</span><span class="no">Validator</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">schema</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="k">do</span>
      <span class="ss">:ok</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">event</span><span class="p">}</span>
      <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="n">errors</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">errors</span><span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">deserialize</span><span class="p">({</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">event_module</span><span class="p">,</span> <span class="n">event</span><span class="p">},</span> <span class="n">event_module</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">%{</span><span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="n">id</span><span class="p">,</span> <span class="sd">"</span><span class="s2">type"</span> <span class="o">=&gt;</span> <span class="n">type</span><span class="p">,</span> <span class="sd">"</span><span class="s2">body"</span> <span class="o">=&gt;</span> <span class="n">body</span><span class="p">}</span> <span class="o">=</span> <span class="n">event</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">%</span><span class="bp">__MODULE__</span><span class="p">{</span>
      <span class="ss">id:</span> <span class="n">id</span><span class="p">,</span>
      <span class="ss">type:</span> <span class="n">type</span><span class="p">,</span>
      <span class="ss">body:</span> <span class="n">body</span> <span class="o">|&gt;</span> <span class="n">event_module</span><span class="o">.</span><span class="n">deserialize</span><span class="p">,</span>
    <span class="p">}}</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">deserialize</span><span class="p">({</span><span class="ss">:error</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">errors</span><span class="p">},</span> <span class="n">_</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">errors</span><span class="p">}</span>
<span class="k">end</span>
</code></pre></div>
<p>There&#39;s now two new functions in this <code>Event</code> module: <code>process</code> and <code>validate</code>. The <code>process</code> function serves as the new entrypoint for this module, and it validates and deserializes the data. The <code>validate</code> function uses the schema to validate the data. If the data is valid, it returns <code>{:ok, data}</code>, and if it&#39;s not, then it returns <code>{:error, errors, id}</code>. That return value is then passed to <code>deserialize</code>, which will then deserialize a valid event, and pass through the errors if the data was not valid.</p>

<p>This <code>Event.process/3</code> function can then be invoked like this:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">EventProcessor</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">process_events</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">events</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">schema</span> <span class="o">=</span> <span class="n">event_module</span><span class="o">.</span><span class="n">schema</span> <span class="c1"># schema may be resolved earlier than this</span>
    <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">events</span><span class="p">,</span> <span class="k">fn</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span>
      <span class="n">process_event</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span>
    <span class="k">end</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">process_event</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">case</span> <span class="no">Event</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">event_module</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">event</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="n">process_event</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
      <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">errors</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="n">handle_error</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">errors</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>If, for example, a blank event was sent to <code>Event.process/3</code>, it would return the <code>{:error, id, errors}</code> tuple with some errors, which are very readable:</p>
<div class="highlight"><pre><code class="language-" data-lang=""><span class="p">{</span><span class="nt">"Required property survey_id was not present."</span><span class="err">,</span><span class="w"> </span><span class="nt">"#"</span><span class="err">},</span><span class="w">
</span><span class="p">{</span><span class="nt">"Required property comment was not present."</span><span class="err">,</span><span class="w"> </span><span class="nt">"#/answer/0"</span><span class="err">},</span><span class="w">
</span></code></pre></div>
<p>It&#39;s clear from this output that the event wasn&#39;t processed because the <code>survey_id</code> is missing, and the <code>comment</code> is missing from the first answer.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Elixir Tip: Enum.any? + match?</title>
   <link href="http://ryanbigg.com/2016/05/elixir-tip-enum-any-match"/>
   <updated>2016-05-28T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2016/05/elixir-tip-enum-any-match</id>
   <content type="html"><![CDATA[<p>I recently found out about the <a href="http://elixir-lang.org/docs/stable/elixir/Kernel.html#match?/2">match?/2</a> function in Elixir through the #elixir-lang IRC channel on Freenode.</p>

<p>What this function allows you to do is to determine if a given pattern matches a given expression. For instance, if you wanted to know if a list of maps contained a particular key + value combination, you could do this:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">people</span> <span class="o">=</span> <span class="p">[%{</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">John"</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">Jane"</span><span class="p">}]</span>
<span class="no">Enum</span><span class="o">.</span><span class="n">any?</span><span class="p">(</span><span class="n">people</span><span class="p">,</span> <span class="k">fn</span> <span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">match?</span><span class="p">(%{</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">John"</span><span class="p">},</span> <span class="n">person</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span>
</code></pre></div>
<p>This code will get Elixir to tell you if any of the people have the name &quot;John&quot;. In this case, the result would be <code>true</code>. You could even get fancy and use a shorter function:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="no">Enum</span><span class="o">.</span><span class="n">any?</span><span class="p">(</span><span class="n">people</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">match?</span><span class="p">(%{</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">John"</span><span class="p">},</span> <span class="nv">&amp;1</span><span class="p">)))</span>
</code></pre></div>
<p>This shorter function defines the same function in the first example, but instead of having a named argument to the function, <code>&amp;1</code> is used instead.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Multitenancy with Rails 2nd Edition</title>
   <link href="http://ryanbigg.com/2016/05/multitenancy-with-rails-2nd-edition"/>
   <updated>2016-05-22T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2016/05/multitenancy-with-rails-2nd-edition</id>
   <content type="html"><![CDATA[<p><a href="https://leanpub.com/multi-tenancy-rails-2/c/fin">Multitenancy with Rails 2nd edition</a> is now &quot;content complete&quot;. I have now finished doing the majority of the work on this book and all that is left is to go through it and &quot;proof&quot; it.</p>

<p>The book has been updated for Rails 4.2 and uses industry best practices of
building a multitenanted Rails application, and the best practices of using
Braintree or Stripe to add subscription features to that application.</p>

<p><strong>If you&#39;ve read <a href="http://manning.com/bigg2">Rails 4 in Action</a> or something of a
similar level to that, this book is a perfect &quot;next step&quot; for you. It adds
features which are more complicated than a basic &quot;CRUD&quot; app to an existing
codebase. If that appeals to you, <a href="https://leanpub.com/multi-tenancy-rails-2/c/fin">use the coupon code &quot;fin&quot; to get 50% off</a>.</strong></p>

<p>This update has been quite a long time coming: it took me 298 days from when I
started updating Chapter 1 to this current point. Next up, I&#39;ll go through the
book and make sure there&#39;s as few bugs and typos as possible. Once I&#39;m done
with that, then I will consider the book to be complete.</p>

<p>Thanks everyone for buying this book, reading it and providing feedback along the way.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Hiring Juniors</title>
   <link href="http://ryanbigg.com/2016/04/hiring-juniors"/>
   <updated>2016-04-22T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2016/04/hiring-juniors</id>
   <content type="html"><![CDATA[<h2>The &quot;D&quot; word</h2>

<p>We have a diversity problem in the community, and that&#39;s been talked about
quite a lot when it comes to <em>tangible</em> things like gender and race. A
diversity of skill -- an <em>intangible</em> thing -- is also something we talk about
struggling with.</p>

<p>When I started out as a Rails developer, I was tinkering around with the
framework in my spare time, which I had a lot of because I was single and
working casually at Coles and doing the odd spot of PHP/Rails freelancing.</p>

<p>I heard that there was a Ruby meetup happening in Adelaide and I caught the
train into town and <em>ran</em> to the meetup because I was running very late.</p>

<p>When I got there, people asked what I did and I told them about Coles, PHP and
Rails. They said &quot;you don&#39;t need to work for Coles anymore&quot; and three people
gave me their business cards and said I should apply for a job. I applied for
a job at SeaLink and was accepted.</p>

<p>At SeaLink, I got mentored by a team of &quot;senior&quot; Rails developers who had a
whole bunch of patience for my 19-year-old antics. I am very thankful to them
for the time that they spent mentoring me, as I believe it helped provide a
foundation for a career that I&#39;ve been doing for very close to 10 years.</p>

<p>There are plenty of juniors at the Melbourne Ruby Meetup. I know because I
help run the Hack Night where a lot of them attend also. If a junior from this
meetup was to tell you that they were actively looking for a job right now,
would you hire them? Probably not. There seems to be quite an aversion to
hiring juniors, and the main aversion is that juniors take up valuable shipping
time with mentoring time instead.</p>

<p>In the early days, there was a lack of available talent and so companies had
to hire whoever they could find. That&#39;s why I found it easy to get a Rails job
back then. I think we have once again reached that point where there just
isn&#39;t any talent to hire.</p>

<p>I&#39;ve been having a lot of discussions recently in the Ruby community about why
companies seem to be shying away from hiring juniors. Instead, these companies
want to hire mid-to-senior developers and do not want to have apprentices who
are learning alongside those mid-to-senior developers. </p>

<p>Lawyers, mechanics and plenty of other professions have apprenticeships, so
why don&#39;t programmers? It&#39;s pretty strange. I think it&#39;s because those
professions have had turnover in their companies enough to learn the lesson
about training for the future. This is still a young community where most
people have been doing it for less than 15 years. We need to think long term
about this: who will look after our code when we&#39;re gone?</p>

<h2>Hiring seniors</h2>

<p>Let&#39;s look at why companies want to hire mid-seniors in the first place. At
the companies I&#39;ve worked at, we&#39;ve wanted to hire a new mid-to-senior person
because our workload has gotten to the point where it&#39;s exceeding our
capacity. I figure that this is the same at other companies too. Like where
I&#39;ve worked -- and currently work -- you&#39;ll have people breathing down
your neck asking when bugs are going to be fixed or new features are going to
be developed.</p>

<p>To address this problem, you hire a new developer or rather: you try to hire a
new developer. You want a mid-to-senior developer because they have the
skills to instantly dive straight into your application with little-to-no
guidance and they can start shipping code.</p>

<p>However: the trick is finding someone who&#39;s available at the moment. In this
current climate, it&#39;s nearly impossible to hire a mid-to-senior Ruby developer
to come work for your company. What typically happens is that developers get
aggressively poached between companies.</p>

<p>Companies spend thousands of dollars on recruiters and lots of time posting to
job boards, for often very little good return. Companies spend this money to
hunt the elusive 10x Developer Rockstar Unicorns, but the Unicorns are no
longer out grazing in the sunny meadows, readily available for capture.
They&#39;re already working somewhere else and the conditions of where they work
are extremely good.</p>

<p>We, as a community, have drained the talent pool dry. </p>

<p>We&#39;re out of freely available Rockstar Unicorns and so it&#39;s time that we started to
grow our own.</p>

<p>Companies are addicted to hiring the top 5% or 10% of developers and ignoring
the rest. There is a lot of great talent in the remaining group of developers,
just waiting to be mentored. If they got that mentorship, we would be able to
bolster our community&#39;s best and brightest. What if the next person your
company mentored went on to become your next CTO? What if they went on to be
that &quot;10x engineer&quot; who can help out anyone on the team with anything? I
really believe companies are missing out on great talent by completely
ignoring it when it is non-obvious.</p>

<p>Too many companies are focussing on the short-term goals of shipping code,
rather than the long-term growth of their teams.</p>

<p>Companies hiring the best-of-the-best -- the people with <em>proven</em> great track
records -- and getting them to build what is essentially CRUD
applications which do, at best, a fancy version of string concatenation.</p>

<p>If we speak in terms of hiring piano players: you&#39;re hiring the Chopins,
Bachs, Liszts, and getting them to play <em>Mary Had A Little Lamb</em>.</p>

<p>You do not need to hire senior developers. You need to hire developers of any
skill level, mentor them and grow them into the next great bunch of
developers. Give these people a chance and train them on real world
applications that real people are using. These could be the next great people
that your company needs and you are not giving them the opportunity.</p>

<h2>Contributing back</h2>

<p>You might be thinking: what do <em>we</em> (as a company) get out of this? I think
that&#39;s backwards. The thinking should be &quot;we have earned so much from the
community, and now it&#39;s time to give back&quot;. If you invest in the long term
health of the community, it will pay dividends. In the long run, you will have
an active talent pool of developers who will be able to maintain your
application. In the short term, you&#39;ll be bolstering your team&#39;s productivity
with fresh talent.</p>

<p>You may think that you need to hire these best-of-the-best badasses because your
application is a large unmaintable behemoth monolith and only the badasses
can understand it. That you need seniors to navigate the spaghetti that is
your legacy code. That may indeed be the case. But in every monolith, there is
a tiny bit of functionality that a non-senior developer can work on improving
along with their skills, when that non-senior is paired with a senior developer.</p>

<p>It&#39;s OK to hire non-senior developers to work on real live production code.
We&#39;ve done it at Marketplacer and we&#39;re still in business. Your company will
not go down in flames because you hire a junior.</p>

<p>Yes, it&#39;s risky. Initially the cost of the employee is greater than what they
provide for the company. But with the right fostering, they can grow into the
best asset your company has ever had.</p>

<p><a href="http://juliaclavien.tumblr.com/">Julia Claven</a> has a great graph for this:</p>

<p><img src="http://40.media.tumblr.com/19866bd84fa2fb1e0a5a3d85e516c015/tumblr_o3rr4h5L0Q1su3l4oo1_r1_1280.png" alt="Liability to asset"></p>

<p>When the junior is initially hired, their dollar value to the company is less
than the output they produce. With good mentoring, they can get the other end
of the graph where their value to the company outweighs their salary.</p>

<p>There is an initial productivity hit -- that&#39;s true -- but that plateaus out
within 6 months if you do it right. At the end of it, rather than having one
developer, you have two developers. Even if the junior is <em>half</em> as productive
as the senior, then it&#39;s still a 1.5x growth in the productivity of your team.</p>

<p>At Marketplacer we&#39;ve hired juniors within the last year that I would consider
to be very productive members of the team, <em>and</em> they&#39;re great people to work
with to boot. We would&#39;ve missed out on these people if we didn&#39;t invest the
time in hiring and mentoring them and instead focussed on only hiring seniors
who had existing Rails app development experience.</p>

<p>You might be thinking &quot;but what if they leave&quot;? That&#39;s a risk you take with
any hire of any skill level. If people are leaving your company, you should be
reflecting on why they&#39;re leaving in the first place. Was it really them, or
was it your company? Does your company have a culture that someone would want
to leave? Is your company focussed on building a culture that people want to
stay in, or are they only interested in shipping code?</p>

<h2>Finding Juniors</h2>

<p>Where can you find those juniors to start with? Well, let&#39;s start with Code
Academies. Not any particular one -- although <a href="https://www.turing.io">Turing</a>
is my favourite. Code Academies solve <em>part</em> of this lack of mentoring problem.</p>

<p>Code academies get new programmers to pay thousands of dollars to learn the
tricks of the trade. Sometimes, these new programmers even get a &quot;guarantee&quot;
from the code academy that they&#39;ll get a job at the end of the course. The
code academies teach these newbies a range of programming skills. At the end
of this, the newbie programmers have enough skills to know the basics of
things like HTML, CSS, JavaScript and Ruby and can usually find their way
around a Rails app easily enough. These people are very &quot;green&quot; and then
they&#39;re thrust out into the community to work at companies.</p>

<p>Unfortunately, due to our senior hiring addiction, we&#39;re not hiring these
fresh faces. The code academies produce great talent, and we&#39;re not picking it
up. These people are left to struggle for months at a time in developing their
skills before they can even get a look in at a company. I&#39;ve spoken to many
juniors in that position.</p>

<p>Not all of these graduates have the time to spend doing that skill
development, as they often have full time jobs or other responsibilities to
take care of. Thankfully, they get a lot of assistance from their code
academies after they&#39;ve graduated. Well, at least the <em>good</em> code academies do
that.</p>

<p>I would love to see companies breaking their addiction to seniors and more
actively hiring from these code academies. More companies need to make
mentorship / apprenticeship a part of what they do. The students that graduate
from code academies are eager to learn and are, in my experience, very highly
motivated.</p>

<p>There are definitely juniors who have that same kind of eagerness-to-learn and
motivation who have never been to a code academy. These people have learned by
themselves and by being mentored by people in the community. I can think of
<em>at least</em> 5, perhaps even 10, of these people who would make great hires in a
company&#39;s mentorship / apprenticeship program.</p>

<p>If I were in charge of hiring at Marketplacer, I would hire a motivated
junior, pay them a wage well enough to live off and mentor them.</p>

<p>Asim Aslam (@chuhnk) had a good tweet about this too:</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">When hiring remember that someone once gave you an opportunity when you didn&#39;t have the experience. Hire smart raw talent and mentor them.</p>&mdash; Asim Aslam (@chuhnk) <a href="https://twitter.com/chuhnk/status/720756690493259777">April 14, 2016</a></blockquote>

<p>There&#39;s a great book I encourage you all to read: it&#39;s called <em>The Talent
Code</em>. As the subtitle says &quot;Greatness isn&#39;t born. It&#39;s grown.&quot; The book
covers how skills of all varieties are grown in sports, music and plenty of
other areas. All the industries that are covered in the book have active
mentorship and apprenticeship programs. Yet, this is not cared about in the
programming community for reasons mentioned earlier: we&#39;re still quite a young
community.</p>

<p>I&#39;ll let you in on the secret that&#39;s in that book: for anyone to get better at
anything, they need to practice the hell out of it. How do we expect to have
seniors to hire if we&#39;re not hiring juniors and letting them improve their
skills by practicing on real world applications?</p>

<p>So many people are talking about mentoring and hiring juniors. Let&#39;s start
doing it.</p>

<h2>Mentorship</h2>

<p>Now that I&#39;ve (hopefully) convinced you to hire a junior developer, you might
be wondering what you do once you have one.</p>

<p>I help run the Melbourne Ruby Hack Night and it&#39;s a judgement-free environment
where anyone and everyone can bring along a Ruby project and work on it. Some
people are even there for the first time learning about Ruby itself, which is
great to see. These Hack Nights work because these new developers feel safe
and welcome and that no question is too &quot;dumb&quot; to ask.</p>

<p>You can start mentoring at your company by fostering that Hack Night-esque
environment. It should be OK to put up your hand and ask a question about
<em>anything</em>. If the questioner is getting eyerolls, sighs, or other passive
aggressive signals from someone else, then that&#39;s not the kind of environment
where a junior is going to learn.</p>

<p>A great way to build that kind of fostering environment is to encourage pair
programming. Pairing with juniors on small tasks initially is a great way to
build up their confidence. When I&#39;ve been mentoring juniors, the number one
thing that I find that they&#39;re lacking isn&#39;t the skill, but the confidence.
They know the answer, but they aren&#39;t sure if it&#39;s the <em>right</em> answer. They
question if they&#39;re using the right syntax or even if they should be writing
the code that particular way. When a senior pairs with a junior, they can
encourage them to try out things and learn from the things that they try. If
the junior gets it wrong, the senior can ensure them that it&#39;s OK to get
things wrong and to guide them back on track. Pairing is the quickest way to
upskill a junior and I can highly, highly recommend it.</p>

<p>I paired daily with some developers when I worked at GetUp and in a few
months time they were confident Rails developers who could find their way
easily around that Rails application. I&#39;ve done the same at other companies too
and each time I&#39;ve seen great professional growth in the juniors that I&#39;ve
mentored. One of the best feelings in the world is when a junior says
&quot;Ahhh, I understand!&quot;.</p>

<p>Pairing also helps reinforce your own knowledge. If you can&#39;t explain
something to someone clearly, then you do not understand it well enough
yourself. Pairing is helpful to the junior because they get knowledge out of
it, but it&#39;s also helpful to the senior: they learn how to share what&#39;s in
their brain with other people in a clearer fashion.</p>

<p>What should you pair with your junior on? Well, Lydia Guarino has some good
tweets about that. </p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">5) For junior devs, a good guideline for scope is something that can be completed in 2-3 days. You want to keep your feedback loop short.</p>&mdash; Lydia Guarino (@lydiaguarino) <a href="https://twitter.com/lydiaguarino/status/720090654575996928">April 13, 2016</a></blockquote>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">5) Tasks with scope of more than 3 days are tasks that are not defined well enough. Break them down further.</p>&mdash; Lydia Guarino (@lydiaguarino) <a href="https://twitter.com/lydiaguarino/status/720090891231166464">April 13, 2016</a></blockquote>

<p>I agree with both of these. Juniors thrive best when they&#39;re given quick wins.
You want that nice tight feedback loop to keep their confidence growing. Every
time they &quot;win&quot; at code, their confidence gets that little bit more boosted.</p>

<p>Once they&#39;ve built up a bit of confidence, you can let them go solo on a task.
There isn&#39;t a set timeframe for when this happens; it&#39;s all about how
confident the junior is with their own abilities. </p>

<p>Let them loose on something small and make it clear that they can ask any
questions about what they&#39;re doing and that there is no wrong way of doing it.
Once they&#39;re done, get them to submit their work in a pull request -- you
might have to teach them what one is first -- and then sit together and review
it.</p>

<p>Sitting together is important here because &quot;why are you doing this?&quot; written
in text has no emotion, compared to it spoken with body language. Juniors may
interpret a &quot;why are you doing this?&quot; comment as aggressive like &quot;UGH! Why are
you doing this?&quot;. </p>

<p>Focussing on in-person communication helps establish a rapport between the
developers much better than text-based communication ever will.</p>

<p>If a junior has made a mistake in the pull request then you can discuss it
with them and correct the mistake. This way, that mistake will never make it
to a live production environment.</p>

<p>Code review also allows the senior to assess how well the junior
has been doing on the tasks they&#39;ve been given. If they&#39;re doing well on a
2-day task, then it&#39;s probably going to be OK to give them a 4-day task too.
If not, then some more mentoring may be required.</p>

<p>Ultimately, your mentorship should be about making the junior feel welcome and
safe within your team. In fact, this should be what&#39;s happening with
<em>everyone</em> in your team. Google ran a project that they called &quot;Project
Aristotle&quot;, wherein <a href="https://rework.withgoogle.com/blog/five-keys-to-a-successful-google-team/">they attempted to find how to build effective teams</a>. They interviewed hundreds of their own employees and they came up with 5 things:</p>

<p><img src="https://lh3.googleusercontent.com/eQ_WsRq5-q-m_41eEI6GLEObqpxBYJd1pm96gIa-eRSn-QXlPjwO5K6O-DHU8sxny3ChnIQE0mjpnXaaW7QAhQ=s0" alt="Google&#39;s 5 key dynamics for effective teams"></p>

<p>The #1 item on this list is &quot;Psychological safety&quot;: &quot;Team members feel safe to take risks and be vulnerable in front of each other.&quot;</p>

<p>Google is not special. They&#39;re made up of people just like your company is
made up of people. You should keep this in mind when mentoring your juniors,
and working with other people in your team.</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
]]></content>
 </entry>
 
 <entry>
   <title>Working with date ranges in Active Record</title>
   <link href="http://ryanbigg.com/2016/03/working-with-date-ranges-in-active-record"/>
   <updated>2016-03-09T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2016/03/working-with-date-ranges-in-active-record</id>
   <content type="html"><![CDATA[<p><strong>TL;DR: <a href="https://github.com/radar/by_star">Use the by_star gem and save yourself a lot of hassle</a>.</strong></p>

<p>When you&#39;re trying to get records for a particular date range in Active Record, for example from the beginning of the month to the end of the month, you may be tempted to write code like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">beginning_of_month</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">.</span><span class="nf">beginning_of_month</span>
<span class="n">end_of_month</span> <span class="o">=</span> <span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">end_of_month</span>
<span class="no">Post</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">created_at: </span><span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">.</span><span class="n">end_of_month</span><span class="p">)</span>
</code></pre></div>
<p>Let&#39;s say that the month is March 2016 (and it is, at the time of writing). This query will get you all posts between the 1st of March and the 31st of March, but not in the way you expect it. It will get you all posts between 00:00:00 of the 1st of March and 00:00:00 of 31st of March, which is probably not what you want, as it misses the last days posts completely. </p>

<p>What you&#39;ll want is all the posts between 00:00:00 of the 1st of March and 23:59:59.99999 of the 31st of March.</p>

<p>To do this, you <em>could</em> use <code>Time.current</code> instead:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">beginning_of_month</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">current</span><span class="p">.</span><span class="nf">beginning_of_month</span>
<span class="n">end_of_month</span> <span class="o">=</span> <span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">end_of_month</span>
<span class="no">Post</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">created_at: </span><span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">.</span><span class="n">end_of_month</span><span class="p">)</span>
</code></pre></div>
<p>This will give you the right set of posts, because <code>Time.current.end_of_month</code> is something like <code>Thu, 31 Mar 2016 23:59:59 UTC +00:00</code> (or it might even be in your local time zone, like `Thu, 31 Mar 2016 23:59:59 AEDT +11:00).</p>

<p>Or you could even do this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">beginning_of_month</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">.</span><span class="nf">beginning_of_month</span>
<span class="n">beginning_of_next_month</span> <span class="o">=</span> <span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">next_month</span>
<span class="no">Post</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">created_at: </span><span class="n">beginning_of_month</span><span class="p">.</span><span class="nf">.</span><span class="n">beginning_of_next_month</span><span class="p">)</span>
</code></pre></div>
<p>This will also give you the right set of posts, because <code>beginning_of_month.next_month</code> is something like <code>Fri, 1 Apr 2016 00:00:00 UTC +00:00</code> (or it might even be in your local time zone, like `Thu, 31 Mar 2016 23:59:59 AEDT +11:00).</p>

<p>Or you could use <a href="https://github.com/radar/by_star">the <code>by_star</code> gem</a>. I wrote this gem to easily query date /
time ranges in Active Record and it has saved me a lot of frustration. The above code examples would then become:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Post</span><span class="p">.</span><span class="nf">by_month</span><span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">)</span>
</code></pre></div>
<p>This will retrieve all posts by the current month, and that means all the posts between 00:00:00 of the 1st of March and 23:59:59.99999 of the 31st of March will be returned if I ran this query today.</p>

<h2>Conclusion</h2>

<p><a href="https://github.com/radar/by_star">Use the by_star gem and save yourself a lot of hassle</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Truncating indexes in Elasticsearch 2</title>
   <link href="http://ryanbigg.com/2016/02/truncating-indexes-in-elasticsearch-2"/>
   <updated>2016-02-22T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2016/02/truncating-indexes-in-elasticsearch-2</id>
   <content type="html"><![CDATA[<p>In pre-2.0 versions of elasticsearch, you may have been truncating indexes using <code>delete_by_query</code>. This has been moved in Elasticsearch 2.0 out to a plugin, which can be installed with:</p>
<div class="highlight"><pre><code class="language-" data-lang="">bin/plugin install delete-by-query
</code></pre></div>
<p>Where <code>bin/plugin</code> is located wherever you installed Elasticsearch. On my Mac,
that path is <code>/usr/local/Cellar/elasticsearch/2.2.0_1/libexec</code> because I
installed Elasticsearch with Homebrew. If you&#39;re on Ubuntu and you installed
it from Elasticsearch&#39;s own package repo, it will be at
<code>/usr/share/elasticsearch</code>.</p>

<p>I&#39;m using the Elasticsearch Ruby gem to interact with my Elasticsearch instance, and this is the code I&#39;m using to truncate the indexes:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Index</span>
  <span class="k">class</span> <span class="nc">Indexers</span>
    <span class="k">def</span> <span class="nf">truncate_indexes</span>
      <span class="n">client</span> <span class="o">=</span> <span class="no">Elasticsearch</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span>
      <span class="n">client</span><span class="p">.</span><span class="nf">delete_by_query</span><span class="p">(</span><span class="ss">index: </span><span class="n">index_names</span><span class="p">,</span> <span class="ss">body: </span><span class="p">{</span> <span class="ss">query: </span><span class="p">{</span> <span class="ss">match_all: </span><span class="p">{}</span> <span class="p">}</span> <span class="p">})</span>
      <span class="n">client</span><span class="p">.</span><span class="nf">indices</span><span class="p">.</span><span class="nf">flush</span><span class="p">(</span><span class="ss">index: </span><span class="n">index_names</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This method is called after each spec has finished running. The <code>index_names</code>
is just a list of indexes that the <code>Index::Indexers</code> class knows about. The
<code>delete_by_query</code> functionality is available here from the <code>delete-by-query</code>
plugin that was installed. The <code>indices.flush</code> call is necessary because the
next query may return data that the <code>delete_by_query</code> request was supposed to
delete. The <code>flush</code> call clears the transaction log and memory and writes data
to disk, ensuring that the next query won&#39;t return data that was deleted.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Programming Phoenix Review</title>
   <link href="http://ryanbigg.com/2015/12/programming-phoenix"/>
   <updated>2015-12-24T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2015/12/programming-phoenix</id>
   <content type="html"><![CDATA[<p>During this Christmas break I&#39;ve been taking some time off from writing Multitenancy with Rails -- which I&#39;ll get back to <em>after</em> Christmas is over -- and instead of writing books I&#39;m reading them.</p>

<p><a href="https://pragprog.com/titles/phoenix/">Programming Phoenix</a> is the only book that I&#39;ve been reading so far. I&#39;ve now read through the whole thing. Despite that I&#39;ve filed over 40 errata on the book (hey, it is a beta book) I <em>mostly</em> enjoyed the book.</p>

<hr>

<p>Programming Phoenix takes you through building a complete Phoenix application, introducing familiar concepts like controllers, models and templates. Those parts are familiar because they&#39;re much the same in Phoenix as they are in Rails; with some differences. Models have changesets. Templates relate to Views. Unlike Rails&#39; &quot;magical&quot; callbacks (in both models and controllers), these are just simply defined and used functions in Phoenix.</p>

<p>The latter chapters cover a range of things, like adding in live &quot;annotations&quot; to a video as its being watched. Think of that kind of like a live chatroom, except as the video plays, the annotations from previous watches also appear. This is done using Websockets, which are supported in Rails now with ActionCable, but it just <em>feels</em> a lot less hacky with Phoenix than it does with Rails. Elixir handles it better, <a href="http://www.phoenixframework.org/blog/the-road-to-2-million-websocket-connections">reaching two million connections recently</a> to a single (albeit quite beefy) server. I can&#39;t myself think of something to use Websockets for, but it is still exciting nevertheless.</p>

<p>The final two chapters, &quot;OTP&quot; (Open Telecom Platform) and &quot;Observer and Umbrellas&quot; cover some of the real strengths of Elixir and its underlying foundation of Erlang. These two chapters get you to build a system which connects to Wolfram Alpha&#39;s API, and then demonstrate how to keep this new system separate from the original application, while still being able to connect these two systems together and communicate between them. In the Ruby world, typically this would be done with HTTP calls, but in the Elixir world it is just a matter of communicating across Elixir processes. This inter-process communication is quite quick in comparison to HTTP because it doesn&#39;t have that overhead.</p>

<p>What I loved from these final chapters was seeing Elixir&#39;s supervision capabilities in action. In one of those latter chapters, you create a small application (<code>Rumbl.Counter</code>) which dies after a couple of seconds. A Supervisor for the main application (<code>Rumbl</code>) restarts this smaller application automatically when it dies. Ruby doesn&#39;t have that kind of capability; instead you need to rely on tools like upstart. It&#39;s quite nice having it built into the language because then you don&#39;t have to learn something completely different to ensure your servers don&#39;t fall over.</p>

<hr>

<p>The book is written by Jos&eacute; &quot;The Elixir Guy&quot; Valim, Chris &quot;The Phoenix Guy&quot; McCord and Bruce &quot;The <a href="https://pragprog.com/book/btlang/seven-languages-in-seven-weeks">Seven Languages</a> Guy&quot; Tate. It&#39;s great to see that it&#39;s the core developers who are invested in writing documentation for the community. Unlike a certain other community who has a main core developer who tells contributors to go fuck themselves when they ask for documentation regarding new features. Further to that point, both Jos&eacute; and Chris are extremely active on the #elixir-lang channel on Freenode, which is also great to see.</p>

<p>I am not sure if it is because the book has three authors, but there are some parts where I&#39;m reading it and enjoying it. Then there are sections like &quot;Anatomy of a Plug&quot; which goes <em>way too deep</em> into what a Plug is and how it works, and &quot;Exploring Ecto in the Console&quot; which, again, goes rather deep but doesn&#39;t tie that content <em>solidly</em> back to what we&#39;re doing in the book at that present moment. It&#39;d be like a fiction book <em>intricately</em> explaining what&#39;s in the house of the neighbour of the protagonist, but then the neighbour is not mentioned any more past that. </p>

<p>Like, why does it even matter that Ecto supports &quot;search functions like <code>ilike</code> and <code>like</code>&quot; or that Plug has <code>path_info</code> and <code>scheme</code> fields? Neither of those are relevant to the content at-hand at that point of time, and it feels disconnected. Those things should be mentioned in their respective guides, not in this book. Perhaps those sections will mysteriously disappear once this book reaches the production editing phase. </p>

<p>It feels like it would be better off showing what a Plug is within the context of the application... and they do that later on. Then after that go into the detail. But I could do without the pages and pages of extra seemingly &quot;useless&quot; info <em>before</em> I get hooked on what you&#39;re trying to sell.</p>

<p>In addition to that, there are some places where the content feels like it&#39;s saying &quot;we&#39;re going to do this now because I said we&#39;re going to do it&quot;; particularly in Chapter 5, the Authentication chapter. The chapter jumps to creating a registration changeset with no reason why it needs to be created, then later on explains why it has to be created. The explanation needs work there.</p>

<p>This is where the TDD/BDD of Rails 4 in Action holds up. In that book, it&#39;s more like &quot;we&#39;re going to do this because the test says we need to do it&quot;. Programming Phoenix saves that kind of testing for Chapter 8, with the given reason being that having testing throughout every chapter can be distracting and repetitive. While I can see the point there -- there was vigorous nodding over here reading Chapter 8&#39;s intro -- that very same testing can be helpful for demonstrating industry best-practices to newbies. Otherwise what you&#39;ll get is a bunch of newbies who read the first 7 chapters and think that writing code without tests is How It Is Done(tm). </p>

<p>Having tests also helps show off the usefulness of regression testing too. A thing broke and now we&#39;re going to write a test for a fix, watch the test go red, fix the thing, and watch the test go green. I think that kind of thing is helpful to newbies to have, as they&#39;re the most likely to make mistakes within their application.</p>

<p>Despite these complaints, the book has been worthwhile reading. I am mainly nitpicking, because I&#39;m an author of another programming book and I have moments where I think that I could write parts better. That has yet to be proven.</p>

<p>The parallels between Rails and Phoenix are helping with the learning of the new framework, and the differences between them are not too mind-bending to be beyond comprehension. The first 8 chapters cover topics that should be familiar to any Rails developer: starting a new project, adding in models and controllers. Adding validations to the model with changesets -- which are a <em>very</em> cool feature that I wouldn&#39;t be surprised if Active Record 6.0 picked up. </p>

<p>The remaining 4 chapters of the book venture off into territory that is probably unexplored by most Rails developers. I know that I personally have never spent time using Websockets or having to do anything like inter-process communication in Ruby. These last four chapters were a breath of fresh air for my skills. I feel like I really learned something valuable in those chapters.</p>

<p>Overall, Programming Phoenix is a fantastic book that will become even better once the authors spend more time on it and the editors do their bit. I really recommend reading this book, but with a small caveat: read <a href="https://pragprog.com/book/elixir/programming-elixir">Programming Elixir</a> first to get familiar with the underlying language of the Phoenix framework. Then it&#39;ll be smooth sailing for you.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Open source work</title>
   <link href="http://ryanbigg.com/2015/11/open-source-work"/>
   <updated>2015-11-16T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2015/11/open-source-work</id>
   <content type="html"><![CDATA[<p>As of today I am quitting all maintenance roles / responsibilities of any open source project I am involved in. I am now looking for maintainers for any of those projects. Volunteers can contact me@ryanbigg.com to discuss handovers.</p>

<p>I work full-time, a full 40 hours a week. Outside of that work, I am writing <a href="https://leanpub.com/multi-tenancy-rails-2">Multitenancy with Rails, 2nd Edition</a>. That work gets done primarily on my way into and out of the office, a 30 minute train journey one-way. I also spend the occasional weekend day doing some writing.</p>

<p>Outside of this full-time work, I have lots of &quot;life stuff&quot; that I&#39;d like to do. Things like spending time with my wife, going outside or just generally relaxing. Having open source emails sitting in my inbox during those times makes me feel guilty for doing those things instead of working on open source.</p>

<p>I do not have the time or energy to invest in open source any more. I am not being paid at all to do any open source work, and so the work that I do there is time that I could be spending doing &quot;life stuff&quot;, or writing. It is not fair to expect me to do <em>even more work</em> outside of my regular work, and then not get fairly compensated (time or money) for it. It&#39;s also a great recipe for burnout and making me just generally grumpy. To have an open source email sit in the inbox for days or weeks at a time just leads me to feeling more guilty about not having found time + energy to get to it yet.</p>

<p>It&#39;s for this reason that I&#39;ve decided to end all my engagements with open source effective today. I will not be responding to any comments, issues or pull requests that get filed on any repository that I am in charge of. The only thing I will be responding to (in this regard) is volunteers who want to take over the maintenance of the projects.</p>

<p>Thank you for respecting my decision.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Active Record, change_column and scales</title>
   <link href="http://ryanbigg.com/2015/11/active-record-change_column-and-scales"/>
   <updated>2015-11-10T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2015/11/active-record-change_column-and-scales</id>
   <content type="html"><![CDATA[<p>I discovered a fun quirk of Active Record today. I&#39;m not sure if it&#39;s a bug or if it&#39;s just me doing something silly, but in these kinds of cases I&#39;ve learned to lean more towards the latter. Here&#39;s how it&#39;s done.</p>

<p>Start with a fresh Rails app, using MySQL:</p>
<div class="highlight"><pre><code class="language-" data-lang="">rails new shop -d mysql
</code></pre></div>
<p>Create a new <code>Variant</code> model:</p>
<div class="highlight"><pre><code class="language-" data-lang="">rails g model variant price:decimal
</code></pre></div>
<p>We just so happen to know that we need to specify a precision (numbers before the decimal) and scale (numbers after the decimal) for this column, and we (read: I) can never remember the syntax for that in the <code>generate</code> command, so we edit the migration to provide both a <code>precision</code> and <code>scale</code> for this column, turning it into this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CreateVariants</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:variants</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">decimal</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">precision: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">scale: </span><span class="mi">2</span>

      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span> <span class="ss">null: </span><span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Running this migration with <code>rake db:migrate</code> will generate a <code>db/schema.rb</code> which looks like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="p">.</span><span class="nf">define</span><span class="p">(</span><span class="ss">version: </span><span class="mi">20151110060233</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">create_table</span> <span class="s2">"variants"</span><span class="p">,</span> <span class="ss">force: :cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">decimal</span>  <span class="s2">"price"</span><span class="p">,</span>      <span class="ss">precision: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">scale: </span><span class="mi">2</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"created_at"</span><span class="p">,</span>                          <span class="ss">null: </span><span class="kp">false</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"updated_at"</span><span class="p">,</span>                          <span class="ss">null: </span><span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>A <code>show columns from variants;</code> MySQL query will show this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">+------------+---------------+------+-----+---------+----------------+
| Field      | Type          | Null | Key | Default | Extra          |
+------------+---------------+------+-----+---------+----------------+
| id         | int(11)       | NO   | PRI | NULL    | auto_increment |
| price      | decimal(10,2) | YES  |     | NULL    |                |
| created_at | datetime      | NO   |     | NULL    |                |
| updated_at | datetime      | NO   |     | NULL    |                |
+------------+---------------+------+-----+---------+----------------+
</code></pre></div>
<p>Note here that the <code>price</code> field has a <code>precision</code> of 10 and <code>scale</code> of 2; that&#39;s indicated by <code>decimal(10,2)</code>. That&#39;s good, because that&#39;s what we specified inside our migration.</p>

<p>Let&#39;s stop here and create three variants in our console:</p>
<div class="highlight"><pre><code class="language-" data-lang="">rails console
Variant.create(price: 18.49)
Variant.create(price: 26.99)
Variant.create(price: null)
</code></pre></div>
<p>These are just for demonstration purposes. No real data was harmed in the writing of this blog post.</p>

<p>The <code>price</code> column here doesn&#39;t have a default value and it allows for null values. There&#39;s data in here already which has <code>null</code> and that just won&#39;t do, because we want prices to always be a decimal number to make it easy to manage in our code. Having to do <code>to_f</code> to convert <code>nil</code> to <code>0.0</code> is not that smart. We&#39;re better than that!</p>

<p>So we&#39;ll go ahead and create a new migration to do the the <code>default</code> and <code>null</code> modifications to this <code>price</code> column:</p>
<div class="highlight"><pre><code class="language-" data-lang="">rails g migration add_default_to_variants_price
</code></pre></div>
<p>Inside that migration, we write this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">AddDefaultToVariantsPrice</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="no">Variant</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">price: </span><span class="kp">nil</span><span class="p">).</span><span class="nf">update_all</span><span class="p">(</span><span class="s2">"price = 0"</span><span class="p">)</span>
    <span class="n">change_column</span> <span class="ss">:variants</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:decimal</span><span class="p">,</span> <span class="ss">default: </span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Pretty simple stuff. We change all the variants where the price is <code>nil</code> (<code>null</code>) to have a price set to <code>0</code>. Then we set the <code>default</code> to be <code>0.0</code> and also tell it that we don&#39;t want <code>null</code> values in this column. If we didn&#39;t do the <code>update_all</code> call first, AR would bomb out because we tried to set <code>null: false</code> on a column which already had nulls.</p>

<p>We then run this migration (<code>rake db:migrate</code>), and this is where things go bad.</p>

<p>To start with, let&#39;s open <code>rails console</code> and run <code>Variant.first</code>. This is the variant that has a price set to <code>26.99</code>. Well, it&#39;s not that any more:</p>
<div class="highlight"><pre><code class="language-" data-lang="">#&lt;Variant id: 1, price: 27,
</code></pre></div>
<p>Yes, it&#39;s now 27.</p>

<p>What happened? Let&#39;s look at our <code>schema.rb</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="p">.</span><span class="nf">define</span><span class="p">(</span><span class="ss">version: </span><span class="mi">20151110061535</span><span class="p">)</span> <span class="k">do</span>

  <span class="n">create_table</span> <span class="s2">"variants"</span><span class="p">,</span> <span class="ss">force: :cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">decimal</span>  <span class="s2">"price"</span><span class="p">,</span>      <span class="ss">precision: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">default: </span><span class="mi">0</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"created_at"</span><span class="p">,</span>                            <span class="ss">null: </span><span class="kp">false</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"updated_at"</span><span class="p">,</span>                            <span class="ss">null: </span><span class="kp">false</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div>
<p>Ok, that says it&#39;s got a <code>precision: 10</code>, but where&#39;s the scale from the first migration gone? It&#39;s gone away.</p>

<p>Let&#39;s confirm this in MySQL too:</p>
<div class="highlight"><pre><code class="language-" data-lang="">mysql&gt; SHOW COLUMNS from variants;
+------------+---------------+------+-----+---------+----------------+
| Field      | Type          | Null | Key | Default | Extra          |
+------------+---------------+------+-----+---------+----------------+
| id         | int(11)       | NO   | PRI | NULL    | auto_increment |
| price      | decimal(10,0) | NO   |     | 0       |                |
| created_at | datetime      | NO   |     | NULL    |                |
| updated_at | datetime      | NO   |     | NULL    |                |
+------------+---------------+------+-----+---------+----------------+
</code></pre></div>
<p>The precision has stayed at 10, but the scale has changed to 0.</p>

<p>But why does this happen?</p>

<p>Because in the second migration, we didn&#39;t specify a precision and a scale.</p>

<p>Instead of this line:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">change_column</span> <span class="ss">:variants</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:decimal</span><span class="p">,</span> <span class="ss">default: </span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
</code></pre></div>
<p>We should have:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">change_column</span> <span class="ss">:variants</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:decimal</span><span class="p">,</span> <span class="ss">precision: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">scale: </span><span class="mi">2</span><span class="p">,</span> <span class="ss">default: </span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
</code></pre></div>
<p>Otherwise, it defaults to a precision of 10 and scale of 0 <em>and</em> helpfully rounds up your prices for you.</p>

<p>Isn&#39;t that handy?</p>
]]></content>
 </entry>
 
 <entry>
   <title>My self-publishing success story</title>
   <link href="http://ryanbigg.com/2015/08/my-self-publishing-success-story"/>
   <updated>2015-08-06T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2015/08/my-self-publishing-success-story</id>
   <content type="html"><![CDATA[<p>Everyone loves a good success story. Here&#39;s mine. I&#39;ll cover my experience
going through a traditional publisher with Rails 3 in Action and have that
fail, and then discovering joy and happiness through the path of self-
publishing my own books through Leanpub.</p>

<h3><a name='rails-3-in-action'></a><a href='#rails-3-in-action'>Rails 3 in Action</a></h3>

<p>I was approached in 2010 to write a book called <a href="https://manning.com/katz">Rails 3 in
Action</a>. I was so very excited to join that project
and write a book. Excited because up until that point, the longest thing that
I had written was a few of the Rails guides and my own blog posts. A book
would be an excellent way to share my knowledge about Rails with the worldwide
Rails community. So I signed up.</p>

<p>Then it didn&#39;t go so well. I wrote about that in a couple of other blog posts, mainly <a href="http://ryanbigg.com/2011/11/don-t-print-hard-copies">&quot;Don&#39;t Print Hard Copies&quot;</a>, <a href="http://ryanbigg.com/2010/12/the-writing-process">&quot;The Writing Process&quot;</a> and <a href="http://ryanbigg.com/2012/11/no-more-writing-for-manning/">&quot;No more writing for Manning&quot;</a>. The long and short of it is that I found Manning incredibly hard to work with due to their tooling and my tendency to want to control everything from how the book looks to when I push updates to its content.</p>

<p>So I quit that project because it was causing me a lot of stress to have to
deal with the tooling and to not be in control of things.</p>

<p>Then I rejoined it again in November last year because Steve Klabnik burned
out from the tooling and writing process, and also because I wanted to not
have Steve&#39;s work go to waste. I brought on Rebecca Skinner as a co-author at
that time too. We set about updating the content for Rails 4.2.</p>

<p>Then I quit again in April of this year due to the same reasons I quit the
first time and let Rebecca finish off the book. It&#39;s currently going through
proofing through Manning&#39;s processes. And by &quot;currently&quot; I mean it&#39;s been in
there since April. 3 months to proof and print a book seems a bit long in my
opinion, but what can you do about it?</p>

<h3><a name='multitenancy-with-rails'></a><a href='#multitenancy-with-rails'>Multitenancy with Rails</a></h3>

<p>After I quit Rails 3 in Action I was burned out quite heavily. I took time off
from writing and at the end of 2011 I moved from Sydney to Melbourne. Then when I got to Melbourne,
I had the itch to write something again: <a href="https://leanpub.com/multi-tenancy-rails">a book about building a multitenanted Rails application</a>. I talked with my friends Phil Arndt, Josh Adams and Rob Yurkowski about this project, and somehow <a href="https://leanpub.com">Leanpub</a> came up.</p>

<p>Leanpub lets you write books in Markdown and upload that Markdown to a Dropbox
folder. To push new updates, you go into your account&#39;s dashboard and hit the
&quot;Publish&quot; button. This was a welcome change from writing in XML and uploading
books to an SVN server and then using a website built in the late-90s or early
&#39;00s!</p>

<p>(Alternatively, you can generate your own files and upload them to Leanpub too if you don&#39;t want to write in Markdown. This is what I&#39;ve been doing for <a href="https://leanpub.com/ddr">Deep Dive Rails</a> and it&#39;s working wonders. More on that in probably a different blog post.)</p>

<p>The switch to Leanpub was... it was life-changing. Publishing a book didn&#39;t
have to be hard! I could just push a button whenever I felt like it and the
readers could be reading what I wrote in a matter of minutes. Leanpub made
everything so much easier compared with Manning.</p>

<p>I wrote Multitenancy with Rails over about a year and all the while during
that time, something interesting was happening: people were buying the book
and I was getting money for it each month. I originally sold the book for $10
and then raised the price $5 for every chapter that I completed. This way, it
gave people the incentive to get on board (Rails pun!) with reading the book
before it was complete.</p>

<p>This had two awesome effects:</p>

<ol>
<li>I would get money each month as more people bought it.</li>
<li>I would get feedback on the early drafts from readers.</li>
</ol>

<h3><a name='royalties'></a><a href='#royalties'>Royalties</a></h3>

<p>Here&#39;s the royalties chart for all of my income from Leanpub since Feb 2012 to the current day.</p>

<p><img src="/images/success-story/leanpub-royalties.png" alt="Leanpub Royalties"></p>

<p>Contrast it with the royalties I get from Manning from June 2010 to the current day:</p>

<p><img src="/images/success-story/manning-royalties.png" alt="Manning Royalties"></p>

<p>To be fair, the dry-spell since January 2012 is partly because Manning
overpaid my royalties by $3.8k. Just a small clerical error, I&#39;m sure. But
since then, Rails 4 in Action has been earning money I haven&#39;t seen anything
for our work on it.</p>

<p>The monthly income is a great motivator to the writing process because it&#39;s a
monthly reminder that people think it&#39;s worthwhile buying and (probably)
reading the books that I publish on Leanpub.</p>

<p>Secondly, the royalty split between Leanpub is much nicer: they take a 10%
slice of the royalties, + 50 cents. This means that when I sell a book for
$20, I make $17.50 from that, and Leanpub makes $2.50. Roughly 35% of that
$17.50 ($6.125) goes to tax, but the rest ($11.35) is mine to keep. I <em>might</em>
get some of that tax back in the form of a tax return, but it&#39;s not something that I expect.</p>

<p>Here&#39;s a pie chart:</p>

<p><img src="/images/success-story/leanpub-royalty-split.png" alt="Leanpub Royalties split"></p>

<p>For Manning, it&#39;s harder to break this down because the royalty rates vary
between 12.5% for print books, and 50% for ebooks. I get a royalty statement
from Manning every quarter for Rails 3 in Action which has the numbers so I
can attempt to break it down. I don&#39;t yet get a royalty statement for Rails 4
in Action because it has not been published.</p>

<p>Rails 3 in Action has sold 2,003 print books and 2,371 ebooks. I had expected
these numbers to be more skewed towards ebooks, but there you go. The price
has been the same forever: $50 for the print book with a free ebook (counted
as a print book sale) or $40 for just the ebook. So with those numbers in
mind, the total made for Rails 3 in Action over all time has been $100,150 for
the print books and $94,480 for the ebooks, which is a grand total of $194,630.</p>

<p>Using the royalty split above, we can work that out that the authors get 12.5%
of $100,150, which is $12,518.75 for print books and 50% of $94,480 which is
$47,240. A grand total of $59,758.75.</p>

<p>The rest of the money, 87.5% of $100,150 ($87,631.25) and 50% of $94,480
($47,240) goes to Manning. A grand total of $134,871.25.</p>

<p>Using those figures, I can generate a pie chart similar to the Leanpub one above:</p>

<p><img src="/images/success-story/manning-royalty-split.png" alt="Manning Royalties split"></p>

<p>(Tax isn&#39;t shown on this chart because the &quot;Authors&quot; royalties are split
between Yehuda and myself and we pay different tax rates. While I know my tax
rate, I don&#39;t know Yehuda&#39;s!)</p>

<p>Manning receives over two-thirds of the money earned for Rails 3 in Action and
will earn the same split for Rails 4 in Action. This is a personal sore point
for me, because I&#39;m a greedy bastard and for plenty of other reasons. For
instance, it makes sense that the royalties earned for a print book are low,
because producing print books takes effort, time and money. So that&#39;s logical.
But a 50/50 cut for ebooks seems a bit, well, unbalanced.</p>

<p>Clearly though, publishing my books through Leanpub is the better option if
what I&#39;m optimising for is money. Leanpub gets 10% + 50c of whatever book I
sell. Manning gets between 50-87.5%, which is almost 4-7 times as much as
Leanpub.</p>

<p>However, I don&#39;t optimise for money. If your intention is to write a book for
the sole purpose of earning extra dollar dollar bills, then I have some advice
for you: you&#39;re damn crazy and you shouldn&#39;t write it because the probability
of you earning enough money to be happy is extremely low. Books don&#39;t earn
even close to a sustainable level of income.</p>

<p>What I optimise for is (selfishly) my own happiness first, then reader
happiness a very close second. My reasoning for that is that if I don&#39;t enjoy
writing a book, then the book won&#39;t be very fun to read. My own happiness
comes first to make sure that a good book comes out at the end.</p>

<p>That&#39;s a nice segue into our next topic: writing tools and feedback cycles.</p>

<h3><a name='writing-tools'></a><a href='#writing-tools'>Writing tools and feedback cycles</a></h3>

<p>I want to talk about two things here: feedback cycles and writing tools.</p>

<h4>Feedback cycles</h4>

<p>When publishing a book, you kinda want to know immediately if anyone&#39;s reading
it. Peoeple <em>buying</em> the book is different to people <em>reading</em> the book. A
good indicator for this is the feedback that comes through in the form of,
mostly, errata reporting. Errata reporting means that people found errors in
the book, and that means that they read the book! That&#39;s great!</p>

<p>Fixing those errata reports quickly is essential to producing a high-quality
book. The faster you can kick out a new edition of the book and solve the
error, the sooner it&#39;ll be that nobody will ever come across <em>that</em> particular
error again.</p>

<p>With Manning, the process was this:</p>

<ol>
<li>Find mistake in book and fix it.</li>
<li>Commit the fix to SVN.</li>
<li>Get rejected for the commit because some other author has pushed their book to SVN since the last time you did.</li>
<li>Checkout from SVN.</li>
<li>Commit the fix to SVN for real.</li>
<li>Go to Manning&#39;s author-only site and login.</li>
<li>Find your book in the list of books.</li>
<li>Click the gear icon.</li>
<li>Find the chapter that you updated.</li>
<li>Scroll down the list of revisions for that chapter.</li>
<li>Click the radio button to select &quot;Latest&quot; (which uses the latest version of that chapter) and then click &quot;Update&quot;. This flags this particular revision to be ready for Manning&#39;s system.</li>
<li>Wait for someone from Manning to publish a new MEAP copy, which can take weeks.</li>
</ol>

<p>12 steps and it takes a couple of weeks (usually) until the book is updated. Oh, and at step #11 you might be told that somewhere in your 2,000+ line XML file, something is invalid.</p>

<p>With Leanpub, the process is this:</p>

<ol>
<li>Find mistake in book and fix it.</li>
<li>Commit change to GitHub.</li>
<li>Copy file to Dropbox folder. (can be optional if you get Leanpub to read from GitHub!)</li>
<li>Go to Leanpub&#39;s author-only area for the book.</li>
<li>Click &quot;Publish&quot;, &quot;Publish New Version&quot;</li>
<li>Hit the big blue button &quot;Publish new version&quot;.</li>
</ol>

<p>6 steps and the book is available instantly for readers! Markdown doesn&#39;t fail
to compile when it&#39;s invalid, it just looks weird and the weirdness is generally quite obvious (everything is plus-sized after a certain point, for instance) and so it&#39;s easy enough to fix.</p>

<p>During the publishing process you can enter release notes as well. On Leanpub,
the choice to release a new version of a book is in the hands of the author,
and not the publishing company. This is the way it should be: the author
typically has one book on the go, whereas a publishing company has many. This
6-step process is the kind of process I could only dream about when writing
Rails 3 in Action.</p>

<p>For readers to send feedback to a Manning book they have to submit new topics
to a forum. This makes it really hard to track which topics have been
addressed and which haven&#39;t. For the update of Rails 4 in Action, we created a
repository on GitHub at
<a href="https://github.com/rubysherpas/r4ia">rubysherpas/r4ia</a> and asked readers to
file issues there. That way, when we fixed an issue on the book properly, we
could close it with a simple commit message like &quot;Fixes rubysherpas/r4ia#10&quot;.</p>

<p>If I was collaborating on a book again, I would definitely go down the GitHub
repo-for-errata path again because it makes that aspect of the writing process
so much simpler.</p>

<p>For Multitenancy with Rails, I&#39;ve gone with more of a personal approach: I&#39;ve
included my email in the foreword to the book and asked if people encounter
errors that they email me directly. This system works really well as I use the
unarchived emails as an indication of what book bugs haven&#39;t been fixed yet.</p>

<p>I also built a review tool called <a href="https://github.com/radar/twist">Twist</a>,
originally for Manning&#39;s DocBook format but then ported that across to
Leanpub&#39;s Markdown format. The README there has a great image showing you what
it looks like. The purpose of this was for people to leave comments on
particular <em>elements</em> (paragraphs, code blocks, images) of the book and then I
could see specifically what element they were commenting on. That worked
really well for Rails 3 in Action and both editions for Multitenancy with
Rails too.</p>

<h3>Conclusion</h3>

<p>I wrote this post to answer questions that I get from people who ask what the
writing process was like. The two main things that I tell people that bugged
me about writing for a publisher were the writing tools and the royalty split.</p>

<p>Bad writing tools definitely hampered my ability to write, especially when I
spent a lot of my time fighting SVN to accept my files, or tracking down where
the XML files were invalid. Using Markdown, GitHub, and Leanpub&#39;s Dropbox
integration is one of the winning combinations for writing a book, and it&#39;s
what I use for <a href="https://leanpub.com/multi-tenancy-rails">Multitenancy with Rails</a>.</p>

<p>I use Asciidoc and GitHub for writing <a href="https://leanpub.com/ddr">Deep Dive Rails</a>. It took a little while to learn how the <code>asciidoctor</code> gem worked and then a little more time to figure out the PDF configuration, but it&#39;s looking really great now and I can tweak it very easily. I have control of what my book looks like! As an author, that&#39;s a pretty exciting thing because a book is a personal thing.</p>

<p>Yeah, I&#39;ve spent a lot of time messing around with the <code>asciidoctor</code> gem but
it&#39;s been way more fun than bashing my head against SVN or XML. It&#39;s way more
understandable, for starters!</p>

<p>There&#39;s nothing that can be done about the royalty split for Rails 3/4 in
Action. To be frank about it, I signed a contract that allows Manning to take
full ownership of Rails 3/4 in Action and to pay me what they pay me. It means
that even if I ask them super-nicely (and not-so-super-nicely), they still
won&#39;t give me the rights to the book. It&#39;s absolutely my fault, and I have
learned my lesson from that. I&#39;ve fulfiled my end of the bargain, and here&#39;s
hoping that they (again) fulfil theirs by paying us authors the royalties we
get.</p>

<p>What I can do in the future is avoid publishers altogether and just continue
self-publishing. It&#39;s what I advise anyone who&#39;s considering writing a book
these days. Self-publishing allows you to get your book out there faster than
through a traditional publisher and you get to have complete control of it.</p>

<p>So if you&#39;re considering writing a book, check out
<a href="https://leanpub.com">Leanpub</a>&#39;s offering and see if it suits you.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Deploying a Rails application on Ubuntu: Passenger Edition</title>
   <link href="http://ryanbigg.com/2015/07/deploying-a-rails-application-on-ubuntu-passenger-edition"/>
   <updated>2015-07-08T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2015/07/deploying-a-rails-application-on-ubuntu-passenger-edition</id>
   <content type="html"><![CDATA[<p>In this guide, I&#39;ll cover the basics of deploying a Rails application to Ubuntu 14.04 on a Digital Ocean box. This guide will work on non-Digital-Ocean boxes too, and it might work on different Ubuntu versions. Try it out and find out :)</p>

<p>If you find any mistakes in this guide, please let me know in the comments below.</p>

<p>In the guide, we&#39;ll be using:</p>

<ul>
<li><a href="https://github.com/postmodern/ruby-install"><strong>ruby-install</strong></a>: To install a Ruby version system-wide.</li>
<li><strong>nginx</strong>: A webserver to serve our Rails application with.</li>
<li><a href="https://www.phusionpassenger.com/"><strong>Passenger</strong></a>: The proxy between nginx and Rails which automatically starts + stops Rails application &quot;worker processes&quot;.</li>
<li><strong>Capistrano</strong>: A very helpful tool that automates your deployment workflow.</li>
</ul>

<p>While you <em>could</em> serve traffic from your production site using <code>rails s</code>, there are many issues with that:</p>

<ol>
<li>It runs on port 3000, whereas most websites run on port 80.</li>
<li>If it dies, you will need to restart it manually.</li>
<li>It will crash under heavy load because the web server it uses (WEBrick) has not been designed for production use.</li>
</ol>

<p>So instead, we&#39;ll be using nginx and Passenger.</p>

<p>Before we can run our Ruby on Rails application on the server, we&#39;ll need to install Ruby.</p>

<h2>Installing a Ruby version</h2>

<p>In order to install Ruby, we&#39;ll need to install the <code>build-essential</code> package. This package gives us the build tools that we&#39;ll need to compile Ruby.</p>

<p>We first need to make sure that our <code>apt</code> sources are up-to-date. If they&#39;re not, installing the <code>build-essential</code> pcakage might fail. We will do this by logging into the machine as root, and then running this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get update
</code></pre></div>
<p>Next, we&#39;ll need to install the <code>build-essential</code> package itself:</p>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install build-essential
</code></pre></div>
<p>With those tools installed, we will now install a Ruby version with the <code>ruby-install</code> tool. Follow the <a href="https://github.com/postmodern/ruby-install#install">install steps for ruby-install</a> (reproduced here for your convienience):</p>
<div class="highlight"><pre><code class="language-" data-lang="">wget -O ruby-install-0.5.0.tar.gz https://github.com/postmodern/ruby-install/archive/v0.5.0.tar.gz
tar -xzvf ruby-install-0.5.0.tar.gz
cd ruby-install-0.5.0/
make install
</code></pre></div>
<p>We will now install Ruby 2.2.2 system-wide by running this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-install --system ruby 2.2.2 -- --disable-install-rdoc
</code></pre></div>
<p>We&#39;re installing it system-wide so that it&#39;s available for all users on this machine.  The <code>--disable-install-rdoc</code> tells Ruby to skip the part about installing RDoc documentation for Ruby on this machine. This is a production machine and we don&#39;t need RDoc.</p>

<blockquote>
<p>Eventually, we&#39;ll be having each application have its own user on this machine. While we <em>could</em> use <code>ruby-install</code> on a per-user basis, it makes much more sense (and is easier!) to have it on a system-wide level.</p>
</blockquote>

<p>Once that command finishes running, let&#39;s remove the <code>ruby-install</code> package + directory:</p>
<div class="highlight"><pre><code class="language-" data-lang="">rm -r ~/ruby-install-*
</code></pre></div>
<p>It might make sense at this point to install Rails, but we should definitely let Bundler take care of that during the application deployment process. Let&#39;s just install Bundler for now:</p>
<div class="highlight"><pre><code class="language-" data-lang="">gem install bundler
</code></pre></div>
<h2>Deploying the application</h2>

<p>To deploy the application, we&#39;re going to use a gem called Capistrano. Capistrano has been a mainstay of the Ruby community for some time now due to its flexibility and reliability.</p>

<p>With Capistrano, we&#39;ll be able to (git) clone the Rails application to the server and run any necessary configuration steps that are required to get our application running, such as <code>bundle install</code>, <code>rake assets:precompile</code>, and configuring a database.</p>

<h3>Creating a new user</h3>

<p>The first thing to do is to create a new user on the machine where we&#39;re deploying to for the application. This user will be sandboxed into its own directory, which means the application will only have access to that user&#39;s home directory. </p>

<blockquote>
<p>If we installed the application as root and Rails had a Remote Code Execution vulnerability, the box could get taken over by some malicious hackers.</p>
</blockquote>

<p>Let&#39;s create this new application user now:</p>
<div class="highlight"><pre><code class="language-" data-lang="">useradd -d /home/rails_app -m -s /bin/bash rails_app
</code></pre></div>
<p><strong>I&#39;ve used <code>rails_app</code> here just as an example. You should use your application&#39;s name.</strong></p>

<p>The <code>-d</code> option specifies the home directory of the user and the <code>-m</code> option tells <code>useradd</code> to create that directory if it doesn&#39;t already exist. The <code>-s</code> option tells it that we want to use the <code>/bin/bash</code> shell.</p>

<p>Next, we&#39;ll want to make it so that we can connect to the server as this user. This is so that when we deploy the application, we do so as the user that we just created. If you&#39;ve setup GitHub already, you probably already have setup an SSH key. If not, follow <a href="https://help.github.com/articles/generating-ssh-keys/">this excellent guide from GitHub</a>.</p>

<p>To allow you to connect to the application server as the new user, we&#39;ll need to copy over the public key (<code>~/.ssh/id_rsa.pub</code>) to the server. The easiest way to do this is to copy it over to root first. On your own personal computer, run this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">scp ~/.ssh/id_rsa.pub root@yourmachine.example.com:~/key
</code></pre></div>
<p>Then on the server, move the key over to the new user&#39;s home directory:</p>
<div class="highlight"><pre><code class="language-" data-lang="">mkdir -p /home/rails_app/.ssh
mv key /home/rails_app/.ssh/authorized_keys
chown -R rails_app /home/rails_app/.ssh
chmod 600 /home/rails_app/.ssh/authorized_keys
</code></pre></div>
<p>Once you&#39;ve run those commands, you should be able to SSH into the machine as that user without requiring a password.</p>
<div class="highlight"><pre><code class="language-" data-lang="">ssh rails_app@yourmachine.example.com
</code></pre></div>
<p>If you run <code>ruby -v</code> after connecting, you should see this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-linux]
</code></pre></div>
<p>This indicates that Ruby can be found for your user, and that we can proceed to deploying the application.</p>

<p>Before we move onto the next section, we&#39;ll need to generate a &quot;deploy key&quot; for this user. This will be used by GitHub to grant this user access to the repository on GitHub.</p>

<p>We will generate that key by running this command on the server as our application&#39;s user:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ssh-keygen -t rsa
</code></pre></div>
<p>On our repository on GitHub, we can go to &quot;Settings&quot;, then &quot;Deploy Keys&quot; and add a new deploy key:</p>

<p><img src="/images/ubuntu-deploy-guide/add_deploy_key.png" alt="Add deploy key"></p>

<p>In the &quot;Title&quot; we can put whatever we feel like, but in the &quot;Key&quot; field we&#39;ll need to put the contents of the <code>~/.ssh/id_rsa.pub</code> file that the <code>ssh-keygen</code> command generated. Create the new deploy key now.</p>

<p>We&#39;ll need to set Git up on this machine so that we can clone the repo to test it out, and later to actually deploy the application. Let&#39;s install it now with this command <strong>ran as root</strong>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install git-core
</code></pre></div>
<p>Switch back to the <code>rails_app</code> user. We can test if this key is working by running <code>git clone git@github.com:you/example_app.git</code> (or whatever your repo is). If the key is setup correctly, then the clone will work.</p>

<h2>Deploying with Capistrano</h2>

<p>Next, we&#39;ll automate the deployment of our code to the server with Capistrano. We can install Capistrano as a gem dependency of the application by adding these two lines to the <code>Gemfile</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">'capistrano-rails'</span>
<span class="n">gem</span> <span class="s1">'capistrano-passenger'</span>
</code></pre></div>
<p>We can then run <code>bundle install</code> to install <code>capistrano-rails</code> and <code>capistrano-passenger</code> and their dependencies. To install Capistrano into our application, we&#39;ll need to run <code>bundle exec cap install</code>. This will install a couple of files in our application that will be used to configure how Capistrano deploys the application to our servers.</p>

<p>The first of these files is <code>config/deploy.rb</code>. Near the top of this file are these two lines:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">'my_app_name'</span>
<span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">'git@example.com:me/my_repo.git'</span>
</code></pre></div>
<p>We will need to change the <code>application</code> to match the name of our application (<code>rails_app</code> is mine, but your application name is different!), and change the <code>repo_url</code> to be the <code>git@github.com</code> URL for our application. We should also change the path of the application so that it deploys to the home directory of the user:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">'/home/rails_app/app'</span>
</code></pre></div>
<p>Next, we&#39;ll need to tell Capistrano where to deploy the application to. We can do this by adding this as the first line in <code>config/deploy/production.rb</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">server</span> <span class="s1">'app.example.com'</span><span class="p">,</span> <span class="ss">user: </span><span class="s1">'rails_app'</span><span class="p">,</span> <span class="ss">roles: </span><span class="sx">%w{app db web}</span>
</code></pre></div>
<p>Finally, we&#39;ll need to tell Capistrano to run <code>bundle install</code> when the application is deployed, as well as to run the migrations and compile the assets. We can do this by uncommenting these lines in <code>Capfile</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'capistrano/bundler'</span>
<span class="nb">require</span> <span class="s1">'capistrano/rails/assets'</span>
<span class="nb">require</span> <span class="s1">'capistrano/rails/migrations'</span>
<span class="nb">require</span> <span class="s1">'capistrano/passenger'</span>
</code></pre></div>
<p>Here&#39;s what each of those do:</p>

<ul>
<li><code>capistrano/bundler</code> is responsible for running <code>bundle install</code> (with some fancy deployment options as you&#39;ll see later) during an application deployment. This ensures that the gems on the server are up to date with whatever&#39;s specified in the <code>Gemfile.lock</code>.</li>
<li><code>capistrano/rails/assets</code> is responsible for precompiling the assets upon deploy.</li>
<li><code>capistrano/rails/migrations</code> is responsible for running the migrations for a new release (if any) during a new deploy.</li>
<li><code>capistrano/passenger</code> will restart the application on every single deploy, ensuring that only the latest code is running.</li>
</ul>

<p>This sets up most of the Capistrano configuration. There&#39;s a couple more pieces that we will address as they come up. </p>

<p>There&#39;s two more thing to do before we can deploy the application to the server: we&#39;ll need to install the development headers for whatever database system we&#39;re using and we&#39;ll need to install a JavaScript runtime. </p>

<h2>Database setup</h2>

<p>Install one of the following packages as the <code>root</code> user on that machine:</p>

<ul>
<li>By default, a Rails application uses SQLite3. To install SQLite3&#39;s development headers, run this command:</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install libsqlite3-dev
</code></pre></div>
<ul>
<li>If you&#39;re using MySQL, run:</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install libmysqlclient-dev
</code></pre></div>
<ul>
<li>If you&#39;re using PostgreSQL, run:</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install libpq-dev
</code></pre></div>
<p>If you&#39;re using MySQL or PostgreSQL, you&#39;ll need to install their servers.</p>

<ul>
<li>For MySQL, the package to install is <code>mysql-server</code>.</li>
<li>For PostgreSQL, the package to install is <code>postgresql-9.3</code></li>
</ul>

<h2>JavaScript runtime</h2>

<p>My preferred JavaScript runtime is the <code>nodejs</code> package. You can install it with <code>apt-get install nodejs</code>. This package will be used by the server to during <code>rake assets:precompile</code> to precompile the JavaScript assets.</p>

<h2>Deploying the first version</h2>

<p>We can now run <code>bundle exec cap production deploy</code> to deploy our application to our server. The first deploy might be a bit slow while all the gem dependencies are installed on the server. Patience is required for this step.</p>

<p>When it&#39;s complete, the final line should look like this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">INFO [9fa64154] Finished in 0.194 seconds with exit status 0 (successful).
</code></pre></div>
<p>Capistrano has set up your application directory and it has deployed it to a directory at <code>/home/rails_app/app/releases/&lt;timestamp&gt;</code>. This directory is unique to this release so that you may choose to rollback (with <code>bundle exec cap production rollback</code>) if something goes wrong.</p>

<p>Capistrano started out by cloning your application into the directory it created. It then:</p>

<ul>
<li>Ran <code>bundle install</code> to install your application&#39;s gem dependencies.</li>
<li>Ran <code>rake assets:precompile</code> to precompile your application&#39;s assets.</li>
<li>Ran <code>rake db:migrate</code> to migrate the production database for the application up to the latest version.</li>
</ul>

<p>The next step Capistrano will do is symlink the release directory to <code>/home/rails_app/app/current</code>. This is so that we have a sensible name with which to access the current release of our application.</p>

<p>At the end of all of that, it will also check the number of releases in the application directory. If there are more than 5, it will delete the oldest ones and keep only the 5 most recent. Again: these are kept around so that you may choose to rollback if something goes wrong.</p>

<p>With the application deployed, let&#39;s get it to serve our first production request by installing nginx + Passenger and then configuring them.</p>

<h2>Installing nginx + Passenger</h2>

<p>We can install a standalone edition of nginx using the Passenger installer, which massively simplifies what we&#39;re about to do. Without it, we would need to install nginx and Passenger, then we would need to configure these to work with each other.</p>

<p>Before we can install that, we&#39;ll need to install one more package:</p>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get install libcurl4-openssl-dev
</code></pre></div>
<p>This installs Curl development headers with SSL support, which Passenger uses during the installation process.</p>

<p>To install Passenger, we will run <code>gem install passenger</code>, as root.</p>

<p>Next, we&#39;ll need to install Passenger and nginx, which we will do by running <code>passenger-install-nginx-module</code> and following the steps. We want to select Ruby when it prompts us for which languages we&#39;re interested in, of course. When it asks if we want Passenger to download + install nginx for us, we&#39;ll select the first option; &quot;Yes: download, compile and install Nginx for me.&quot;</p>

<p>This is another part where we&#39;ll need to wait a bit while Passenger compiles all the things it needs. Once it&#39;s done, it will tell us to put this configuration in our nginx config:</p>
<div class="highlight"><pre><code class="language-" data-lang="">server {
   listen 80;
   server_name www.yourhost.com;
   root /somewhere/public;   # &lt;--- be sure to point to 'public'!
   passenger_enabled on;
}
</code></pre></div>
<p>The <code>listen</code> directive tells nginx to listen for connections on port 80. The <code>server_name</code> directive is the address of your server, and you should change this from <code>www.yourhost.com</code> to whatever your server is. The <code>root</code> directive tells nginx where to find the application. The <code>passenger_enabled</code> directive should be very obvious.</p>

<p>Open <code>/opt/nginx/conf/nginx.conf</code> and delete the <code>server</code> block inside the <code>http</code> block, and replace it with the above example. Update the values in the example to be specific to your application.</p>

<p>You can start nginx by running:</p>
<div class="highlight"><pre><code class="language-" data-lang="">/opt/nginx/sbin/nginx
</code></pre></div>
<p>If we try to access our application now, we&#39;ll see a &quot;Incomplete response received from application&quot; error. In order to diagnose one of these, we can look in <code>/opt/nginx/logs/error.log</code>, which will tell us what caused that:</p>
<div class="highlight"><pre><code class="language-" data-lang="">*** Exception RuntimeError in Rack application object (Missing `secret_token` and `secret_key_base` for 'production' environment, set these values in `config/secrets.yml`) (process 5076, thread 0x007fd841f79d58(Worker 1)):
</code></pre></div>
<p>It&#39;s telling us that we&#39;re missing the <code>secret_token</code> and <code>secret_key_base</code> for the production environment in <code>config/secrets.yml</code>. If we look at our application&#39;s <code>config/secrets.yml</code>, we&#39;ll see indeed that this is missing:</p>
<div class="highlight"><pre><code class="language-" data-lang="">development:
  secret_key_base: [redacted]

test:
  secret_key_base: [redacted]

# Do not keep production secrets in the repository,
# instead read values from the environment.
production:
  secret_key_base: &lt;%= ENV["SECRET_KEY_BASE"] %&gt;
</code></pre></div>
<p>While the comment above the production key (and the code itself!) says to read it from the environment, I personally think it&#39;s easier to have a <code>config/secrets.yml</code> with the secret key kept on the server itself, and then have that copied over on each deploy.</p>

<h2>Generating a secret key</h2>

<p>To that end, we will put a <code>config/secrets.yml</code> in the <code>/home/rails_app/app/shared</code> directory and tell Capistrano to copy that file over during deployment. We&#39;re creating the file in the <code>shared</code> directory because it&#39;s going to be a file that is shared across all releases of our application.</p>

<p>To generate the <code>secret_key_base</code> value for the production key inside the new <code>config/secrets.yml</code> file, we will run <code>rake secret</code> inside our application. This will give you a very long key, such as:</p>
<div class="highlight"><pre><code class="language-" data-lang="">eaccffd1c5d594d4bf8307cac62cddb0870cdfa795bf2257ca173bedabc389a399b066e3b48cc0544604a4a77da38b9af4b46448fdad2efac9b668a18ad47ddf
</code></pre></div>
<p><strong>Don&#39;t use this one, because it is not secret! Generate one yourself.</strong></p>

<p>When you&#39;ve generated it, log into the server as <code>rails_app</code> and create a new file at <code>/home/rails_app/app/shared/config/secrets.yml</code> with this content:</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">production</span><span class="pi">:</span>
  <span class="s">secret_key_base</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;key</span><span class="nv"> </span><span class="s">generated</span><span class="nv"> </span><span class="s">by</span><span class="nv"> </span><span class="s">rake</span><span class="nv"> </span><span class="s">secret&gt;"</span>
</code></pre></div>
<p>Next, we&#39;ll need to uncomment the line in <code>config/deploy.rb</code> for the <code>linked_files</code> option. </p>
<div class="highlight"><pre><code class="language-" data-lang="">set :linked_files, fetch(:linked_files, []).push('config/secrets.yml')
</code></pre></div>
<p>We&#39;ve taken out <code>config/database.yml</code> for the time being just so we can confirm that we&#39;re passed this <code>secrets.yml</code> issue. After we&#39;ve dealt with that, we&#39;ll come back and look at creating a shared <code>database.yml</code>.</p>

<p>Let&#39;s run another deploy now with <code>bundle exec cap production deploy</code>. This deploy should fix our <code>secrets.yml</code> problem. Making a request to the application might work now if you&#39;re using SQLite3. If not, then you&#39;ll need to wait until the next section is over before that will all work.</p>

<h2>Database configuration</h2>

<p>If you&#39;re not using SQLite3 in production, then you&#39;ll need to setup a database for your application. This guide will only configure PostgreSQL, since that is what I personally am most familiar with.</p>

<p>The first thing that you will need to do is to create a database + user in PostgreSQL for this user. To do that, run these commands:</p>
<div class="highlight"><pre><code class="language-" data-lang="">sudo su postgres
createdb rails_app
createuser rails_app
</code></pre></div>
<blockquote>
<p>While the database name can be different to the username, the username that we use for PostgreSQL must be the same as the user that you use to SSH onto the server to deploy the application. When the application tries connecting to the database, it will do it using the same name as the user that the application runs under; which has been <code>rails_app</code> in this guide.</p>
</blockquote>

<p>We switch to the <code>postgres</code> user as it has superuser rights on our database which means it can execute the <code>createdb</code> and <code>createuser</code> commands. The <code>root</code> user of the machine cannot run these commands itself. You&#39;ll need to switch back from the postgres user back to root, which you can do by running <code>exit</code>.</p>

<p>Once we&#39;ve run those commands, we can test to see if it&#39;s working by running <code>psql</code> as the <code>rails_app</code> user. If it is working, then we will see a <code>psql</code> console like this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">psql (9.3.9)
Type "help" for help.

rails_app=&gt;
</code></pre></div>
<p>Great! Now we can setup the database configuration for the application. The first step is to change the database engine that the application uses in its <code>Gemfile</code> from <code>sqlite3</code> to the PostgreSQL gem, <code>pg</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">'pg'</span>
</code></pre></div>
<p>Next, we will need to run <code>bundle install</code> to update our application&#39;s dependencies. We will need to ensure that we change our local <code>config/database.yml</code> to use PostgreSQL as well. You&#39;ll want to be using the same database software locally and on the server, as that means that you have identical environments across the different machines.</p>

<p>The next step is to put a <code>config/database.yml</code> in the <code>/home/rails_app/app/shared</code> directory which only contains a <code>production</code> key:</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">production</span><span class="pi">:</span>
  <span class="s">adapter</span><span class="pi">:</span> <span class="s">postgresql</span>
  <span class="s">database</span><span class="pi">:</span> <span class="s">rails_app</span>
</code></pre></div>
<p>We can copy this file over on deploy by updating <code>config/deploy.rb</code> and changing the <code>linked_files</code> line to this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">set</span> <span class="ss">:linked_files</span><span class="p">,</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:linked_files</span><span class="p">,</span> <span class="p">[]).</span><span class="nf">push</span><span class="p">(</span><span class="s1">'config/database.yml'</span><span class="p">,</span> <span class="s1">'config/secrets.yml'</span><span class="p">)</span>
</code></pre></div>
<p><strong>We&#39;ll need to commit the changes to the <code>Gemfile</code> + <code>Gemfile.lock</code> before continuing here.</strong></p>

<p>The application will now work after one more run of <code>bundle exec cap production deploy</code>. Try it out yourself by visiting your app.</p>

<p>Your app should now be deployed to your server. Go ahead and try it out.</p>

<h2>Conclusion</h2>

<p>Your application is now deployed, but the fun doesn&#39;t stop here. You may need to tweak the <code>PassengerMaxInstances</code> configuration setting inside the <code>VirtualHost</code> block for your application to increase or decrease the amount of instances running on the machine, depending on how much free RAM you have. If you&#39;re running out of RAM, decrease this number. It entirely depends on the application, so just experiment to find out what value suits you.</p>

<p>The entire <a href="https://www.phusionpassenger.com/documentation/Users%20guide%20Apache.html">Passenger Users Guide</a> is a good read for other bits of tweaking too.</p>

<p>You may wish to setup exception tracking for your application now that it has been deployed to production, and for that I recommend <a href="https://rollbar.com">Rollbar</a>. It&#39;s very easy to setup for any Rails application and they have instructions on how to do that on their site.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Mac OS X, Ruby, ruby-install, chruby and You</title>
   <link href="http://ryanbigg.com/2015/06/mac-os-x-ruby-ruby-install-chruby-and-you"/>
   <updated>2015-06-09T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2015/06/mac-os-x-ruby-ruby-install-chruby-and-you</id>
   <content type="html"><![CDATA[<p><strong>Last updated: July 13th, 2016</strong></p>

<p>
  <strong>This beginner's guide will set up with Ruby 2.4.1, chruby, ruby-install and Rails 5.1.2 and is specifically written for a <em>development</em> environment on Mac OS X, but will probably work on many other operating systems with slight modifications.</strong>
</p>

<p>This guide is <em>almost</em> a copy of my <a href='http://ryanbigg.com/2014/10/ubuntu-ruby-ruby-install-chruby-and-you/'>Ubuntu, Ruby, ruby-install, chruby, Rails and You</a> guide, but this one has instructions for Macs.</p>

<p>This guide will cover installing a couple of things:</p>

<ul>
<li><a href="https://github.com/postmodern/ruby-install"><strong>ruby-install</strong></a>: a very lightweight way to install multiple Rubies on the same box.</li>
<li><a href="https://github.com/postmodern/chruby"><strong>chruby</strong></a>: a way to easily switch between those Ruby installs</li>
<li><strong>Ruby 2.4.1</strong>: at the time of writing the newest current stable release of Ruby.</li>
<li><strong>Bundler</strong>: a package dependency manager used in the Ruby community</li>
<li><strong>Rails 5.1.2</strong>: at the time of writing the newest current stable release of Rails.</li>
</ul>

<p>By the end of this guide, you will have these things installed and have some very, very easy ways to manage gem dependencies for your different applications / libraries, as well as having multiple Ruby versions installed and usable all at once.</p>

<p>We assume you have <code>sudo</code> access to your machine, and that you have an understanding of the basic concepts of Ruby, such as &quot;What is RubyGems?&quot; and more importantly &quot;How do I turn this computer-thing on?&quot;. This knowledge can be garnered by reading the first chapter of <a href="https://manning.com/black2">any Ruby book</a>.</p>

<p>If you&#39;re looking for a good Rails book, I wrote one called <a href="http://manning.com/bigg2">Rails 4 in Action</a>.</p>

<h3>Housekeeping</h3>

<p>The first thing we&#39;re going to need to install is XCode which you can get from the Mac App Store. We&#39;ll use XCode to install the Command Line Tools which install some libraries that Ruby will use to compile itself.</p>
<div class="highlight"><pre><code class="language-" data-lang="">xcode-select --install
</code></pre></div>
<p>First of all, we&#39;re going to need to install some package management script so that we can install packages such as Git, MySQL and other things exceptionally easy. The best package management system on Mac OS X for this is <a href="https://brew.sh">homebrew</a>. We can install this by using this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></pre></div>
<p>Next, we&#39;ll install <code>chruby</code> and <code>ruby-install</code>.</p>
<div class="highlight"><pre><code class="language-" data-lang="">brew install chruby ruby-install
</code></pre></div>
<h3>ruby-install</h3>

<p>First we fetch the ruby-install file, extract it into a directory, then make it. You can verify that these steps have worked by running the following command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-install -V
</code></pre></div>
<p>If you see this, then you&#39;ve successfully installed ruby-install:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-install: 0.6.1
</code></pre></div>
<h3>Ruby</h3>

<p>Our next step is to install Ruby itself, which we can do with this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-install --latest ruby
</code></pre></div>
<p>This command will take a couple of minutes, so grab your $DRINKOFCHOICE and go outside or something. Once it&#39;s done, we&#39;ll have Ruby 2.4.1 installed.</p>

<p>Now we&#39;ll need to load chruby automatically, which we can do by adding these lines to <code>~/.bash_profile</code> (or <code>~/.zshrc</code> if you&#39;re using ZSH):</p>
<div class="highlight"><pre><code class="language-" data-lang="">source /usr/local/opt/chruby/share/chruby/chruby.sh
source /usr/local/opt/chruby/share/chruby/auto.sh
</code></pre></div>
<p>In order for this to take effect, we&#39;ll need to source that file:</p>
<div class="highlight"><pre><code class="language-" data-lang="">. ~/.bash_profile
# or (if you're using ZSH)
. ~/.zshrc
</code></pre></div>
<p>Alternatively, opening a new terminal tab/window will do the same thing.</p>

<p>To verify that chruby is installed and has detected our Ruby installation, run <code>chruby</code>. If you see this, then it&#39;s working:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-2.4.1
</code></pre></div>
<p>Now we need to make that Ruby the default Ruby for our system, which we can do by creating a new file called <code>~/.ruby-version</code> with this content:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-2.4.1
</code></pre></div>
<p>This file tells <code>chruby</code> which Ruby we want to use by default. To change the ruby version that we&#39;re using, we can run <code>chruby ruby-2.4.1</code> for example -- assuming that we have Ruby 2.4.1 installed first!</p>

<p>Did this work? Let&#39;s find out by running <code>ruby -v</code>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-darwin16]
</code></pre></div>
<h3>Rails</h3>

<p>Now that we have a version of Ruby installed, we can install Rails. Because our Ruby is installed to our home directory, we don&#39;t need to use that nasty <code>sudo</code> to install things; we&#39;ve got write-access! To install the Rails gem we&#39;ll run this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">gem install rails -v 5.1.2 --no-document
</code></pre></div>
<p>This will install the <code>rails</code> gem and the multitude of gems that it and its dependencies depend on, including Bundler.</p>

<h3>MySQL</h3>

<p>Before you can use MySQL, you&#39;ll need to install it with Homebrew:</p>
<div class="highlight"><pre><code class="language-" data-lang="">brew install mysql
</code></pre></div>
<p>After this, <code>gem install mysql</code> should succeed.</p>

<h3>PostgreSQL</h3>

<p>Before you can use PostgreSQL, you&#39;ll need to install it with Homebrew:</p>
<div class="highlight"><pre><code class="language-" data-lang="">brew install postgresql
</code></pre></div>
<p>After this, <code>gem install pg</code> should succeed.</p>

<h3>Fin</h3>

<p>And that&#39;s it! Now you&#39;ve got a Ruby environment you can use to write your (first?) Rails application in with such minimal effort. A good read after this would be the <a href='http://guides.rubyonrails.org'>official guides for Ruby on Rails</a>.</p>

<p>The combination of chruby and ruby-install is such a powerful tool and comes in handy for day-to-day Ruby development. Use it, and not the packages from apt to live a life of development luxury.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Getting started with Ruby and Rails</title>
   <link href="http://ryanbigg.com/2015/04/getting-started-with-ruby-and-rails"/>
   <updated>2015-04-30T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2015/04/getting-started-with-ruby-and-rails</id>
   <content type="html"><![CDATA[<p>There are a lot of people who wish to get started with Ruby and Rails, but
don&#39;t know where to start. I hope that this post will serve as a guide for
those people.</p>

<h2>Operating Systems</h2>

<h3>Windows</h3>

<p>People try to develop Ruby and Ruby on Rails apps on Windows and they struggle
with it. You can try developing on it, but know that it&#39;s going to be more
painful than the other options (Linux or Mac).</p>

<p>It&#39;s for this reason that I recommend installing Ubuntu in a VM
(using <a href="https://www.virtualbox.org/">VirtualBox</a>) on your Windows PC if you&#39;re
in that environment.</p>

<h3>Ubuntu</h3>

<p>Once you&#39;ve got Ubuntu setup, you can follow my <a href="http://ryanbigg.com/2014/10/ubuntu-ruby-ruby-install-chruby-and-you/">Ubuntu, Ruby, ruby-install,
chruby, Rails and You guide</a>
which will setup a proper development environment for you on Ubuntu.</p>

<p><strong>Don&#39;t install Ruby packages from <code>apt</code></strong>. That way lies pain and suffering.</p>

<h3>Mac</h3>

<p>If you&#39;re on Mac, you can follow my <a href="http://ryanbigg.com/2015/06/mac-os-x-ruby-ruby-install-chruby-and-you">Mac OS X, Ruby, ruby-instlal, chruby and You guide</a>.
Install ruby-install, chruby as per that guide, and then you can install
<a href="http://brew.sh/">Homebrew</a>, and then install PostgreSQL by running this
command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">brew install postgresql
</code></pre></div>
<p>Or MySQL with this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">brew install mysql
</code></pre></div>
<h2>Getting started with Ruby</h2>

<h3>The Ruby Koans</h3>

<p><strong>FREE</strong></p>

<p>Your environment is now setup and now you&#39;re wondering where to go from here.
I <em>always</em> recommend the <a href="http://rubykoans.com/">Ruby Koans</a> which, as their
site says:</p>

<blockquote>
<p>The Koans walk you along the path to enlightenment in order to learn Ruby. The goal is to learn the Ruby language, syntax, structure, and some common functions and libraries. We also teach you culture. Testing is not just something we pay lip service to, but something we live. It is essential in your quest to learn and do great things in the language.</p>
</blockquote>

<p>The Koans are a fantastic introduction to Ruby and if I had my way, it&#39;d be
where all newbies started to learn. You don&#39;t have to complete them all, just
try your best. It&#39;s time I admitted: I&#39;ve never actually completed the Koans
myself. One day I might.</p>

<h3>The Well-Grounded Rubyist</h3>

<p><strong>PAID</strong></p>

<p>If a book is more your style, then <a href="http://manning.com/black3">The Well-Grounded
Rubyist</a> is the one that I would recommend. The
very first version of this book (Ruby for Rails) is what I learned Ruby from.
I don&#39;t link to it here because it was out of date when I read it and that
makes it even more out of date now.</p>

<h3>Jumpstart Labs Tutorials</h3>

<p><strong>FREE</strong></p>

<p>I also recommend checking out the <a href="http://tutorials.jumpstartlab.com/">Jumpstart Labs
Tutorials</a>, which are written by the
people who run <a href="http://turing.io">Turing Academy</a>. These include tutorials
that will introduce you to Ruby in 100 minutes, as well as some Sinatra and
Rails tutorials so that you can wrap your head around applying Ruby to web development.</p>

<h3>Practical Object-Oriented Design in Ruby (POODR)</h3>

<p><strong>PAID</strong></p>

<p>The <a href="http://www.poodr.com/">POODR book by Sandi Metz</a> is one of my favourite Ruby books and gives some great examples of how to write excellent Ruby code in an easy-to-read style. Sandi Metz&#39;s conference talks are also wonderful watching.</p>

<h2>Getting started with Rails</h2>

<h3>Rails 4 in Action</h3>

<p><strong>NON-FREE</strong></p>

<p>It&#39;d be remiss of me to not mention my own book, <a href="https://manning.com/bigg2">Rails 4 in
Action</a> in this section. In the book, we build a
ticket-tracking application from the ground up using Behaviour Driven
Development. Thousands of people have found it to be a great introduction to
Rails, and some people have even gotten Rails jobs after having read it.</p>

<h3>Rails Tutorial</h3>

<p><strong>FREE</strong></p>

<p>If you don&#39;t want to shell out the money for my book (and why not?!), then the
free <a href="https://www.railstutorial.org/">Rails Tutorial</a> is the next-best-thing.
In that tutorial, you build a Twitter-like application from scratch.</p>

<h2>More reading / viewing / listening</h2>

<p>Before you go ahead and read this list, you should take some time to go through the resources above and gain a basic understanding of Ruby + Rails. Consider these supplementary to the above list.</p>

<h3>Books</h3>

<ul>
<li><a href="http://www.confidentruby.com/">Confident Ruby</a></li>
<li><a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional-Series/dp/0321584104">Eloquent Ruby</a></li>
</ul>

<h3>Screencasts</h3>

<ul>
<li><a href="http://rubytapas.com">Ruby Tapas</a> - Bite sized screencasts about Ruby</li>
<li><a href="https://railscasts.com">Railscasts</a> - Screencasts about Ruby on Rails</li>
</ul>

<p>If you think of anything that should be added to this post, please leave a comment.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Filtering by index in Elasticsearch</title>
   <link href="http://ryanbigg.com/2014/12/filtering-by-index-in-elasticsearch"/>
   <updated>2014-12-03T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2014/12/filtering-by-index-in-elasticsearch</id>
   <content type="html"><![CDATA[<p>Today I needed to filter by indexes in an Elasticsearch instance, and so I googled for how to do this but I couldn&#39;t find anything other than the <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-indices-filter.html">indicies filter</a> which isn&#39;t helpful without a proper context of where to use it in a query.</p>

<p>Instead of that filter, this is what I came up with to do the filtering:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">client</span> <span class="o">=</span> <span class="no">Elasticsearch</span><span class="p">.</span><span class="nf">new</span>
<span class="n">client</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="ss">index: </span><span class="s2">"logstash-2014.12.03,logstash-2014.12.02..."</span><span class="p">,</span> <span class="ss">body: </span><span class="p">{</span>
  <span class="ss">query: </span><span class="p">{</span>
    <span class="p">.</span><span class="nf">.</span><span class="o">.</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div>
<p>I hope this post can help other people who are looking for the same thing.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Ubuntu, Ruby, ruby-install, chruby, Rails and You</title>
   <link href="http://ryanbigg.com/2014/10/ubuntu-ruby-ruby-install-chruby-and-you"/>
   <updated>2014-10-05T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/10/ubuntu-ruby-ruby-install-chruby-and-you</id>
   <content type="html"><![CDATA[<p><strong>Last updated: July 13th 2017</strong></p>

<p><strong>This beginner&#39;s guide will set your machine up with Ruby 2.4.1 using chruby+ruby-install and Rails 5.1.2 and is specifically written for a <em>development</em> environment on Ubuntu 17.04, but will probably work on many other operating systems, including older / newer versions of Ubuntu and Debian. YMMV.</strong></p>

<div class="warning">
  Under no circumstance should you install Ruby, Rubygems or any Ruby-related packages from apt-get. This system is out-dated and leads to major headaches. Avoid it for Ruby-related packages. We do Ruby, we know what's best. Trust us.
</div>

<p>This guide will cover installing a couple of things:</p>

<ul>
<li><a href="https://github.com/postmodern/ruby-install"><strong>ruby-install</strong></a>: a very lightweight way to install multiple Rubies on the same box.</li>
<li><a href="https://github.com/postmodern/chruby"><strong>chruby</strong></a>: a way to easily switch between those Ruby installs</li>
<li><strong>Ruby 2.4.1</strong>: at the time of writing the newest current stable release of Ruby.</li>
<li><strong>Bundler</strong>: a package dependency manager used in the Ruby community</li>
<li><strong>Rails 5.1.2</strong>: at the time of writing the newest current stable release of Rails.</li>
</ul>

<p>By the end of this guide, you will have these things installed and have some very, very easy ways to manage gem dependencies for your different applications / libraries, as well as having multiple Ruby versions installed and usable all at once.</p>

<p>We assume you have <code>sudo</code> access to your machine, and that you have an understanding of the basic concepts of Ruby, such as &quot;What is RubyGems?&quot; and more importantly &quot;How do I turn this computer-thing on?&quot;. This knowledge can be garnered by reading the first chapter of <a href="https://manning.com/black2">any Ruby book</a>.</p>

<p>If you&#39;re looking for a good Rails book, I wrote one called <a href="http://manning.com/bigg2">Rails 4 in Action</a>.</p>

<h3>Housekeeping</h3>

<p>First of all, we&#39;re going to run <code>sudo apt-get update</code> so that we have the latest sources on our box so that we don&#39;t run into any package-related issues, such as not being able to install some packages.</p>

<p>Next, we&#39;ll run another command which will install the essential building tools that will be used to install Ruby:</p>
<div class="highlight"><pre><code class="language-" data-lang="">sudo apt-get install build-essential
</code></pre></div>
<p>And now we&#39;re ready to install ruby-install.</p>

<h3>ruby-install</h3>

<p>The installation instructions can be found <a href="https://github.com/postmodern/ruby-install#install">on the README of ruby-install</a>, but I&#39;ll repeat them here so you don&#39;t have to go over there:</p>
<div class="highlight"><pre><code class="language-" data-lang="">wget -O ruby-install-0.6.1.tar.gz \
  https://github.com/postmodern/ruby-install/archive/v0.6.1.tar.gz
tar -xzvf ruby-install-0.6.1.tar.gz
cd ruby-install-0.6.1/
sudo make install
</code></pre></div>
<p>First we fetch the ruby-install file, extract it into a directory, then make it. You can verify that these steps have worked by running the following command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">$ ruby-install -V
</code></pre></div>
<p>If you see this, then you&#39;ve successfully installed ruby-install:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-install: 0.6.1
</code></pre></div>
<h3>Ruby</h3>

<p>Our next step is to install Ruby itself, which we can do with this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-install ruby 2.4.1
</code></pre></div>
<p>This command will take a couple of minutes, so grab your $DRINKOFCHOICE and go outside or something. Once it&#39;s done, we&#39;ll have Ruby 2.4.0 installed. In order to use this Ruby version, we&#39;ll need to install chruby as well. The instructions <a href="https://github.com/postmodern/chruby#install">can be found in chruby&#39;s README</a> too, but I will reproduce them here:</p>
<div class="highlight"><pre><code class="language-" data-lang="">wget -O chruby-0.3.9.tar.gz \
  https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz
tar -xzvf chruby-0.3.9.tar.gz
cd chruby-0.3.9/
sudo make install
</code></pre></div>
<p>After this has been installed, we&#39;ll need to load chruby automatically, which we can do by adding these lines to your shells configuration file using the following command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">cat &gt;&gt; ~/.$(basename $SHELL)rc &lt;&lt;EOF
source /usr/local/share/chruby/chruby.sh
source /usr/local/share/chruby/auto.sh
EOF
</code></pre></div>
<p>In order for this to take effect, we&#39;ll reload the shell</p>
<div class="highlight"><pre><code class="language-" data-lang="">exec $SHELL
</code></pre></div>
<p>Alternatively, opening a new terminal tab/window will do the same thing.</p>

<p>To verify that chruby is installed and has detected our Ruby installation, run <code>chruby</code>. If you see this, then it&#39;s working:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-2.4.1
</code></pre></div>
<p>Now we need to make that Ruby the default Ruby for our system, which we can do by creating a new file called <code>~/.ruby-version</code> with this content:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby-2.4.1
</code></pre></div>
<p>This file tells <code>chruby</code> which Ruby we want to use by default. To change the ruby version that we&#39;re using, we can run <code>chruby ruby-2.4.1</code> for example -- assuming that we have Ruby 2.4.0 installed first!</p>

<p>Did this work? Let&#39;s find out by running <code>ruby -v</code>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
</code></pre></div>
<h3>Rails</h3>

<p>Now that we have a version of Ruby installed, we can install Rails. Because our Ruby is installed to our home directory, we don&#39;t need to use that nasty <code>sudo</code> to install things; we&#39;ve got write-access! To install the Rails gem we&#39;ll run this command:</p>
<div class="highlight"><pre><code class="language-" data-lang="">gem install rails -v 5.1.2 --no-rdoc --no-ri
</code></pre></div>
<p>This will install the <code>rails</code> gem and the multitude of gems that it and its dependencies depend on, including Bundler.</p>

<h3>MySQL</h3>

<p>If you&#39;re planning on using the <code>mysql2</code> gem for your application then you&#39;ll want to install the <code>libmysqlclient-dev</code> package before you do that. Without it, you&#39;ll get an error when the gem tries to compile its native extensions:</p>
<div class="highlight"><pre><code class="language-" data-lang="">Building native extensions.  This could take a while...
ERROR:  Error installing mysql2:
    ERROR: Failed to build gem native extension.

    /home/ryan/.rubies/ruby-2.3.0/bin/ruby extconf.rb
checking for ruby/thread.h... yes
checking for rb_thread_call_without_gvl() in ruby/thread.h... yes
checking for rb_thread_blocking_region()... yes
checking for rb_wait_for_single_fd()... yes
checking for rb_hash_dup()... yes
checking for rb_intern3()... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lm... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lz... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lsocket... no
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lnsl... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lmygcc... no
checking for mysql_query() in -lmysqlclient... no
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
</code></pre></div>
<p>Install this package using <code>sudo apt-get install libmysqlclient-dev</code> and then the <code>mysql2</code> gem will install fine.</p>

<h3>PostgreSQL</h3>

<p>Similar to the <code>mysql2</code> gem&#39;s error above, you&#39;ll also get an error with the <code>pg</code> gem if you don&#39;t have the <code>libpq-dev</code> package installed you&#39;ll get this error:</p>
<div class="highlight"><pre><code class="language-" data-lang="">Building native extensions.  This could take a while...
ERROR:  Error installing pg:
    ERROR: Failed to build gem native extension.

    /home/ryan/.rubies/ruby-2.3.0/bin/ruby extconf.rb
checking for pg_config... no
No pg_config... trying anyway. If building fails, please try again with
 --with-pg-config=/path/to/pg_config
checking for libpq-fe.h... no
Can't find the 'libpq-fe.h header
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
</code></pre></div>
<p>Install this package using <code>sudo apt-get install libpq-dev</code>.</p>

<h3>SQLite3</h3>

<p>Just like MySQL and PostgreSQL before it, attempting to install the <code>sqlite3</code> gem will result in this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">Gem::Ext::BuildError: ERROR: Failed to build gem native extension.

    /home/ryan/.rubies/ruby-2.3.0/bin/ruby extconf.rb
checking for sqlite3.h... no
sqlite3.h is missing. Try 'port install sqlite3 +universal',
'yum install sqlite-devel' or 'apt-get install libsqlite3-dev'
and check your shared library search path (the
location where your sqlite3 shared library is located).
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
</code></pre></div>
<p>Fix this issue by running <code>sudo apt-get install libsqlite3-dev</code>.</p>

<h3>JavaScript Runtime</h3>

<p>Rails requires a JavaScript runtime to run its precompile step for the asset pipeline. If you attempt to run <code>rake assets:precompile</code> without one of these, you&#39;ll see this message:</p>
<div class="highlight"><pre><code class="language-" data-lang="">ExecJS::RuntimeUnavailable: Could not find a JavaScript runtime. See
https://github.com/sstephenson/execjs for a list of available runtimes.
</code></pre></div>
<p>To fix this error install <code>nodejs</code>, which comes with a JavaScript runtime:</p>
<div class="highlight"><pre><code class="language-" data-lang="">sudo apt-get install nodejs
</code></pre></div>
<h3>Fin</h3>

<p>And that&#39;s it! Now you&#39;ve got a Ruby environment you can use to write your (first?) Rails application in with such minimal effort. A good read after this would be the <a href='http://guides.rubyonrails.org'>official guides for Ruby on Rails</a>.</p>

<p>The combination of chruby and ruby-install is such a powerful tool and comes in handy for day-to-day Ruby development. Use it, and not the packages from apt to live a life of development luxury.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Working Remotely</title>
   <link href="http://ryanbigg.com/2014/10/working-remotely"/>
   <updated>2014-10-02T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/10/working-remotely</id>
   <content type="html"><![CDATA[<p>The news came out today that <a href="http://venturebeat.com/2014/10/01/after-raising-50m-reddit-forces-remote-workers-to-relocate-to-sf-or-get-fired/">Reddit is requiring all workers to move to San Francisco</a>. Of course, DHH (the guy who wrote <a href="http://37signals.com/remote/">a book about working remotely</a>) had an opinion about this:</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" lang="en"><p>What a coincidence <a href="https://twitter.com/sama">@sama</a> is &quot;not a fan of remote work&quot;, <a href="https://twitter.com/yishan">@yishan</a> sought his advice on canning remoters &quot;as friend&quot;, <a href="https://t.co/Bb5yjKZ68Q">https://t.co/Bb5yjKZ68Q</a></p>&mdash; DHH (@dhh) <a href="https://twitter.com/dhh/status/517475492296151040">October 2, 2014</a></blockquote>

<blockquote class="twitter-tweet" lang="en"><p>I&#39;m sure telling your your kids that daddy/mommy has to uproot the family for San Fran goes down smooth once you mention Optimal Teamwork.</p>&mdash; DHH (@dhh) <a href="https://twitter.com/dhh/status/517479897808531457">October 2, 2014</a></blockquote>

<blockquote class="twitter-tweet" lang="en"><p>Wanting to hire the very best and insisting they all live in San Francesco is simply delusional. Far more great people outside SF than in it</p>&mdash; DHH (@dhh) <a href="https://twitter.com/dhh/status/517481377487671296">October 2, 2014</a></blockquote>

<p>I haven&#39;t read DHH&#39;s book, but I agreed with him and even went as far as retweeting the last two tweets, which is unusual as I typically view DHH as person with extreme opinions and a &quot;fuck you&quot; kind of attitude that is rather grating when you&#39;re on the receiving end of it. Today though, he was spot on.</p>

<p>I worked remotely for two and a half years in my last job, wrote a book with an entirely remote team and therefore I can self-proclaim myself to be an expert on remote working. I would even go as far as to say that I&#39;ve done the best work of my life while being a remote worker. So when I hear about a company which self-proclaims itself to be &quot;The Frontpage of the Internet&quot; -- i.e. the front page of a globally distributed computer network -- moving their entire staff to San Francisco for &quot;optimal teamwork&quot;, it sounds very strange.</p>

<p>What even is &quot;optimal teamwork&quot;, anyway? You think that by magically gathering people in one building you&#39;re going to make them work any better than if they were apart? Do you think that they&#39;re going to not &quot;slack off&quot; because their boss can now come up behind them at any given moment? Do you think that they&#39;ll communicate better because they&#39;re all together?</p>

<p>No, they&#39;ll just work the same as they did before. They&#39;ll still slack off because humans aren&#39;t robots and like taking breaks every now and again from their work. It&#39;s actually provably beneficial to let people take breaks when they feel it&#39;s necessary to do so.</p>

<p>It&#39;ll be very interesting to see or hear about how bringing Reddit&#39;s team together works, or doesn&#39;t work and how many Redditors decide that the SF move is not for them.</p>
]]></content>
 </entry>
 
 
</feed>