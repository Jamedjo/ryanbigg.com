<?xml version="1.0" encoding="iso-8859-1"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The Life of a Radar</title>
 <link href="http://ryanbigg.com/atom.xml" rel="self"/>
 <link href="http://ryanbigg.com"/>
 <updated>2014-07-29T10:57:56+10:00</updated>
 <id>http://ryanbigg.com/</id>
 <author>
   <name>Ryan Bigg</name>
   <email>radarlistener@gmail.com</email>
 </author>

 
 <entry>
   <title>Ryan Bigg is now a Git...</title>
   <link href="http://ryanbigg.com/2014/07/ryan-bigg-is-now-a-git"/>
   <updated>2014-07-22T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/07/ryan-bigg-is-now-a-git</id>
   <content type="html"><![CDATA[<p>Yes, the <a href="http://spreecommerce.com/blog/farewell-ryan-bigg">rumours are true</a>, I am leaving Spree Commerce. This makes me a git because there&#39;s one and only one Community Manager at Spree, and so that void will need to be filled by someone else. Thankfully Jeff Dutil is going to step into my role as interim Community Manager for the time being.</p>

<p>I&#39;m also a git for tricking you all:</p>

<blockquote class="twitter-tweet" lang="en"><p>Ryan Bigg is now a GitHubber! <a href="https://t.co/jYm8bKVV1z">https://t.co/jYm8bKVV1z</a></p>&mdash; Ryan Bigg (@ryanbigg) <a href="https://twitter.com/ryanbigg/statuses/491321781781684224">July 21, 2014</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<p>I&#39;m not going to work for GitHub. I&#39;m going to work at <a href="http://lifx.co">LIFX</a> as a Ruby programmer there, starting August 4th. It was exceptionally lonely working in this Melbourne timezone mostly by myself, and I was getting complacent at Spree. I want a bigger challenge while I still have the time and energy for it. </p>

<p>LIFX seems like a perfect fit in regards to those things. I&#39;ll be working with people in an office in Richmond (not far from where I currently work at <a href="http://inspire9.com.au">Inspire9</a>), and the work will be something different to the ecommerce work that I&#39;ve been doing for 2.5 years. The Internet of Things is a really neat concept and I am really looking forward to working at LIFX.</p>

<hr>

<p>I first worked with Spree when I worked with my old job building the <a href="https://shop.abc.net.au/">ABC online store</a>. I was also working on the <a href="https://guides.rubyonrails.org/engines.html">Engines Guide</a> at this point, so my interest around Rails engines was still quite intense. </p>

<p>Josh Adams pinged me about <a href="https://groups.google.com/forum/#!msg/spree-user/P0iywDQokto">a discussion regarding namespaces on the spree user mailing list</a> and I just <a href="https://groups.google.com/forum/#!msg/spree-user/P0iywDQokto/jhtAftv7RK8J">had to reply</a>. That week, Sean from Spree messaged me over IRC and asked if I wanted a job. A month later I started working there on the namespacing work and gradually took over the maintenance of the project from Sean and Brian while they worked on developing Spree Commerce as a business.</p>

<p>As a result of that, I&#39;ve made <a href="https://github.com/spree/spree/graphs/contributors">over 3000 commits</a> and posted 7,000 issue comments. Over two and a half years, that averages out to 3 commits per day and almost 8 comments. I&#39;ve also posted 15,000 messages in the Spree IRC channel. I don&#39;t know the email stats, but I would guess it falls within the same range. I apologise for all the spam.</p>

<p>I&#39;m immensely proud of my work at Spree. It&#39;s been an interesting challenge to work on building something as complex as an ecommerce platform and still keeping it neat and tidy in comparison to certain other ecommerce frameworks. I know the Spree team will keep up the great work that they&#39;ve been doing on Wombat. The future of Spree is looking bright, and I wish them all the best.</p>

<hr>

<p>Lastly, I&#39;d like to thank Matt Allen from <a href="http://lookahead.com.au">Lookahead Search</a> for talking with me about this decision and other jobs. There&#39;s quite a lot of jobs out there (for someone with my supposed talents) and it was hard making the decision between the places that I had talked to during my job hunt. Matt is extremely patient and a good friend and I appreciate his help a ton.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Initial thoughts on Lotus</title>
   <link href="http://ryanbigg.com/2014/06/initial-thoughts-on-lotus"/>
   <updated>2014-06-19T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/06/initial-thoughts-on-lotus</id>
   <content type="html"><![CDATA[<p>Following on from my <a href="http://ryanbigg.com/2014/06/spree-factories-and-callbacks/">last post</a>, I&#39;ve been experimenting some more with my <a href="https://github.com/radar/spree_poro">spree_poro</a>, and I&#39;ve been looking at how to work with some kind of data store persistence more sophisticated than the <code>Spree::Data</code> constant that I had used previously. I wanted something more sophisticated than running <code>select</code>s over arrays.</p>

<p><a href="http://lotusrb.org">Lotus</a> bills itself as a &quot;complete web framework for Ruby&quot; and also uses the words &quot;simple&quot;, &quot;fast&quot;, and &quot;lightweight&quot;. In my limited experience of only using the <code>Lotus::Model</code> part of the framework, I can say it&#39;s all of those things. <code>Lotus::Model</code> itself is less than 600 lines and my tests (now 50 of them) still run in &lt;0.05 seconds.</p>

<p><code>Lotus::Model</code> departs from the ActiveRecord way of doing things by having four main types of objects: entities, mappers, repositories and adapters. The creator of Lotus (Luca Guida) has <a href="http://lucaguidi.com/2014/04/23/introducing-lotus-model.html">a great post outlining what each of those do</a>.</p>

<p>I&#39;ve added <code>Lotus::Model</code> to spree_poro (in a <a href="https://github.com/radar/spree_poro/tree/lotus">new branch</a>) and I have it persisting zones, tax rates, tax categories and products; not to a database but to memory. It would be very easy for me to switch this over to an SQL database, thanks to how Lotus is designed. </p>

<p>Having the entities separate from the persistence code means there&#39;s a clear separation between the business logic of the entities and the persistence logic of the repositories. If I want to test that finding tax rates based on an order&#39;s tax zone works, I no longer test that on the <code>Spree::TaxRate</code> model. Instead, that responsibility falls to the <code>Spree::TaxRateRepository</code>, and so <a href="https://github.com/radar/spree_poro/blob/fac4921d87c6a047e8b2df380137f3866cac2442/spec/spree/repositories/tax_rate_spec.rb">that is where it&#39;s tested</a>. This means that I could even get away with stubbing <code>Spree::TaxRateRepository.match</code> in the normal <code>TaxRate</code> specs to return some plain Ruby objects, and those tests do not need to care about any persistence layer at all.</p>

<p>I am very interested to see how this whole Lotus thing pans out. It&#39;s very easy to understand at this point in time, other than that I can&#39;t work out how to properly do polymorphic associations (as is necessary for promotions within Spree, sadly). Perhaps that would be a feature that comes eventually to Lotus, or we re-architect the way Spree is designed to work more with Lotus.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Spree, Factories and Callbacks</title>
   <link href="http://ryanbigg.com/2014/06/spree-factories-and-callbacks"/>
   <updated>2014-06-17T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/06/spree-factories-and-callbacks</id>
   <content type="html"><![CDATA[<p>During last week, I was trying to wrap my head around Spree&#39;s code again. I continued my efforts yesterday and tweeted this:</p>

<blockquote class="twitter-tweet" lang="en"><p>Realtalk: I think we’ve dug ourselves a nice hole in Spree by relying too much on callbacks + Factory Girl factories.</p>&mdash; The Bigg Man Himself (@ryanbigg) <a href="https://twitter.com/ryanbigg/statuses/478316786576674816">June 15, 2014</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Some people have asked me to explain what I mean by this, and hopefully I can do that in this blog post. </p>

<p>Spree is a pretty complex chunk of code which has been built up over the past 6 years and it&#39;s always been based off &quot;the Rails way&quot; of doing things. Being a Rails developer myself, I enjoy this because the design of Spree is not dissimilar to any other Rails app that I worked on before coming to work on Spree full time. The models in both Rails apps and Spree itself are in <code>app/models</code>, and the controllers are in <code>app/controllers</code> and so on.</p>

<p>A lot of people have come to disagree with the general way that Rails applications are designed. Just look around the internet and you&#39;ll see talks like <a href="https://www.youtube.com/watch?v=CGN4RFkhH2M&amp;feature=kp">Matt Wynne&#39;s &quot;Hexagonal Rails&quot;</a> and <a href="http://www.confreaks.com/videos/759-rubymidwest2011-keynote-architecture-the-lost-years">Uncle Bob Martin&#39;s &quot;Architecture the Lost Years&quot;</a>.</p>

<p>You would think that I would generally agree with the way Rails apps and Spree are architected, given that I <a href="https://manning.com/bigg2">wrote a book</a> about Rails and I am the <a href="https://github.com/spree/spree/graphs/contributors">#1 committer to Spree</a>.</p>

<p>You&#39;d be <em>mostly</em> right. I&#39;m familiar with it all, and so I like. There&#39;s still a lot to be desired, however.</p>

<p>I&#39;ve come to find the architecture of Rails ties it all too closely together. Take for example <a href="https://gist.github.com/radar/00e321fb4be0c20666aa">this Gist of SQL, generated from when Spree creates a line item from a factory</a>. SQL like this is generated at the top of the test <a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/spec/models/spree/calculator/default_tax_spec.rb">within <code>spec/models/spree/calculator/default_tax_spec.rb</code></a>. This SQL is a result of an abuse of factories on one hand, and quite a large amount of callbacks within Spree itself. There is no reason other than convenience that these factories are used; they create all the other &quot;necessary&quot; objects for our test, and sometimes even unnecessary ones. </p>

<p>Just by creating that one line item, the test file has inserted 20 records into the database, and has issued 34 <code>UPDATE</code> commands. I have no clue as to how many of those are required.</p>

<p>Sure, the factories provide some good. For instance, the line item factory creates a variant, which creates a product, and a product has a tax category. From the line item&#39;s variant&#39;s product&#39;s tax category, we can work out how much tax this line item is supposed to incur.</p>

<p>If you look through the code for this spec, there&#39;s not a single place where database persistence is necessary. All this test needs to do is to take some items and, based off the tax rates available, calculate the correct amounts.</p>

<p>Why does this test need to add data to the database and then read it? Couldn&#39;t the whole code of this be done with plain old Ruby objects and the persistence left to something else?</p>

<h2>PORO Spree</h2>

<p>The answer to that is yes. I&#39;ve done just that in my <a href="https://github.com/radar/spree_poro">spree_poro</a> project. I&#39;ve cheated a little by passing around a <code>Spree::Data</code> constant rather than using something more responsible like the Repository Pattern (<a href="https://twitter.com/sj26/status/478462521343348737">hat-tip to @sj26</a>), but the whole idea is there.</p>

<p>Take a look at the <a href="https://github.com/radar/spree_poro/blob/master/spec/spree/tax_rate_spec.rb">TaxRate spec file</a>. Rather than factories, all the information is setup in the test. It&#39;s all Plain Old Ruby Objects. It does nothing with the &quot;database&quot;, other than that <code>Spree::Data</code> cheat I mentioned earlier.</p>

<p>Oh, and it&#39;s fast. It runs 52 examples in 0.08 seconds. From start to finish, I get test feedback in about 1.5 seconds, which perfectly suits my short attention span.</p>

<h2>Callbacks</h2>

<p>Besides the callback hooks that live in <code>Spree::ItemAdjustments</code> that allow people to hook into the adjustment cycle within Spree, there&#39;s no other callbacks within the <code>spree_poro</code> system. It is my honest belief that we should be able to do everything that Spree does already in this small, enclosed system, sans factories and sans callbacks.</p>

<p>Within Spree-proper, there&#39;s a lot of callbacks. Take this chain of events that happens when an adjustment is created from a promotion:</p>

<ol>
<li><a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/promotion/actions/create_item_adjustments.rb#L32">create_adjustment is called</a>, which instantly persists an Adjustment object to the database.</li>
<li><a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/adjustment.rb#L42"><code>update_adjustable_adjustment_total</code> is called</a>, which <a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/adjustment.rb#L101-L104">calls out to one of the POROs already within Spree</a></li>
<li><a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/item_adjustments.rb#L38-L45">Spree::ItemAdjustments#update_adjustments</a> fetches all the promotional adjustments for the object <em>from the database</em>, and calls <code>Spree::Adjustment#update!</code>.</li>
<li><a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/adjustment.rb#L84-L97">Spree::Adjustment#update!</a> computes the adjustment&#39;s value based on the source&#39;s (promotion action&#39;s) calculator, and then <em>saves that to the database</em>. If it&#39;s a promotion, it&#39;ll <em>save again</em> by updating the eligibility of the promotion (which is a <a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/promotion.rb#L72-L75">whole other rabbit hole</a>).</li>
</ol>

<p>I really think this could be all improved by having an <code>Order</code> object in-memory and acting upon that. The <code>Adjustment</code> objects would be on the in-memory <code>Order</code> object now, much like they are in <code>spree_poro</code>. Any changes to that object are persisted back to the database much later on. It&#39;s not the code&#39;s job to care about these changes getting back to the database. It&#39;s the code&#39;s job to perform these calculations and return us a result. Some <em>other</em> code needs to take care of persisting it back to the database.</p>

<p>This is why I think Rails apps are &quot;tied too closely together&quot;. We have the &quot;model&quot; which is this thing which contains <em>both</em> the business logic and the persistence logic. They should&#39;ve been separate concerns from the beginning. Having the one class that can do both things has lead us down this trap.</p>

<p>If I was going to re-architect Spree -- or any large Rails app for that matter -- something like <a href="https://github.com/radar/spree_poro">spree_poro</a> is where I would start. I wouldn&#39;t start with a Rails app, or even a Rails engine. I would start here: in a small repo of code that has tests written before any code, then the code implements the business rules and the tests pass. Refactoring happens then, because otherwise <a href="https://codeclimate.com/github/radar/spree_poro">CodeClimate</a> would say nasty things about the code. The Rails engine can call out to it later.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Community Management</title>
   <link href="http://ryanbigg.com/2014/04/community-management"/>
   <updated>2014-04-02T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2014/04/community-management</id>
   <content type="html"><![CDATA[<p>I&#39;ve been the &quot;Community Manager&quot; for Spree for a couple of years now. It&#39;s a
job where I answer user support requests wherever they happen: IM, email, IRC,
Stack Overflow. I&#39;ve been splitting this up with some development on Spree,
building features like the new adjustments system whilst getting some great
feedback about them from the community.</p>

<p>Over time, it&#39;s been getting busier and busier and I&#39;ve ended up doing more
&quot;community management&quot; and less programming and it&#39;s been burning me out. When
I&#39;m programming, I know that I&#39;m working towards a goal. When I&#39;m answering
emails, there&#39;s always more emails to answer the next day. It just doesn&#39;t
feel like progress is happening at all.</p>

<p>We&#39;ve just passed our busiest time of the year. People have found Spree and
want to either start using it, or port over from their existing ecommerce
platform. These people generally start asking questions at the end of January
and it quietens down around about now, picking up slightly in June (I don&#39;t
know why, it just does) and the later months of the year due to Black Friday /
Christmas / people wanting things done &quot;Right Now Or Else&quot; by the end of the
year.</p>

<p>During this extremely busy phase, I&#39;ve really dialed back on the programming
part of my job and I&#39;ve been dedicating most of my time to answering user
support requests, mainly in the form of trying to keep my email inbox at an
amount as close to zero as possible. The community benefits from this work
because those people asking the questions get the support they need and they
can continue on doing their own things. That&#39;s a great thing. When people are
using something that I helped build <em>and they like using it</em>; that is one of
the best feelings in the world. It&#39;s part of the reason why I&#39;ve stayed here
in this job longer than any other job I&#39;ve had. It&#39;s also a pretty awesome
team to work with.</p>

<p>After SpreeConf (26-27th Feb), I did an email inbox cull and still had 500+
emails to read through and reply to. This is part of my job, and it seemed
overwhelming. I was occassionally grumpy and short with my words. It&#39;s only
last week -- <em>a whole month later</em> -- that I was able to get this inbox number
down to less than 50. As I write this now, it sits at almost 200.</p>

<p>But there&#39;s a legitimate reason for that. For the past two days I&#39;ve been
doing exclusively programming work. I closed Airmail and worked for two days
in Sublime Text, iTerm and Chrome. It felt <em>glorious</em>. It felt like <em>progress</em>.</p>

<p>Last Friday at approximately 4:40pm my time and ridiculous o&#39; clock (1:40am) in DC,
Sean passed on a message from one of our clients who said something to the
effect that Magento&#39;s order interface in the admin backend was better than
Spree&#39;s order interface. Now, there&#39;s not many things Magento is better at
than Spree, but this is (supposedly) one of them. I agreed whole-heartedly with the
message, but it was 4:40pm on a Friday and I was thinking/dreaming of the
weekend.</p>

<p>I&#39;ve personally been wanting to change the admin backend for quite a while. It
doesn&#39;t adjust itself depending on the order&#39;s checkout steps, which is a
feature that we implemented about 6 major Spree releases. It just hasn&#39;t been
that important to work on as other things have been.</p>

<p>This little comment ate at me all weekend. How could we be <em>worse</em> than
Magento at something? Was that even possible? Yes, it was. The order interface
reloaded the entire page after every single change and it was infuriating. It
felt sluggish. Creating an order in Spree&#39;s admin backend shouldn&#39;t be
tedious, it should be <em>fast</em>.</p>

<p><a href='http://ryanbigg.com/videos/old_admin.mov'>Here&#39;s a video of the admin order interface</a></p>

<p>So on Monday I worked on improving this. I rewrote templates from ERB to
Underscore templates. I converted some JavaScript code that was defining top-
level functions into some CoffeeScript+Backbone code that defined those
functions as proper events within Backbone views.</p>

<p>I made it fast. <a href='http://ryanbigg.com/videos/new_admin.mov'>Here&#39;s a video of the new admin order interface</a></p>

<p>This felt like progress, because it is progress. I&#39;m improving something
within Spree rather than answering emails, and I feel really good about it.</p>

<p>So what I&#39;m going to be doing now is devoting at least a day a week to purely
coding on Spree. All the emails can wait an extra day. Hopefully those emails
will be answered by someone else.</p>

<p>You can see the code for these recent changes over on <a href='https://github.com/radar/spree/tree/new-order-interface'>my new-order-interface branch</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Violence in the Ruby community</title>
   <link href="http://ryanbigg.com/2013/10/violence-in-the-ruby-community"/>
   <updated>2013-10-14T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2013/10/violence-in-the-ruby-community</id>
   <content type="html"><![CDATA[<p>This post was written by myself and my fiancee,
<a href="https://twitter.com/smly_law">Sharon</a>, about the alleged sexual assault of Justine
Arreche by Joe O&#39;Brien at Codemash 2013. Both Joe and Justine are, like me,
members of the Ruby community. Sharon is a lawyer who&#39;s currently supporting
domestic violence victims in her work, and feels that domestic violence and
other violent acts against women are symptomatic of a lack of respect towards
women by men. Misogyny, basically.</p>

<p>I read out <a href="http://blogjustine.wordpress.com/2013/10/12%0A/because-it-needs-to-be-said/">Justine&#39;s post</a> to Sharon over the weekend; she was driving at
the time. I also told her that there&#39;s <em>at least</em> one sexual assault in the
tech community every two months, and that the statistic is probably higher
because a lot of them probably go unreported. She was shocked but said that a
lot of violent crimes perpetrated against women do go unreported. Often the
perpetrator is known to the victim, and this is largely one of the reasons
that crimes don&#39;t get reported. Sometimes it&#39;s a breakdown in trust and
there&#39;s so much confusion on the part of the victim about what&#39;s happened, who
did it, and how to react to it.</p>

<p>Justine&#39;s post is evidence of all of these things. She questioned her own
judgments, she apportioned blame to herself for a crime that was committed
against her and she didn&#39;t feel she could speak out about it. It wasn&#39;t until
long after (9 months) the act had been committed, did she appear to feel she
was safe to talk about it. By that stage, the perpetrator (Joe), had well and
truly gotten away with the act, it seems.</p>

<p>Justine expresses in her post, something that Sharon sees every day in her
work. A woman who feels that she has been the only one to have worn the cost
of what someone else has done to her. What someone else <em>chose</em> to do to her.</p>

<p>In Australia, any sexual assault is a crime. A workplace should not cover this
up. Any investigation into this sort of matter should include the police and
charges should be laid against the perpetrator. Joe needs to be held to
account for his actions in a court of law and Justine should be entitled to
that kind of justice. She even says herself in her post that:</p>

<blockquote>
<p>I want him to recognize the toll he&#39;s taken on my life and how everything
 has changed for me. How he took so much of myself away from how I used to
 be.</p>
</blockquote>

<p>It&#39;s not clear from Justine&#39;s post whether any legal action has happened. We
certainly hope it has. As it stands already, he has committed career suicide
for himself by doing this, and worst of all has affected someone else&#39;s
potential career. Not to mention the flow on effects of all this as well.
Justine became withdrawn from her colleagues, her family, broken up with her
boyfriend and still struggles with day-to-day life. No woman anywhere in the
world should feel this threatened. Especially in a community which has the
mantra &quot;Matz is nice, so we are nice&quot;.</p>

<p>Sharon is appalled to learn that women feel this threatened in the Ruby
community. The Ruby community is one that is partly professional, and partly
social. To me, Ruby has been like a third family for the past 8 years. Sharon
knows how much the Ruby community means to me. I love it to bits, more than
because it pays the bills. Programming is something I enjoy doing and I enjoy
attending conferences because I don&#39;t feel threatened there. When I hear about
other people attending conferences and feeling threatened in any way by
anyone, it makes me feel like I don&#39;t want to do those things anymore.</p>

<p>In any professional community, there is no place for sexual violence. Sharon
wonders what it is that makes a community accept violence in any way and
suspects its because people don&#39;t stand against it when it happens on a small
scale. There&#39;s a saying that Sharon really likes: &quot;From little things, big
things grow&quot;. If there is a little violence, you can sure bet that big
violence will be on its way.</p>

<p>What does this mean practically in the Ruby community? We think, that like any
other community, if small things are said or done or encouraged, whether the
people are intoxicated or not, it breaks down people&#39;s sensitivity towards
those things. We think that encouraging a woman to do bodyshots at a
professional conference is a small thing that perpetrates violence against
that woman. It is an act of disrespect to that woman as a human being and a
professional. Why didn&#39;t the other men in the bar discourage her from doing
that? Or discourage other people from insisting that she do that? Would you
encourage a man in the community to do that? If not, then why would you
encourage a woman? Show some respect.</p>

<p>In Australia, we have <a href="http://www.whiteribbon.org.au/">White Ribbon Day</a>,
which is a male-led movement to end violence against women. This movement aims
to encourage men to <em>never to commit, excuse or remain silent about violence
against women.</em> Sharon and I support the Ruby community thinking about this
theology and applying it seeing as the Ruby community is predominantly male
and wants to attract more women programmers. Sharon has some pretty strong
thoughts on this, extending to other industries as well.</p>

<p>The Ruby community should make the space for women to feel comfortable and
that includes making effort to discourage disrespectful behaviour, thoughts
and conversations about women. Men generally, but specifically the Ruby
community, need to start seeing women not as objects for their own
gratification or pleasure, but as other human beings who have thoughts, who
can make a valuable contribution to the community -- see women like Sandi Metz
and Sarah Mei. Women are human beings, equal in every way.</p>

<p>If you see any act of violence committed against any member of this community
or others: please speak up about it. Go over to them and ask if everyone&#39;s OK.
That&#39;s sometimes all people need. If you can&#39;t go there, talk to someone else
about it. The worst thing you can do is to stay silent about it.</p>

<p>This culture of men thinking that it&#39;s ok to make those comments and to act
that way towards women, has to be stopped.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Order adjustments within Spree</title>
   <link href="http://ryanbigg.com/2013/09/order-adjustments"/>
   <updated>2013-09-24T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2013/09/order-adjustments</id>
   <content type="html"><![CDATA[<p>When buying anything these days, there are a lot of different offers:</p>

<ul>
<li>Order more than $100 and get 10% off your order.</li>
<li>Buy a specific number of products and get free shipping for your entire order.</li>
<li>Buy 1 product, get 1 of the same product free.</li>
<li>10% off t-shirts this week!</li>
</ul>

<p>And many, many more. While it is easy for people&#39;s minds to understand,
modelling these promotion rules and actions within code so that the computer&#39;s
&quot;mind&quot; understands too, is somewhat difficult.</p>

<p>Alongside this are other potential order adjustments, both manual and
automatic. On the manual side of things, you may have a requirement to give
10% off to an order because the customer fit some kind of pre-defined
requirement for that to happen; a store credit or whatever. On the automatic
side of things, taxation rears its ugly head(s).</p>

<p>What follows is an in-depth description of how <a href="http://spreecommerce.com">Spree</a> is organised to deal with these situations.</p>

<h2>The lay of the land</h2>

<p>To help us along for this problem within Spree we have a couple of entities: </p>

<ul>
<li><strong>Orders</strong>: Track a collection of items that a user has added to their cart and is probably going to purchase.</li>
<li><strong>Line Items</strong>: A list of the items, attached to the order itself. Worth noting is that these records cache the price of the product at the moment they&#39;re added to the order, to protect against price fluctuation.</li>
<li><strong>Shipments</strong>: Groups of items that are being shipped, grouped typically by stock location but can also be grouped by availability. For example, a shirt you bought may be available to be shipped today, but the pants you bought also are on backorder and can&#39;t be shipped immediately.</li>
<li><strong>Adjustments</strong>: Used to track any adjustment to any of the above items. Adjustments have a source which is the entity which triggered this adjustment and a link to the thing being adjusted, called the &quot;adjustable&quot;.</li>
</ul>

<p>These four entities are the foundations of the adjustments system within Spree.</p>

<h2>Calculation of an order&#39;s total, without tax</h2>

<p>Calculating an order&#39;s final total is made complex by the possible adjustments on each line item or shipment within an order, as well as possible adjustments on the order itself. To calculate an order&#39;s final total, we take each line item minus its discounts and plus its taxes, each of its shipments minus their discounts and plus their taxes, then minus the order&#39;s adjustments and then we have a final total.</p>

<p>A good demonstration of this would be an order such as this:</p>

<ul>
<li>Line Item #1: $50 shirt with an adjustment that decreases the price by $10.</li>
<li>Line Item #2: $150 pants with no adjustment.</li>
<li>Shipment #1: Containing just the shirt. Would normally be $5, but with a &quot;Free shipping&quot; adjustment applied, is actually $0.</li>
<li>Shipment #2: Containing just the shirt. Shipping is $10 for this.</li>
<li>Order adjustment of $20 off, due to gift card usage.</li>
</ul>

<p>First, we sum the line items and their adjustments, which would be this equation:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">($50 - $10) + $50 = $90
</code></pre></div>
<p>The order&#39;s total so far is $90. Now we add the shipments:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">($5 - $5) + $10 = $10
</code></pre></div>
<p>We add this number to the line items&#39; total and we get $100. Now we apply the order&#39;s adjustments to this subtotal amount:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$100 - $20 = $80
</code></pre></div>
<p>This results in the order&#39;s grand total of $80.</p>

<p>The situation is slightly more complex when you bring in tax to the equation.</p>

<h2>Calculation of an order&#39;s total, with tax</h2>

<p>Now let&#39;s assume the same situation, but now we have tax adjustments to apply to the different parts of the order too. Let&#39;s say in this instance that the line items and the shipment also have a 10% tax charge.</p>

<p>With the same scenario as before:</p>

<ul>
<li>Line Item #1: $50 shirt with an adjustment that decreases the price by $10.</li>
<li>Line Item #2: $50 pants with no adjustment.</li>
<li>Shipment #1: Containing just the shirt. Would normally be $5, but with a &quot;Free shipping&quot; adjustment applied, is actually $0.</li>
<li>Shipment #2: Containing just the pants. Shipping is $10 for this.</li>
<li>Order adjustment of $20 off, due to gift card usage.</li>
</ul>

<p>The first line item&#39;s total would be calculated like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">($50 - $10) = $40 + (10% of $40) = $44
($40)       =        $40 + $4    = $44
</code></pre></div>
<p>Worth noting here is that the discount is applied first, <em>then</em> the tax rate. This is the most sensible option because if someone is purchasing an item with the intention of receiving that $10 off, it is more intuitive that the $10 is off the listing price, rather than the after-tax price. This is also the recommended behavior, as mentioned later in the &quot;Promotions and Tax&quot; section.</p>

<p>The second line item would be calculated in roughly the same way:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">($50 + (10% of $50) = $55
($50 + $5)          = $55
</code></pre></div>
<p>Note that in these situations we are calculating the adjustment amount (if it exists) and then the tax amount. The buyer of a product should only be taxed on the final adjusted price of the line item, rather than its base price. In the instance of the first line item, the base price is $40 rather than $50 due to do the -$10 adjustment. Therefore the tax for this item would be 10% of $40 ($4), rather than 10% of $50 ($5).</p>

<p>Therefore the order&#39;s total so far is <code>$44 + $55</code>, $99. Now to calculate the shipments, it would be this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">       (Shipment #1)              (Shipment #2)
($5 - $5) = $0 + (10% of $0)  +  $10 + (10% of $10) = $0 + $11 = $11
</code></pre></div>
<p>Because the first shipment has a &quot;free shipping&quot; adjustment, there is no additional tax adjustment to this shipment.</p>

<p>That means that the order&#39;s subtotal, with line items of $99 and shipments of $11, would be $110. The order&#39;s adjustment of $20 off, means the order&#39;s grand total is $90.</p>

<h2>Calculation of an order&#39;s total, with tax included in the price</h2>

<p>To further complicate matters, tax can also be <em>included</em> in the price, rather than being an additional cost applied.</p>

<p>In Australia, there is a GST (Goods and Services Tax) applied to some items. This tax is a flat 10% and is included in the price of those items. An item that is worth $50 would have $4.545... of that amount made up by GST. The calculation is this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$50 - ($50 / 110%) = $4.54545...
</code></pre></div>
<p>This tax amount <em>must</em> be displayed on receipts (and similar) because stores need it for end of financial year taxation purposes, and so this is what Spree refers to as an &quot;included&quot; adjustment, which is an adjustment which will not modify the total price. Within Spree, an item that is $50 will have a $4.545... adjustment applied to it, but that item will still cost $50.</p>

<p>To <em>even further</em> complicate matters, tax that is included in an item&#39;s price must be backed out in certain circumstances. For example, an item with a 10% VAT tax sold in a European country to a buyer outside of that country must have that 10% tax refunded.</p>

<p>Taking again the example a single line item that costs $50, with 10% of that price being this 10% VAT tax. When this item is sold to someone outside the VAT zone, we must apply a negative adjustment to the line item to refund that tax. The calculation for the adjustment is the same as before:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$50 - ($50 / 110%) = $4.54545...
</code></pre></div>
<p>The adjustment is rounded up to the second decimal point, which will result in an adjustment of $4.55, rather than $4.54.</p>

<p>This means that the adjusted price for the line item will be:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$50 - $4.55 = $45.45
</code></pre></div>
<p>If this item has a discount adjustment, then that discount is applied before the tax adjustment. Let&#39;s say that we have the $50 item with a $10 discount, and a tax rate of 10%. The calculation is then:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">($50 - $10) - ($40 / 110%) = $3.6363636...
</code></pre></div>
<p>With the adjustment, the sale price of the item would only be $40, therefore the tax subtraction for this item will be $3.63, rather than the original $4.55.</p>

<h2>Tax adjustments within Spree</h2>

<h3>The Theory</h3>

<p>Tax adjustment calculation within current versions of Spree calculates the sum of all tax amounts for the line items and apply this total as a singular adjustment to the order. Shipments are currently not taxed.</p>

<p>Future versions of Spree will apply adjustments on a per-item basis; both line items and shipments will receive their own tax adjustments. </p>

<p>Due to there not being one global tax rate, the only logical places to intially calculate the tax necessary for line items and shipments are after a user enters their address information, and then once more directly before they are asked to pay for the order.</p>

<p>The reasons for this are really simple: it&#39;s impossible to know what a person&#39;s tax rate is going to be before they have told us what their address is. Once we have that information, we can fairly accurately calculate the tax for all items within the order. Recalculating it once again before they pay for the order ensures that the adjustment amounts are correct.</p>

<p>(Aside: for a demonstration about how much exactly tax rates can differ, click around a couple of times on <a href="https://taxcloud.net/find-a-rate/default.aspx">this map</a> within any one state. This service is what the <a href="https://github.com/bluehandtalking/spree_tax_cloud">Spree Tax Cloud extension</a> uses.)</p>

<p>With adjustment information stored on a per-line item basis, it is now relatively easy to update a tax adjustment for a line item if that line item changes. Take for example our previous example of the $50 shirt with the 10% tax, but no other adjustment yet. To calculate that line item&#39;s tax, the calculation is this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$50 + (10% of $50) = $55
</code></pre></div>
<p>Now imagine that instead of 1 shirt, the buyer is actually buying 2. The calculation would only be this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">($50 * 2) + (10% of $100) = $110
</code></pre></div>
<p>In previous versions of Spree, having one tax adjustment for the entire order makes things complex, because this tax adjustment would need to be recalculated for <em>all</em> line items, rather than just the one that has changed.</p>

<p>By applying adjustments on a per-item basis -- as opposed to one adjustment for the entire order -- we also gain the ability to refund a product&#39;s price quickly and efficiently. Refunding a product is now as simple as calculating a line item&#39;s product price, plus any of its adjustments.</p>

<p>If an adjustment is applied to the order as a whole, we would need to calculate how much of that adjustment is for that particular item, refund the product&#39;s price (minus any adjustments) and then re-save the adjustment total for the order. This process -- just like the process described earlier of altering the quantity of a line item -- is computationally expensive.</p>

<h3>In Practice: Adjustment Creation</h3>

<p>Tax adjustments within Spree are not applied until after we have the buyer&#39;s address. Once we have their address, then we can go back through the order and apply the tax adjustments to the line items. This event is triggered by a <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/order/checkout.rb#L74-L76">state machine callback within <code>Spree::Order::Checkout</code></a>. The <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/order.rb#L278-L281"><code>create_tax_charge!</code> method</a> calls out to <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/tax_rate.rb#L35-L39">the <code>Spree::TaxRate.adjust</code> method</a>.</p>

<p>This method checks which tax rates match the order&#39;s tax zone. The tax zone for the order is determined either by the order&#39;s <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/order.rb#L187-L189">tax_address</a> (either its shipping or billing address, depending on the <code>Spree::Config[:tax_using_ship_address]</code>). If <code>Zone.match</code> does not return <code>true</code> in that case, it uses the default tax zone, if there is one. </p>

<p>If this method does not return a zone, then <code>Spree::TaxRate.match</code> returns nothing and no adjustments are applied to the order.</p>

<p>If the method does return a zone, then <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/tax_rate.rb#L27-L33"><code>Spree::TaxRate.match</code></a> goes through and checks every single tax rate against the order itself. The tax rates returned from this method are then <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/tax_rate.rb#L55-L69">applied to each item</a> that was passed in to <code>Spree::TaxRate.adjust</code> from <code>Spree::Order#create_tax_charge!</code>. The tax rates are compared with the items they&#39;re adjusting in the <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/calculator/default_tax.rb"><code>Spree::Calculator::DefaultTax</code> calculator</a>. If the line item or shipment&#39;s tax category (inferred from the product&#39;s tax category) matches the tax category of the product, then an adjustment will be applied.</p>

<p>In this particular case of the state machine callback for transitioning out of the <code>address</code> state, it is <em>all</em> the line items and <em>all</em> the shipments which have their tax calculated. This same calculation of the tax rates for all line items and all shipments <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/order/checkout.rb#L83-L86">also takes place once the order transitions to the payment step</a>.</p>

<p>The only additional place where tax adjustments are automatically created is within the <code>LineItem</code> model, as an <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/line_item.rb#L106-L108"><code>after_create</code> callback</a>. This callback is necessary because if an order is created and has already transitioned past the address state, the tax rate would not be recalcuated until the order reached the payment state. On the delivery screen, the buyer may have seen one tax adjustment total, and on the payment screen another. This callback prevents this situation from occurring.</p>

<h3>In Practice: Updating adjustments</h3>

<p>When a line item&#39;s quantity changes, its related adjustments must also be recalculated. Take for example the shirt worth $50 with a 10% tax again. To calculate the correct price for a shirt, the calculation is this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$50 + (10% of $50) = $55
</code></pre></div>
<p>When there are two shirts however, the calculation is this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">($50 * 2) + (10% of ($50 * 2)) = $110
</code></pre></div>
<p>Previous versions of Spree recalculate all the adjustments on the order, whereas this latest work only calculates the adjustments for things that have changed.</p>

<h4>In the past</h4>

<p>In previous versions of Spree, the process of updating a line item triggers an excessive amount of events to take place. Whenever <a href="https://github.com/spree/spree/blob/12c749ed149210cbd89e8b257bb851b931cfa9c3/core/app/models/spree/line_item.rb#L93-L99">a line item is changed or destroyed, it calls <code>update_order</code></a> which recalculates that line item&#39;s tax charge and then calls the &quot;god method&quot;, <code>order.update!</code>. <code>order.update!</code> passes off to <a href="https://github.com/spree/spree/blob/12c749ed149210cbd89e8b257bb851b931cfa9c3/core/app/models/spree/order_updater.rb#L17-L43"><code>OrderUpdater#update</code></a> which does all of the following things:</p>

<ul>
<li>Recalculates payment, item, adjustment and order totals</li>
<li>Updates order&#39;s payment state (but only if it&#39;s complete)</li>
<li>Updates each shipment on the order</li>
<li>Updates the shipment state for the order</li>
<li>Updates promotional adjustments</li>
<li>Updates shipping adjustments</li>
<li>Recalculates payment, item, adjustment and order totals again, as these may have changed due to adjustments changing.</li>
<li>Persists the totals to the database</li>
</ul>

<p>These actions take place for every single line item that has been changed or destroyed. Having the adjustments linked to the order -- rather than adjustments on a per-item basis -- is what probably lead to this complexity.</p>

<p>Similar to this is when a shipment is saved. The <a href="https://github.com/spree/spree/blob/12c749ed149210cbd89e8b257bb851b931cfa9c3/core/app/models/spree/shipment.rb#L273-L284"><code>ensure_correct_adjustment</code></a> method is called, which could potentially save and update an adjustment. If this happens, then the <a href="https://github.com/spree/spree/blob/12c749ed149210cbd89e8b257bb851b931cfa9c3/core/app/models/spree/adjustment.rb#L117-L119">adjustment itself calls <code>order.update!</code></a>, and for good measure the shipment has <a href="https://github.com/spree/spree/blob/12c749ed149210cbd89e8b257bb851b931cfa9c3/core/app/models/spree/shipment.rb#L286-L288">an additional callback to update the order too</a>.</p>

<h4>In the future</h4>

<p>In the new system, updating a line item <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/line_item.rb#L96-L104">will update only that item&#39;s adjustments</a>. The code that does this lives inside <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/item_adjustments.rb">the Spree::ItemAdjustments</a> class and is simple enough to understand easily.</p>

<p>Worth noting here is that the adjustment total and tax total are stored separately on the records being updated. This is so that a final price -- that is, the original price of the item plus any adjustments -- can be quickly calculated without doing extra database queries. Storing the tax amount separately allows us to easily show how much of that price is a tax adjustment, again without the extra database queries.</p>

<p>Updating adjustments themselves now no longer trigger the <code>OrderUpdater#update</code> event to take place. Instead, the amounts <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/adjustment.rb#L74-L82">are simply recalculated for the adjustment</a>, and no additional callbacks take place.</p>

<h2>Promotional adjustments within Spree</h2>

<p>On first thought, promotional adjustments are simpler than tax adjustments. This is simply not true, because both systems were conceived of by people. Whereas tax law dictates the correct place to add (or remove) a tax adjustment, promotional adjustment rules are dictated by people.</p>

<p>For example, a promotion that gives a buyer 10% off an order may only be valid
if their order is over $100 <em>and</em> the buyer has placed their order within a
certain timeframe <em>and</em> they&#39;re one of the first 100 people to do so. Or it
may only be valid if the buyer enters a specific coupon code, or visits a
specific page on the store. Applying this type of promotion is easy, as the
rules apply only to the order as a whole, rather than a line item for that
order.</p>

<p>More ridiculous rules are those that make the promotion adjustment eligible
only for some select line items within the cart; only shirts, for example. Any
code that attempts to apply these promotions needs to check each line item
within the order for its eligibility. If the rule qualifies the line item for
the promotional adjustment, then an adjustment should be applied. Similar
rules may exist for shipments.</p>

<p>In cases like these, promotional adjustments need to be applied on a per-line-
item basis, as opposed to one big adjustment on the entire order. Applying
them on a per-line-item basis also has the added benefit of easing a refund
process, just as mentioned previously with regards to tax adjustments. Where
possible, per-item adjustments should be applied from promotions, rather than
whole-order adjustments. This is due to the difficulty involved with potentially refunding a whole-order adjustment.</p>

<p>For cases where a rule applies to either a line item or a shipment, each line item and shipment must be checked against that particular rule. If the line item or shipment is found to be eligible for that rule, then the actions for that promotion should be taken <em>only</em> on those items. Items that are ineligible for the rule should be ignored.</p>

<h3>Eligible promotions</h3>

<p>To add some more complexity to the mix, some stores do not like it when two promotions are used at the same time. Let&#39;s say that the store has a promotion for 10% off all shirts this week, but they&#39;ve also given some of their customers a $10 off coupon.</p>

<p>Let&#39;s keep going with the $50 shirt example. If the user purchases the shirt during the 10% off promotion week <em>and</em> they use the $10 off coupon then two adjustments will be applied to the item. The first adjustment will be one of 10% of $50, which is $5. The second adjustment will be $10. These two adjustments combined, result in a $15 discount to a $50 item, rather than either $5 or $10.</p>

<p>To counteract this in Spree, we have a method called <code>choose_best_promotion_adjustment</code>. Once the adjustments to an item have been applied, the <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/item_adjustments.rb#L40-L49"><code>ItemAdjustments#choose_best_promotion_adjustment</code></a> method finds out which promotion is the best value for money, and marks all the <em>other</em> promotions as ineligible for that item. </p>

<p>This code means that in the case of our 10% and $10 off promotions, the $10
off promotion &quot;wins&quot; because it gives the best value for money. However, if
there are 3 shirts, each worth $50, on the same line item, the tables turn.</p>

<p>When the line item&#39;s quantity changes, it updates the total price of the line item to be $150. The <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/item_adjustments.rb#L19"><code>ItemAdjustments#update_adjustments</code></a> method updates each of the adjustments for that item. The adjustment for 10% off now subtracts $15 from the total, whereas the $10 adjustment still only subtracts $10. The 10% off adjustment now &quot;wins&quot; and is made eligible, and the previously eligible $10 adjustment is made ineligible.</p>

<h3>Promotions and Tax</h3>

<p>It&#39;s worth noting also that tax adjustments for an item are calculated based on the discounted price, rather than the full price. This is done for two reasons:</p>

<ol>
<li>So that customers are not charged more tax than they should be.</li>
<li>To be compliant with the law.</li>
</ol>

<p>(Aside: This is clearly shown in <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/item_adjustments.rb#L19"><code>ItemAdjustments#update_adjustments</code></a>, where promotional adjustments are recalculated first, followed by tax adjustments.)</p>

<p>For point #1, take the example of the $50 shirt again. If this shirt has a $10 off discount applied to it, its purchase price will be $40. A tax rate of 10% means therefore that a tax amount of $4 would be applied to this item, rather than $5 if we assumed the base price, as we have done in the past.</p>

<p>The best place to see this happening is within the <a href="https://github.com/radar/spree/blob/28cd74adaa88232ceec269a33783f1a79cd470a2/core/app/models/spree/calculator/default_tax.rb#L29-L39"><code>DefaultTax</code> calculator</a>. The tax amounts for line items are calculated on the discounted amount -- the base amount minus any discounts -- rather than the base amount.</p>

<p>For point #2, there&#39;s two pages on the internet which show that this must be done. The first is <a href="http://www.hmrc.gov.uk/vat/managing/charging/discounts-etc.htm#1">HM Revenue &amp; Customs</a> which states:</p>

<blockquote>
<p>If any of your goods or services are discounted, you charge VAT on the discounted price rather than the full price.</p>
</blockquote>

<p>The second is <a href="http://www.boe.ca.gov/formspubs/pub113/">California State Board of Equalization</a>, which states under the header &quot;Nontaxable discounts and coupons&quot;:</p>

<blockquote>
<p>A sale is made for $100 plus $8.25 sales tax. Upon prompt payment for the item the purchaser is allowed a discount of two percent of the sales price of $100. Since you are deducting the amount of the discount, $2, from taxable gross receipts, you are charging tax of $8.09 (8.25 percent of $98) to your customer.</p>

<p>When a discount of two percent is offered for prompt payment and an error is made and the discount of two percent is excluded from the computation, excess tax reimbursement of $0.16 will be collected from your customer ($8.25 - $8.09 = $0.16). The excess tax reimbursement should be returned to your customer or must be paid to the state.</p>
</blockquote>

<p>While these are only two examples in the greater scheme of things, we believe that these are most likely the type of tax situations which apply the world over.</p>

<p>By no longer collection this excess tax, the customer for a Spree store will now end up paying marginally less tax than they may have done in the past.</p>

<h2>Store credits</h2>

<p>The final area of adjustments to be discussed are store credits. These are typically manually applied to an order after the order has been completed by the buyer. The buyer may receive the store credit due to any number of reasons.</p>

<p>These credits are applied to the order as a whole and are the only time that a whole-order adjustment should be applied. In other situations, such as tax and promotional discounts, adjustments need to be potentially refunded along with the item.</p>

<p>Store credits, on the other hand, are manually applied adjustments. For an order with a store credit applied to it, care must be taken to ensure the correct refund is issued.</p>

<p>As an example, take the order that has been used as an example previously:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Line Item #1 (LI1): $50 shirt, $10 off. 10% tax.
Line Item #2 (LI2): $50 pants. 10% tax.
Shipment #1   (S1): Just the shirt. $5. 10% tax.
Shipment #2   (S2): Just the pants. $5. 10% tax.
</code></pre></div>
<p>The order&#39;s sub total is calculated like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">LI1        = ($50 - $10) + 10% of ($50 - 10) = $44
 +                                              +
LI2        = $50 + 10% of $50                = $55
                                                =
Subtotal   = $44 + 55                        = $99
                                                +
S1         = $5 + 10% of $5                  = $5
 +                                              +
S2         = $5 + 10% of $5                  = $5
                                                =
Total      = $99 + $10                       = $109
</code></pre></div>
<p>The order&#39;s total at this point is $109. Applying a store credit for $20 would cause the order&#39;s total to become $89. The line items&#39; and shipments&#39; amounts stay the same; it is only the order&#39;s total which has this modification applied. </p>

<p>If both items are returned to the store, the refund amount for each item will still be the original cost ($44 and $55 respectively). Care must be taken here to ensure that the buyer does not receive a greater refund than the amount that they paid. If both items were refunded to their full amount, they would receive a refund of $99, even though the order&#39;s total is $89 due to the store credit application. Spree does not protect against this, nor should it.</p>

<h2>Comments or corrections</h2>

<p>If you have any comments or corrections to offer, please email me at ryan@spreecommerce.com.</p>

<p>Last revision: 25th September, 2013.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Debugging Rails Controllers</title>
   <link href="http://ryanbigg.com/2013/09/debugging-rails-controllers"/>
   <updated>2013-09-05T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2013/09/debugging-rails-controllers</id>
   <content type="html"><![CDATA[<p>Here&#39;s my flow for debugging a misbehaving controller. Imagine that there&#39;s a form at <code>app/views/messages/new.html.erb</code> that is posting to <code>MessagesController#create</code>. The parameters aren&#39;t being passed through from the form to the controller, and the model is raising a validation error saying that a field is blank -- even though it&#39;s <em>clearly</em> not.</p>

<h3>Step 0: Does restarting the server fix the problem?</h3>

<h3>Step 1: Check the form</h3>

<ul>
<li>Is the attribute defined in the correct place? </li>
<li>Is it using the form builder helper (i.e. <code>f.text_field</code>) or is it using <code>text_field_tag</code>? If it&#39;s supposed to be <code>params[:message][:body]</code> then it should be using the form builder. If not, then it should be using <code>text_field_tag</code> or similar.</li>
<li>Unlikely, but still possible: Is the field disabled before submission of the form? Disabled fields are not passed through as parameters.</li>
</ul>

<h3>Step 2: Check the controller</h3>

<ul>
<li>Is the route to the controller defined correctly in <code>config/routes.rb</code>?</li>
<li>Is the controller set up to receive the right parameters?</li>
<li>Did I spell &#39;message&#39; with the correct number of &#39;s&#39;s within <code>params[:message]</code>?</li>
<li>Are the parameters from the form permitted using strong_parameters?</li>
<li>Are <em>all</em> the parameters from the form permitted?</li>
<li>Did I spell the parameters correctly? </li>
<li>What does the log output say for this controller? Does it contain the parameters I want with the values I want?</li>
<li>Can I place a <code>binding.pry</code> statement at the top of the action and print out <code>params</code> to see the correct parameters there too?</li>
</ul>

<h3>Step 3: Check the model</h3>

<ul>
<li>If using <code>attr_accessible</code>, are the attribute marked as accessible?</li>
<li>Did I accidentally use <code>attr_accessor</code> when I meant to use <code>attr_accessible</code>?</li>
<li>Did I define a setter method for this attribute accidentally that doesn&#39;t actually set the attribute?</li>
<li>Is there a callback that unsets this parameter somehow?</li>
<li>If it&#39;s nested attributes that are being sent through, go check the nested model for the above.</li>
</ul>
]]></content>
 </entry>
 
 <entry>
   <title>Bundler local paths</title>
   <link href="http://ryanbigg.com/2013/08/bundler-local-paths"/>
   <updated>2013-08-16T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2013/08/bundler-local-paths</id>
   <content type="html"><![CDATA[<p>There&#39;s a little known feature of Bundler that allows you to use a local Git
repository while developing locally, and a remote Git repo when deploying. This
feature means that you no longer have to <em>constantly</em> switch between local paths:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem &#39;spree&#39;, :path =&gt; &quot;~/Projects/gems/spree&quot;
</code></pre></div>
<p>And remote paths:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem &#39;spree&#39;, :github =&gt; &#39;spree/spree&#39;, :branch =&gt; &#39;master&#39;
</code></pre></div>
<p>How does it work?</p>

<hr>

<p>Well, what you can do instead is tell Bundler that you have a local copy of
this repository by running a command like this in your terminal:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">bundle config local.spree ~/Projects/gems/spree
</code></pre></div>
<p>Then in your Gemfile whenever you reference a Git repo for this gem, like this...</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem &#39;spree&#39;, :github =&gt; &#39;spree/spree&#39;, :branch =&gt; &#39;master&#39;
</code></pre></div>
<p>Bundler will use the local copy. When you deploy this application to your server, because the server is not configured to use a local copy of the repo, it will use the proper repo from GitHub.</p>

<p>For more information, check out the <a href="http://bundler.io/v1.3/git.html">Bundler documentation page</a>, under &quot;Local Git Repos&quot;.</p>

<hr>

<p>Thanks to <a href="http://p.arndt.io">Phil Arndt</a> who first showed me this trick many moons ago.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Waiting for AJAX in Capybara</title>
   <link href="http://ryanbigg.com/2013/07/waiting-for-ajax-in-capybara"/>
   <updated>2013-07-09T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2013/07/waiting-for-ajax-in-capybara</id>
   <content type="html"><![CDATA[<p>In Spree recently, we&#39;ve been using more and more of <a href="http://guides.spreecommerce.com/api">Spree&#39;s API</a> for the Backend component. This means that we&#39;ve introduced more AJAX-powered features into the backend, which has lead to some interesting test failures.</p>

<p>Some of these test failures are that the tests just aren&#39;t waiting long enough for an AJAX request to complete before checking for content on the page. Others are more ... bewildering:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">F
An error occurred in an after hook
  ActiveRecord::StatementInvalid: 
    SQLite3::BusyException:
    database is locked: DELETE FROM &quot;spree_activators&quot;;
  occurred at ...lib/sqlite3/statement.rb:108:in `step&#39;
</code></pre></div>
<p>This error happens when an AJAX request is still being processed by the server, but the test finishes and Database Cleaner attempts to wipe the database. The server has locked the database until it&#39;s done what it needs to do, and during that lock Database Cleaner attempts to wipe all the data and can&#39;t.</p>

<p>To fix this, we just needed to wait for all AJAX requests to complete. This means replacing <code>sleep</code> with magic numbers, like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sleep(2)
</code></pre></div>
<p>With this method:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def wait_for_ajax
  counter = 0
  while page.execute_script(&quot;return $.active&quot;).to_i &gt; 0
    counter += 1
    sleep(0.1)
    raise &quot;AJAX request took longer than 5 seconds.&quot; if counter &gt;= 50
  end
end
</code></pre></div>
<p>This code will call <code>$.active</code> which is jQuery-code for &quot;how many <code>$.ajax</code> requests are still active?&quot;, and if that returns more than 0, then it will sleep for a moment, and check again. This code gives AJAX requests 5 seconds to wrap up before raising an exception and moving on.</p>

<p>Use this <code>wait_for_ajax</code> method when you need to wait for AJAX requests to finish in your tests to prevent weird, unpredictable JavaScript errors.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Finding SQL queries in Rails</title>
   <link href="http://ryanbigg.com/2013/06/finding-sql-queries-in-rails"/>
   <updated>2013-06-26T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2013/06/finding-sql-queries-in-rails</id>
   <content type="html"><![CDATA[<p>In my work on Spree, sometimes I&#39;ve been wanting to know <em>where</em> queries are coming from. Just like any large codebase, the &quot;magic&quot; that goes on inside it to make the cogs spin the right way can be a bit complex.</p>

<p>Active Support&#39;s Notifications feature is really handy for this. All I need to do is subscribe to the <code>sql.active_record</code> event and get it to output the stacktrace of where the query is generated, like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="s2">&quot;sql.active_record&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">details</span><span class="o">|</span>
  <span class="k">if</span> <span class="n">details</span><span class="o">[</span><span class="ss">:sql</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">/INSERT INTO &quot;spree_inventory_units&quot;/</span>
    <span class="nb">puts</span> <span class="nb">caller</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="s2">&quot;*&quot;</span> <span class="o">*</span> <span class="mi">50</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Whenever a query that inserts a new record into the <code>spree_inventory_units</code> table is issued through Active Record, this code will give me a complete stacktrace of where that came from.</p>
]]></content>
 </entry>
 
 <entry>
   <title>About spec/support</title>
   <link href="http://ryanbigg.com/2013/02/about-spec-support"/>
   <updated>2013-02-02T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2013/02/about-spec-support</id>
   <content type="html"><![CDATA[<p>I&#39;m going to expand on a tweet I wrote this morning:</p>

<blockquote>
<p>Thinking more and more that spec/support is
an anti-pattern. I don&#39;t want everything required for every test.</p>
</blockquote>

<p>I came to this thought when I was working on sharing testing support code
between an engine and an application, for an example in Chapter 4 of
<a href="https://leanpub.com/multi-tenancy-rails">Multitenancy with Rails</a>. What I had
originally was a file in <code>spec/support</code> called <code>SubdomainHelpers</code>, defined like
this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">module SubdomainHelpers
  def within_account_subdomain(&amp;block)
    context &quot;within a subdomain&quot; do
      let(:subdomain_url) { &quot;http://#{account.subdomain}.example.com&quot; }
      before { Capybara.default_host = subdomain_url } 
      after { Capybara.default_host = &quot;http://example.com&quot; }
      yield
    end
  end
end
</code></pre></div>
<p>This module is then used to extend the RSpec <code>describe</code> blocks, like this</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">describe &quot;User sign in&quot; do
  extend SubdomainHelpers
  ...
end
</code></pre></div>
<p>And then we can call <code>within_account_subdomain</code> whenever we need it.</p>

<hr>

<p>My problem with this is that this file is required <em>all the damn time</em>, even in
tests which don&#39;t use Capybara. The culprit is this default line in
<code>spec/spec_helper.rb</code></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Dir[File.dirname(__FILE__) + &quot;/support/**/*.rb&quot;].each {|f| require f }
</code></pre></div>
<p>This line is used for requiring all the files in <code>spec/support</code> so that you
don&#39;t have to. Seems like a good idea, but isn&#39;t once you have a ton of things
in <code>spec/support</code>.</p>

<p>Making it easy to require the file defining <code>SubdomainHelpers</code> in both the
engine and the application involves moving the helper in to the <code>lib</code> directory
of the engine, and then requiring that file in the appropriate places:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">require &#39;subscribem/testing_support/subdomain_helpers&#39;
</code></pre></div>
<p>Even if we <em>weren&#39;t</em> using an engine and an application and just had the
application, I would much rather just be requiring just the files I need for a
test, like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">require &#39;support/subdomain_helpers&#39;
</code></pre></div>
<p>Than having the full range of <code>spec/support</code> files loaded all at once on the
off chance a spec might need it. I wouldn&#39;t expect this to <em>dramatically</em> increase a spec suite&#39;s
run time, but it&#39;s got to be helping somewhat.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Multitenancy with Rails</title>
   <link href="http://ryanbigg.com/2013/01/multitenancy-with-rails"/>
   <updated>2013-01-21T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2013/01/multitenancy-with-rails</id>
   <content type="html"><![CDATA[<p>Well before I had even <a href="http://ryanbigg.com/2012/11/no-more-writing-for-manning/">split from
Manning</a>, I had been
working on a new book called <a href="https://leanpub.com/multi-tenancy-rails">&quot;Multitenancy with
Rails&quot;</a>, which you can buy right now.</p>

<p>The idea for the book has been around for a while. A couple of friends (<a href="https://github.com/parndt">Phil
Arndt</a>, <a href="https://github.com/knewter">Josh Adams</a>,
<a href="https://github.com/robyurkowski">Rob Yurkowski</a> and <a href="https://github.com/GeekOnCoffee">Andrew
Hooker</a>) and I had been talking in our secret
IRC back channel about what a more advanced Rails book might cover. Through I
don&#39;t know what process, we came up with this idea and I&#39;m putting it into book
form.</p>

<p>For now, all the book is covering is what we&#39;re building, which is a hosted
forum application, how to build a foundation for the subscriptions
engine and then how we&#39;re going to accomplish the database scoping necessary to
separate the accounts&#39; data. </p>

<p>The engine is what the book&#39;s application is going to heavily rely on. This foundation
building deals with adding things like accounts which have subdomains, and then
authenticating users for those accounts using Warden, and not Devise. To find
out why, you&#39;re going to have to read it.</p>

<p>The chapter on scoping first of all covers using a database field, which is the typical way
that people have been dealing with this problem for years, and then covers the
&quot;new&quot; way of doing it: by using PostgreSQL schemas and the <code>apartment</code> gem.</p>

<p>The next chapter, Chapter 4, will cover building the application which will
combine both the subscriptions engine we build in Chapter 2, as well as the
<a href="https://github.com/radar/forem">Forem</a> forum engine that the aforementioned
folk and I build and maintain.</p>

<p>Chapter 5 will cover subscriptions, where each account could be subscribed to
the application for an amount such as $29/month and that allows them to create 5
forums. That sort of thing. It&#39;ll also cover taking payments for those
subscriptions using Stripe&#39;s wonderful API, and then what to do if somebody
decides to do a dodgy.</p>

<p>Testing (with RSpec and Capybara) is throughout, just like with Rails 3 in
Action.</p>

<p>So if you&#39;re looking for a book that covers all of the above, please <a href="https://leanpub.com/multi-tenancy-rails">buy a copy
of Multitenancy with Rails</a> <em>right
now</em>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>A story about scaffolding</title>
   <link href="http://ryanbigg.com/2013/01/a-story-about-scaffolding"/>
   <updated>2013-01-07T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2013/01/a-story-about-scaffolding</id>
   <content type="html"><![CDATA[<p>When Rails was released, one of the &quot;showy&quot; features in it was the ability to get up and running quickly. That&#39;s always been the focus for Rails.</p>

<p>One of the things that allowed you to get up and running so quickly was the scaffold feature of Rails. You would run <code>rails generate scaffold posts</code> and there you would then have a scaffold for posts that would allow you to perform CRUD (Create, Read, Update and Destroy) actions on these posts. Back in Rails 1 days, it was a simple one line in your controller: <code>scaffold</code>. In later Rails releases (can&#39;t remember right now which one specifically), this was changed to generating the familiar scaffold controllers you see today that provide a HTML and XML response, or even more recently, a HTML and JSON response.</p>

<p>Scaffolding is great for getting something that will allow you to perform those CRUD actions on it. However, the moment you need to step outside that safe cocoon, you run into trouble. You want to add a new field to your database, say an author field if we&#39;re sticking with the Post scaffold idea. So you do that, but then you don&#39;t realise that you need to add the field to the <code>attr_accessible</code> list<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup> (which you had no idea about until someone told you about it in the Rails channel), and you&#39;d need to add it to the form partial as well. Newbies don&#39;t learn how to do these very, very basic things first off <em>if they&#39;re using scaffolding</em> and that&#39;s why it&#39;s a bad thing.</p>

<p>If you begin using scaffolding, you can indeed see exactly what functionality Rails is capable of. Goodo, you can create, read, update and delete things. The problem, however, is that you end up not learning how any of it works, and it seems like &quot;a wizard did it&quot;. Of course, as you get more knowledgeable about Rails you&#39;ll know that there&#39;s no such thing as wizards.</p>

<p>Learning from the ground up that in order to be able to display even a list of posts on a page that you need a <code>Post</code> model, that the model responds to an <code>all</code> method, that is then called in a thing called <code>PostsController</code> and then that information is stored in an instance variable which is then accessed by this thing called a &quot;view&quot; which has the same name as your action... that may seem like hard work at first (hint: it is), but it&#39;s worth it. That is because the moment you want to step outside the cocoon of a CRUD resource and do something differently, you&#39;ll probably know how to. </p>

<p>Scaffolding doesn&#39;t teach you the extreme basics of Rails development. Building things from scratch does. This foundation is absolutely critical to understanding how Rails works.</p>

<div class="footnotes">
<hr>
<ol>

<li id="fn1">
<p><code>attr_accessible</code> is going away in Rails 4, being replaced by https://github.com/rails/strong_parameters&nbsp;<a href="#fnref1" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div>
]]></content>
 </entry>
 
 <entry>
   <title>No more writing for Manning</title>
   <link href="http://ryanbigg.com/2012/11/no-more-writing-for-manning"/>
   <updated>2012-11-12T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2012/11/no-more-writing-for-manning</id>
   <content type="html"><![CDATA[<p>As of around this time last week, I am no longer writing for Manning.</p>

<p>This decision has been a long time coming. Ever since I started working for
Manning I&#39;ve had issues with their tooling. I covered these in posts like <a href="http://ryanbigg.com/2011/11/don-t-print-hard-copies/">&quot;Don&#39;t print
hard-copies&quot;</a> and <a href="http://ryanbigg.com/2010/12/the-writing-process/">&quot;The
Writing Process&quot;</a>).
They&#39;ve been saying now for <em>two years</em> that they were going to fix it and...
nothing much has been done.</p>

<p>I got so frustrated with their system two weeks in, I decided to write my own.
I demonstrate part of Manning&#39;s system and part of my own, in <a href="https://vimeo.com/45002976">this short
video</a>. I wrote my own review system in
a relatively short period of time.</p>

<p>The writing tools are something that I need to use everyday and if they&#39;re just
getting in my way, it totally kills my vibe to write. I don&#39;t want to hate
writing, because I <em>love</em> writing. I love the feeling I get when I can clearly
explain something to someone the first time in writing and they just <em>get it</em>.</p>

<p>So, no more writing for Manning because their tools for doing it are terrible.
The people at Manning are nothing short of excellent.</p>

<p>Rails 4 in Action <em>will</em> be published by Manning -- they have the rights to the
book, not me -- meaning they will need to source another author to do it. For
any questions related to that process, contact <a 
href='support@manning.com'>support@manning.com</a>. They&#39;ll know more about it
than I do.</p>

<hr>

<p>All of that doesn&#39;t mean I&#39;ve stopped writing Rails material completely. Oh no no no. You just wait.</p>
]]></content>
 </entry>
 
 <entry>
   <title>I didn&#39;t submit a talk to RubyConf Australia</title>
   <link href="http://ryanbigg.com/2012/11/i-didn-t-submit-a-talk-to-rubyconf-australia"/>
   <updated>2012-11-01T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2012/11/i-didn-t-submit-a-talk-to-rubyconf-australia</id>
   <content type="html"><![CDATA[<p>Because I have nothing interesting to talk about.</p>

<p>Honestly: I can&#39;t think of a single thing that I think would be entertaining for a wide audience to listen to me talk about. I don&#39;t want to submit a talk based solely on the notion that I&#39;m supposed to be a mildly-famous member of the Australian Ruby community. What a crap premise to submit a talk on! What on earth could I possibly give a talk about and make informative for a large audience?</p>

<p>I&#39;m not going to talk about writing a book because I already moan and bitch about that enough on Twitter. Plus, the actual act of writing a book isn&#39;t <em>exciting</em>.</p>

<p>I&#39;m not going to talk about documentation because nobody gives a crap about proper documentation, save for a very small select group of people and the people who are reading it. Don&#39;t bullshit me. You know it&#39;s true.</p>

<p>I&#39;m not going to talk about engines in general because there&#39;s already a great guide that covers 95% of what a conference audience needs to know. Chapter 17 of Rails 3 in Action covers it and a bit more also. No point giving a talk about something that&#39;s already been written about. Personally, I go to conferences to see <em>new, cool and interesting stuff</em>. Not things that I can read about or watch on the Internet.</p>

<p>I&#39;m not going to talk about my work on Spree because -- and I say this without intending an arrogant tone -- the work itself is self-evident and you don&#39;t need to hear about it at a conference. I&#39;m especially <em>not</em> going to talk about my thoughts on how to split up a monolithic <em>engine</em> such as Spree into smaller, easier to manage components. That checkout state machine work that I did? Excuse my brashness, but that was fucking awesome and I&#39;m so damn proud of it, but I&#39;m not going to talk about <em>that</em> either. Allowing Spree stores to choose their authentication backend? Please. It was just this thing I did. It doesn&#39;t deserve a whole conference talk.</p>

<p>I&#39;m quite happy, this time, to sit there and be an audience member who is learning about all the <em>new, cool and interesting stuff</em> <strong>other</strong> people are doing.</p>
]]></content>
 </entry>
 
 <entry>
   <title>JavaScript Arrays and Objects</title>
   <link href="http://ryanbigg.com/2012/10/javascript-arrays-and-objects"/>
   <updated>2012-10-03T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2012/10/javascript-arrays-and-objects</id>
   <content type="html"><![CDATA[<p><a href="https://github.com/spree/spree/blob/bf0b85472e477f20f84d030c575382b9c0922903/core/app/views/spree/admin/return_authorizations/_form.html.erb#L54-56">These three little lovely lines</a> of very-much obtrusive JavaScript caused a little bit of frustration this afternoon.</p>

<p>What was happening was that in Google Chrome, the page was giving an &quot;aw snap!&quot; error. So I went to Firefox, where the page didn&#39;t &quot;aw snap&quot;, but instead hung for a moment then asked if I wanted to stop the script.</p>

<p>What could that JavaScript be doing? Well, it&#39;s not that hard to understand <em>now</em>, but it didn&#39;t click the first couple of times I read it.</p>

<p>The script initializes a new JavaScript array, like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var variant_prices = new Array();
</code></pre></div>
<p>Fairly innocuous. We would&#39;ve also accepted <code>var variant_prices = [];</code>.</p>

<p>Next, it uses some ERB to go through all the inventory units for an order and then assigns each variant to the array, using the variant&#39;s id <em>as an index in the array</em>. If a variant has an <code>id</code> of say, 1, this is not a problem. Why? Because JavaScript is smart enough to know that it should create a two element with <code>variant_prices[0]</code> being undefined, and <code>variant_prices[1]</code> being whatever value is assigned.</p>

<p><em>However</em>, if the variant&#39;s <code>id</code> is something a little higher, like 1,013,589,413, then you start to run into problems. In that case, JavaScript would create a <strong>one billion, thirteen million, five hundred and eighty-nine thousand, four hundred and fourteen element</strong> array. All to store <em>one</em> value in, right at the end.</p>

<p>Obviously, this is not very efficient and would lead to some performance degredations. Smart browsers would detect this early on and show a vague warning screen and dumber browsers would ask politely if you&#39;d like to stop the script. Which script? Well, they won&#39;t tell you that. You have to play guessing games, like most of the time with the beautiful language that is JavaScript.</p>

<hr>

<p>The <em>now obvious</em> solution to this problem is to <em>not</em> use a JavaScript Array for creating what is obviously a key-value store. Instead, the variable should be initialised like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var variant_prices = {};
</code></pre></div>
<p>Then you would be assigning keys to the JS object, rather than values at specific indexes in an Array which could have a billion elements.</p>
]]></content>
 </entry>
 
 <entry>
   <title>On Hiring</title>
   <link href="http://ryanbigg.com/2012/05/on-hiring"/>
   <updated>2012-05-25T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2012/05/on-hiring</id>
   <content type="html"><![CDATA[<p>My previous blog post got <em>very</em> different replies. On one hand they were like this:</p>

<blockquote class="twitter-tweet"><p>AWESOME! " Also, I’m 24. What makes you think I have any damn right being a Chief of any department?" - @<a href="https://twitter.com/ryanbigg">ryanbigg</a></p>&mdash; Federico Soria (@fedesoria) <a href="https://twitter.com/fedesoria/status/205785925924552704" data-datetime="2012-05-24T22:22:42+00:00">May 24, 2012</a></blockquote>

<blockquote class="twitter-tweet" data-in-reply-to="205784403081822208"><p>@<a href="https://twitter.com/ryanbigg">ryanbigg</a> that's just... Wow. Thanks for sharing.</p>&mdash; Robert Pitts (@rbxbx) <a href="https://twitter.com/rbxbx/status/205786385725128704" data-datetime="2012-05-24T22:24:32+00:00">May 24, 2012</a></blockquote>

<blockquote class="twitter-tweet" data-in-reply-to="205784403081822208"><p>@<a href="https://twitter.com/ryanbigg">ryanbigg</a> haha made my day. The hype for programming has ppl heads spinning <a href="https://twitter.com/search/%2523ittakestime">#ittakestime</a></p>&mdash; Marcell Purham (@Marcellpurham) <a href="https://twitter.com/Marcellpurham/status/205801753608859649" data-datetime="2012-05-24T23:25:36+00:00">May 24, 2012</a></blockquote>

<p>Others were humourous:</p>

<blockquote class="twitter-tweet"><p>“@<a href="https://twitter.com/ryanbigg">ryanbigg</a>: What happens when a scummy business guy tries to hire me: <a href="http://t.co/pkONeFg5" title="http://ryanbigg.com/2012/05/how-not-to-hire-me/">ryanbigg.com/2012/05/how-no…</a>” <a href="http://t.co/ICbuuTV5" title="http://Rubydramas.com">Rubydramas.com</a> about to be reset.</p>&mdash; Tom Meier (@pommytom) <a href="https://twitter.com/pommytom/status/205787384275677185" data-datetime="2012-05-24T22:28:30+00:00">May 24, 2012</a></blockquote>

<p>And others really hated it:</p>

<blockquote class="twitter-tweet"><p>You're neither clever or elite when you're rude to recruiters, you're just a dick.</p>&mdash; Ben Schwarz (@benschwarz) <a href="https://twitter.com/benschwarz/status/205793189557321728" data-datetime="2012-05-24T22:51:34+00:00">May 24, 2012</a></blockquote>

<blockquote class="twitter-tweet"><p>.@<a href="https://twitter.com/ryanbigg">ryanbigg</a> just so you know mate, you're a front for our community - a popular person. Don't be a douche - be like matz, be nice.</p>&mdash; Keith Pitt (@keithpitt) <a href="https://twitter.com/keithpitt/status/205809696022609920" data-datetime="2012-05-24T23:57:09+00:00">May 24, 2012</a></blockquote>

<blockquote class="twitter-tweet" data-in-reply-to="205810643742363648"><p>@<a href="https://twitter.com/ryanbigg">ryanbigg</a> "Do you have any idea who you’re writing to?" is the most douche baggy comment of all time. And you started with it…</p>&mdash; Keith Pitt (@keithpitt) <a href="https://twitter.com/keithpitt/status/205810805214679042" data-datetime="2012-05-25T00:01:34+00:00">May 25, 2012</a></blockquote>

<blockquote class="twitter-tweet" data-in-reply-to="205810905391439872"><p>@<a href="https://twitter.com/ryanbigg">ryanbigg</a> oh I'm sorry that you expect that. He should known. You're a fucking idiot mate. I'm thankful for the hard work you've done.</p>&mdash; Keith Pitt (@keithpitt) <a href="https://twitter.com/keithpitt/status/205811282069295106" data-datetime="2012-05-25T00:03:28+00:00">May 25, 2012</a></blockquote>

<blockquote class="twitter-tweet" data-in-reply-to="205808912564359168"><p>@<a href="https://twitter.com/ryanbigg">ryanbigg</a> You fuelled that conversation. Results would have been much different with a simple, polite "no thanks", or even by ignoring.</p>&mdash; Justin French (@justinfrench) <a href="https://twitter.com/justinfrench/status/205810661517828096" data-datetime="2012-05-25T00:01:00+00:00">May 25, 2012</a></blockquote>

<blockquote class="twitter-tweet" data-in-reply-to="205812014768066560"><p>@<a href="https://twitter.com/ryanbigg">ryanbigg</a> @<a href="https://twitter.com/keithpitt">keithpitt</a> Well, to be fair, it isn't hard to just politely reply "thanks but no thanks." We all get these emails...</p>&mdash; Fred Wu (@fredwu) <a href="https://twitter.com/fredwu/status/205812358285766656" data-datetime="2012-05-25T00:07:44+00:00">May 25, 2012</a></blockquote>

<p>Others suggested I just hit ignore:</p>

<blockquote class="twitter-tweet" data-in-reply-to="205811694541352962"><p>@<a href="https://twitter.com/ryanbigg">ryanbigg</a> Long term, your biggest regret will be wasting your life conversing with the fellow.Learn to just hit "Archive" and move on.</p>&mdash; Mike Perham (@mperham) <a href="https://twitter.com/mperham/status/205822000382480384" data-datetime="2012-05-25T00:46:03+00:00">May 25, 2012</a></blockquote>

<blockquote class="twitter-tweet" data-in-reply-to="205812014768066560"><p>@<a href="https://twitter.com/ryanbigg">ryanbigg</a> "No thanks."</p>&mdash; Justin French (@justinfrench) <a href="https://twitter.com/justinfrench/status/205812193105674240" data-datetime="2012-05-25T00:07:05+00:00">May 25, 2012</a></blockquote>

<p>Everyone&#39;s entitled to have their say about this, and I&#39;m sad that so many people took offense to something that I genuinely believe should have been done.</p>

<hr>

<p>To make it clear, I don&#39;t like being cold-called. I think it&#39;s invasive and generally a waste of everyone&#39;s time. In the case of hiring, for a business person
to cold-call a whole bunch of programmers shows that they don&#39;t care about who they hire. They just want somebody to fill their position. </p>

<p>I think that they <em>should</em> care. Why? Well, the business person is going to spend <em>months</em>, perhaps <em>years</em> of their life with this person. How do you know
that person is going to be the right fit for your job? What if that person is a complete douchebag who will post most of the conversation on his blog and
laugh about it?</p>

<p>All I ask is that people who are looking to hire other people do their research first. Find out what they <em>love</em> doing and appeal to that, if you can. Invite
them out for a lunch discussion or if that doesn&#39;t work, a post-work drink or two. Cold-calling just anybody is most likely not going to land you the right person for your job. Go to meetups, programming events and meet people. Don&#39;t meet them just for the sake of seeing if they&#39;re wanting to go work for your company, but meet them to understand what their type is like.</p>

<p>To not do the research first shows a blatant disregard of care for the person that you&#39;re contacting, and I honestly think that contacts made in this fashion
cannot work out. Find common interests, discuss them in polite ways and see if you&#39;re a fit. If you&#39;re not, move on. Do your research on the next person.</p>

<hr>

<p>I agree that I started the email thread wrong. As I said before, I felt invaded by this email. Sure, I could&#39;ve ignored it and sent it to the Archive/Trash,
but that&#39;s not my style. If I am sending an email to a person, I expect a reply. Not an instant one, of course. Perhaps it would take a week or longer. But
still, a reply is always nice.</p>

<p>Replying in the way that I did was most certainly wrong. Cold-calling someone without doing any level of research before is wrong also. We were both wrong. Replying to somebody validates that &quot;Yes, you are worth my time&quot;. That&#39;s the <em>essence</em> of why I reply to every single email that is personally addressed to me.</p>

<hr>

<p>I want to make it so that recruiting in programming <em>doesn&#39;t</em> suck as much as it does now. Companies just want bodies, and while that makes sense in a business
fashion, how do you know if the new hire will be a good fit for the team or not and secondly if the work is interesting to them. If the new hire doesn&#39;t fit
with the team, then there&#39;ll be conflicts and inevitably someone will have an ego bruised, or worse. If the person doesn&#39;t enjoy the work, then they&#39;re
probably not going to work as hard as they could. Both of these things are absolutely vital to making someone fit in at a company, in my opinion.</p>

<p>I know all too well how <em>fucking great</em> we have it in this industry. I can announce on Twitter that I&#39;m leaving my current job and <em>within the day</em> I have at
least 5 companies saying &quot;Come work for us, please&quot;. I know how well we have this because I&#39;ve seen what happens in other industries, in a second person
fashion.</p>

<p>Recently, both my mum and her husband were out of work, and were struggling to find jobs. They weren&#39;t able to put out on Twitter (or Facebook) that
they were looking for a job and get picked up by a spectactular company within the same day. They had to work <em>damn hard</em> to find new jobs, and they&#39;ve done
just that. Even <em>with</em> all their experience (they&#39;re in their 40s), it was still a struggle for them to find a job.</p>

<p>So yeah, I know how great we&#39;ve got it in this fantastic industry of ours.</p>

<hr>

<p>I&#39;ll practice not being an arrogant asshole, and I&#39;ll expect people who are in the business of hiring others to practice doing their research. Together, we can
make this thing work and keep building this great industry.</p>

<script src="http://platform.twitter.com/widgets.js"></script>
]]></content>
 </entry>
 
 <entry>
   <title>How not to hire me</title>
   <link href="http://ryanbigg.com/2012/05/how-not-to-hire-me"/>
   <updated>2012-05-25T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2012/05/how-not-to-hire-me</id>
   <content type="html"><![CDATA[<p>On the 16th of May, I was contacted by a guy I&#39;ll call &quot;M&quot;. M emailed me a 300-word, no paragraph breaks email that went something like this:</p>

<blockquote>
<p>Hi, <em>blah blah blah</em> seed funding <em>blah</em> tech startup <em>blah blah blah</em> no programming experience <em>blah blah blah</em> advertising platform <em>blah blah</em> you will be CTO blah blah blah blah blah*. Thanks, M.</p>
</blockquote>

<p>I&#39;ve obviously taken the liberty here to modify his wording slightly, but you get what he was trying to say.</p>

<p>I was a little upset because he didn&#39;t do <a href="http://ryanbigg.com/about-me">his research</a>. So I emailed back in my best arrogant famous person impression:</p>

<blockquote>
<p>Do you have any idea who you&#39;re writing to?</p>
</blockquote>

<p>To which he replied:</p>

<blockquote>
<p>Yeah I think it was intended at you, that&#39;s why the email was addressed to your inbox...</p>
</blockquote>

<p>It was at this moment that my hand went to my face in a rather quick fashion. The next thing I can remember is only feeling half my face and laying on the
floor. I picked myself up off the floor and wrote a longer email:</p>

<blockquote>
<p>I am not &quot;open minded to the possibility of also becoming CTO later down the track&quot; because I already work at a company called Spree Commerce as the Community Manager. This email does not represent them, because it&#39;s my personal email. I wrote a book too, called Rails 3 in Action. I&#39;m actually writing the second edition now. Also, I&#39;m 24. What makes you think I have any damn right being a Chief of any department?</p>

<p>Do not think that you can simply pull people away from a company with buzzwords and hand-waving. In today&#39;s industry, you need to &quot;court&quot; people and make them want to work for you. Cold-calling them is at the exact opposite end of the &quot;What to do and what not to do&quot; scale.</p>
</blockquote>

<p>He then asks: </p>

<blockquote>
<p>In response to your statement &quot;In today&#39;s industry, you need to &quot;court&quot; people and make them wanting to work for you. Cold-calling them is at the exact opposite end of the &quot;What to do and what not to do&quot; scale&quot;. How can I go about courting people in a way that I can gain their trust and attention without looking like some other annoying business guy? However I must say your advice is flawed in some ways because either way I can&#39;t just wait for people to come to me, so there has to be some element of cold calling whether it&#39;s emailing or approaching them unannounced.. Unless you have better advice and I&#39;m all open to hearing it</p>
</blockquote>

<p>Regarding the &quot;annoying business guy&quot;, he&#39;s gone past this point at this stage.</p>

<p>I reply back suggesting things like user group meetings and Railscamps.</p>

<hr>

<p>Anyway, this kind of goes on for a couple of emails and Mr. M does his research eventually. He then goes into full-sleazy-business-dude mode:</p>

<blockquote>
<p>... but if you wanted to work with me full time I would give you a meaningful amount of equity (at the cofounder level) I would also make sure your rent, internet connectivity, beer and basic essentials would be covered;</p>
</blockquote>

<p>You cannot buy me out with equity, suggestions that you&#39;ll pay my rent, internet connectivity, beer (even though I don&#39;t drink beer) and basic essentials. So I
tell him that:</p>

<blockquote>
<p>No, absolutely not.</p>

<p>You would be dealing a great blow to Spree if you did that, and honestly your work doesn&#39;t interest me. I <em>hate</em> advertising, because most of it is pure crap. I&#39;m actually considering paying $6.99 each month for Spotify <em>not</em> because I want access to new music, but because I want to get rid of the ads.</p>

<p>Your equity offer would be paltry, no doubt. Do you have any idea what I earn at Spree? Do you have any idea what I charge <em>per hour</em> for consulting gigs outside of my daily work?</p>

<p>Yes, you say you would pay for rent, internet connectivity, beer (although I don&#39;t drink it) and basic essentials. That is, in combination with the equity, not even coming close to the emotional compensation I would need for selling my soul to an advertising platform.</p>
</blockquote>

<p>The last part about &quot;emotional compensation&quot; is a joke, by the way.</p>

<p>He also said this:</p>

<blockquote>
<p>In under just three months you would be able to figure out whether it would be worthy or not putting more of your time in this startup since from the launch date for the website to function we need direct money inflow.</p>
</blockquote>

<p>So no direct money inflow at the moment. This is a <em>huge</em> red flag to me. &quot;Yes, please work for a pittance but I <em>promise</em> we&#39;ll be making money hand over fist
any time now!&quot;. I&#39;m not a business guy, but I think this guy is a little crazy by this point.</p>

<p>Oh, he also said I could &quot;influence millions of people&quot;. I replied:</p>

<blockquote>
<p>I have made my decision. I am sticking with Spree and no amount of equity, technical challenges, narrowest possibility of influencing millions of people or
money will change that.</p>
</blockquote>

<p>Then the biggest email from this whole saga arrives in my inbox. It begins with:</p>

<blockquote>
<p>I&#39;ll try to make this quick so that I don&#39;t continue wasting my time as well as your time..</p>
</blockquote>

<p>It&#39;s nine-hundred-and-ninety-five words long. This many words is not <em>quick</em>. </p>

<p>I told him this in a previous email:</p>

<blockquote>
<p>You most likely will not change the world. Fact</p>
</blockquote>

<p>He replied with:</p>

<blockquote>
<p>The fact that you added &quot;most likely&quot; infront of will not change the world, expresses that there might be a slight possibility of it happening, which contradicts the &quot;fact&quot; part at the end. But to answer your statement, I will be very happy one day when things do work out and that everyday when you are browsing the net, you will be faced with a constant reminder of how pessimistic and truly wrong you were, as well as receive an email from me saying &quot;I told you so&quot;... Thank you for giving me another reason to be motivated..</p>
</blockquote>

<p>I honestly believe that he wouldn&#39;t change the world with an advertising platform, so I said so. I would rather be honest with people than to support their broken dreams. For him to reply in such a passive aggressive way threw up the biggest red flag of all of this so far.</p>

<p>Then he leads with this doozy:</p>

<blockquote>
<p>Plus I think I&#39;m starting to agree with Tyler Menezes, I do think that the Ruby on Rails community is run by a bunch of arrogant narrow thinking developers who are too important to show any optimism or support for outsiders..</p>
</blockquote>

<p>Up to this point, I have been as nice as I can be to somebody who cold calls me. Which is actually <em>really</em> nice. I was being painfully honest with this guy,
and he took it as arrogance. Oh well.</p>

<p>Then he drops this other bombshell:</p>

<blockquote>
<p>Therefore I&#39;m choosing python, I&#39;ve already started to learn the basics, I think it has so much more potential in terms of quality and scaling capabilities than ror.. Plus i&#39;m finding it a lot more fun to learn (but it&#39;s still very challenging and definitely not easy, but who cares, within six months I&#39;ll be good enough to lead a team of developers, even by learning part time). </p>
</blockquote>

<p><em>HOLY SHIT</em>. This guy is going to learn Python in 6 months and then lead a team. If I were a self-respecting programmer (hint: I am) I don&#39;t want to be in a
team that&#39;s led by someone who&#39;s got only 6 months experience in my programming language. And by only learning part-time? Please.</p>

<p>He also claimed that I drink beer:</p>

<blockquote>
<p>You don&#39;t drink beer, oh ok well I didn&#39;t know that you just said false things for the fun of it, why would you make multiple references to drinking beer at railscamp if you don&#39;t drink any beer? Or do you just put out a different appearance in public then you do in private? </p>
</blockquote>

<p>Not once in our email correspondence did I ever mention drinking beer. He later brought up and said that in my RubyC talk at around 14:53 I mentioned drinking
beer, but this is not true. This whole passive aggressive tone of the email was extremely off-putting, and exactly the opposite direction of how you would go
about hiring someone.</p>

<p>He finishes off his version of the Iliad with this:</p>

<blockquote>
<p>Ps. this isn&#39;t over, within a year you can expect an email form me saying &quot;I told you so&quot;.... </p>
</blockquote>

<p>I&#39;ve actually put a reminder in my calendar for next year to remind me to go back in my inbox and find his email and ask him how it&#39;s going. I&#39;ll be genuinely
curious to see how far he&#39;s gotten with this idea.</p>

<p>I was extremely offended by his bravado and passive aggressive tone. I replied over two emails. The first was:</p>

<blockquote>
<p>I am bored of this game.
Never email me again.</p>
</blockquote>

<p>The second:</p>

<blockquote>
<p>Also, I never mentioned anything about drinking beer.
Just thought I&#39;d clear that up.</p>
</blockquote>

<p>He replies with a single line:</p>

<blockquote>
<p>I&#39;m pretty sure you did</p>
</blockquote>

<p>I am still extremely frustated at this:</p>

<blockquote>
<p>And now you&#39;ve just devolved to basic trolling. Fucking long sigh.
Seriously dude, look through the emails. Not once did I mention drinking beer.</p>
</blockquote>

<p>He replies back:</p>

<blockquote>
<p>I don&#39;t know why you&#39;re only focusing on this one beer drinking thing, that was the least important comment throughout my email...
I&#39;m not saying you mentioned beer drinking in our emails, you mentioned beer drinking during your how to be awesome at rails presentation [at RubyC]...</p>

<p>I was never trolling, I reached out to you for help and advice and the entire time your responses have been filled with criticism, dream crushing statements, profanity and just fucking plain hypocrisy. </p>
</blockquote>

<p>Not filled with criticism at all, besides the mentions that I would prefer if he used paragraph breaks and didn&#39;t cold call people. I suggested alternatives,
like Railscamps and user groups. You know, actual actionable, effective advice. My statements weren&#39;t intended at all to be &quot;dream crushing&quot;, just my
traditional honesty. The only time I used profanity was the word &quot;Fucking&quot; in my email before. I was also never a hypocrite in my emails.</p>

<p>And then a little later on he replies for the final time:</p>

<blockquote>
<p>Nah but I seriously wish you all the best,
Hopefully there aren&#39;t any lingering hard feelings.
That is that last thing I would have hoped for...</p>
</blockquote>

<p>I wish no ill feelings on this guy. The tone of his emails was exceptionally off-putting and I can&#39;t believe that people think that they can get away with
things like this. A little bit of courtesy on <em>both</em> sides of these types of discussions goes an exceptionally long way.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Engines talk</title>
   <link href="http://ryanbigg.com/2012/05/engines-talk"/>
   <updated>2012-05-19T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2012/05/engines-talk</id>
   <content type="html"><![CDATA[<p>I gave a presentation at SpreeConf and Ruby on Ales about engines.</p>

<p>I recorded it again at home last week and You can <a href="https://s3.amazonaws.com/ryanbigg_screencasts/004-engines_talk.mov">watch/download the video here</a>. It&#39;s a
little over 30 minutes long, but I think it teaches you valuable lessons about engines in Rails.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Caffeine and Sleep</title>
   <link href="http://ryanbigg.com/2012/04/caffeine-and-sleep"/>
   <updated>2012-04-27T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2012/04/caffeine-and-sleep</id>
   <content type="html"><![CDATA[<p>I used to drink a lot of Coca Cola. I think my record was 18 375ml cans of it during a LAN party once. I didn&#39;t feel so good the morning after. I used to not
brush my teeth that often as well (compared with now, which is morning &amp; night as all good dentists recommend), and as a result I have very &quot;holey&quot; teeth and even had one extracted in February. I used to drink Coca Cola because it contained caffeine which would give me a pleasant buzz.</p>

<p>Then my dentist suggested that I stop drinking drinks containing that much sugar, and so I did. I switched to Pepsi Max for a couple of years after that. Then,
one day, I stopped. I can&#39;t remember the exact reason <em>why</em> I stopped drinking it, but I did. This was back in 2009.</p>

<p>The first couple of days were interesting. I had trouble focussing for long periods of time. I never got the caffeine headaches that people talk about. But
then it got gradually better and I&#39;ve been basically caffeine-free for close to 3 years now. Then it <em>kept getting better</em>. I found myself sleeping more
solidly each night and being able to concentrate for longer and longer periods. I very rarely now have moments where I feel completely exhausted. When they do
happen, having a some sugar helps for that last little bit.</p>

<p>Then there was the change in sleeping pattern in 2010, when I started writing Rails 3 in Action. I swithced from getting up at 7:45am to getting up at 6:00am.
And I did this every day, except where I stayed out late the night before. That extra time in the morning allowed me to do some internet catch up, do some
writing, have a shower and get ready for the day and then still have more time to do even more writing. After a late night out, there&#39;s that buffer there that
I can use to catch up on sleep that I&#39;ve otherwise missed. I can also use this time for exercise, which is awesome.</p>

<p>When I get to work it&#39;s no longer just over an hour since I woke up. It&#39;s more like three hours. With me not being a morning person by nature, this is
wonderful. I come in to work and I&#39;ve already woken up fully and I can just get to doing everything.</p>

<p>Tim Riley <a href="http://icelab.com.au/articles/the-benefits-of-waking-up-early/">wrote about his experiences with getting up earlier too</a>. </p>

<blockquote>
<p>However, I&#39;ve found this new approach to be very effective. The early mornings are a good time. It is quiet. The day has just begun and my mind is clear of any distractions, so it is easy to concentrate. Because the time for work has a definite ending, it also encourages me to pick discrete and achievable goals for each morning. Rinse and repeat, and before long, I have demonstrable, consistent, incremental progress towards my goal.</p>
</blockquote>

<p><strong>So, my thing I want you to try is to go the whole month of May by changing one of these two habits. Either cut out caffeine completely from your diet, or start
getting up early in the morning. If you want the &quot;Hard Mode&quot; variety, try both. It&#39;s really improved my life and I reckon it&#39;ll do the same to yours.</strong></p>
]]></content>
 </entry>
 
 
</feed>