<?xml version="1.0" encoding="iso-8859-1"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The Life of a Radar</title>
 <link href="http://ryanbigg.com/atom.xml" rel="self"/>
 <link href="http://ryanbigg.com"/>
 <updated>2016-04-28T08:57:53+10:00</updated>
 <id>http://ryanbigg.com/</id>
 <author>
   <name>Ryan Bigg</name>
   <email>radarlistener@gmail.com</email>
 </author>

 
 <entry>
   <title>Hiring Juniors</title>
   <link href="http://ryanbigg.com/2016/04/hiring-juniors"/>
   <updated>2016-04-22T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2016/04/hiring-juniors</id>
   <content type="html"><![CDATA[<h2>The &quot;D&quot; word</h2>

<p>We have a diversity problem in the community, and that&#39;s been talked about
quite a lot when it comes to <em>tangible</em> things like gender and race. A
diversity of skill -- an <em>intangible</em> thing -- is also something we talk about
struggling with.</p>

<p>When I started out as a Rails developer, I was tinkering around with the
framework in my spare time, which I had a lot of because I was single and
working casually at Coles and doing the odd spot of PHP/Rails freelancing.</p>

<p>I heard that there was a Ruby meetup happening in Adelaide and I caught the
train into town and <em>ran</em> to the meetup because I was running very late.</p>

<p>When I got there, people asked what I did and I told them about Coles, PHP and
Rails. They said &quot;you don&#39;t need to work for Coles anymore&quot; and three people
gave me their business cards and said I should apply for a job. I applied for
a job at SeaLink and was accepted.</p>

<p>At SeaLink, I got mentored by a team of &quot;senior&quot; Rails developers who had a
whole bunch of patience for my 19-year-old antics. I am very thankful to them
for the time that they spent mentoring me, as I believe it helped provide a
foundation for a career that I&#39;ve been doing for very close to 10 years.</p>

<p>There are plenty of juniors at the Melbourne Ruby Meetup. I know because I
help run the Hack Night where a lot of them attend also. If a junior from this
meetup was to tell you that they were actively looking for a job right now,
would you hire them? Probably not. There seems to be quite an aversion to
hiring juniors, and the main aversion is that juniors take up valuable shipping
time with mentoring time instead.</p>

<p>In the early days, there was a lack of available talent and so companies had
to hire whoever they could find. That&#39;s why I found it easy to get a Rails job
back then. I think we have once again reached that point where there just
isn&#39;t any talent to hire.</p>

<p>I&#39;ve been having a lot of discussions recently in the Ruby community about why
companies seem to be shying away from hiring juniors. Instead, these companies
want to hire mid-to-senior developers and do not want to have apprentices who
are learning alongside those mid-to-senior developers. </p>

<p>Lawyers, mechanics and plenty of other professions have apprenticeships, so
why don&#39;t programmers? It&#39;s pretty strange. I think it&#39;s because those
professions have had turnover in their companies enough to learn the lesson
about training for the future. This is still a young community where most
people have been doing it for less than 15 years. We need to think long term
about this: who will look after our code when we&#39;re gone?</p>

<h2>Hiring seniors</h2>

<p>Let&#39;s look at why companies want to hire mid-seniors in the first place. At
the companies I&#39;ve worked at, we&#39;ve wanted to hire a new mid-to-senior person
because our workload has gotten to the point where it&#39;s exceeding our
capacity. I figure that this is the same at other companies too. Like where
I&#39;ve worked -- and currently work -- you&#39;ll have people breathing down
your neck asking when bugs are going to be fixed or new features are going to
be developed.</p>

<p>To address this problem, you hire a new developer or rather: you try to hire a
new developer. You want a mid-to-senior developer because they have the
skills to instantly dive straight into your application with little-to-no
guidance and they can start shipping code.</p>

<p>However: the trick is finding someone who&#39;s available at the moment. In this
current climate, it&#39;s nearly impossible to hire a mid-to-senior Ruby developer
to come work for your company. What typically happens is that developers get
aggressively poached between companies.</p>

<p>Companies spend thousands of dollars on recruiters and lots of time posting to
job boards, for often very little good return. Companies spend this money to
hunt the elusive 10x Developer Rockstar Unicorns, but the Unicorns are no
longer out grazing in the sunny meadows, readily available for capture.
They&#39;re already working somewhere else and the conditions of where they work
are extremely good.</p>

<p>We, as a community, have drained the talent pool dry. </p>

<p>We&#39;re out of freely available Rockstar Unicorns and so it&#39;s time that we started to
grow our own.</p>

<p>Companies are addicted to hiring the top 5% or 10% of developers and ignoring
the rest. There is a lot of great talent in the remaining group of developers,
just waiting to be mentored. If they got that mentorship, we would be able to
bolster our community&#39;s best and brightest. What if the next person your
company mentored went on to become your next CTO? What if they went on to be
that &quot;10x engineer&quot; who can help out anyone on the team with anything? I
really believe companies are missing out on great talent by completely
ignoring it when it is non-obvious.</p>

<p>Too many companies are focussing on the short-term goals of shipping code,
rather than the long-term growth of their teams.</p>

<p>Companies hiring the best-of-the-best -- the people with <em>proven</em> great track
records -- and getting them to build what is essentially CRUD
applications which do, at best, a fancy version of string concatenation.</p>

<p>If we speak in terms of hiring piano players: you&#39;re hiring the Chopins,
Bachs, Liszts, and getting them to play <em>Mary Had A Little Lamb</em>.</p>

<p>You do not need to hire senior developers. You need to hire developers of any
skill level, mentor them and grow them into the next great bunch of
developers. Give these people a chance and train them on real world
applications that real people are using. These could be the next great people
that your company needs and you are not giving them the opportunity.</p>

<h2>Contributing back</h2>

<p>You might be thinking: what do <em>we</em> (as a company) get out of this? I think
that&#39;s backwards. The thinking should be &quot;we have earned so much from the
community, and now it&#39;s time to give back&quot;. If you invest in the long term
health of the community, it will pay dividends. In the long run, you will have
an active talent pool of developers who will be able to maintain your
application. In the short term, you&#39;ll be bolstering your team&#39;s productivity
with fresh talent.</p>

<p>You may think that you need to hire these best-of-the-best badasses because your
application is a large unmaintable behemoth monolith and only the badasses
can understand it. That you need seniors to navigate the spaghetti that is
your legacy code. That may indeed be the case. But in every monolith, there is
a tiny bit of functionality that a non-senior developer can work on improving
along with their skills, when that non-senior is paired with a senior developer.</p>

<p>It&#39;s OK to hire non-senior developers to work on real live production code.
We&#39;ve done it at Marketplacer and we&#39;re still in business. Your company will
not go down in flames because you hire a junior.</p>

<p>Yes, it&#39;s risky. Initially the cost of the employee is greater than what they
provide for the company. But with the right fostering, they can grow into the
best asset your company has ever had.</p>

<p><a href="http://juliaclavien.tumblr.com/">Julia Claven</a> has a great graph for this:</p>

<p><img src="http://40.media.tumblr.com/19866bd84fa2fb1e0a5a3d85e516c015/tumblr_o3rr4h5L0Q1su3l4oo1_r1_1280.png" alt="Liability to asset"></p>

<p>When the junior is initially hired, their dollar value to the company is less
than the output they produce. With good mentoring, they can get the other end
of the graph where their value to the company outweighs their salary.</p>

<p>There is an initial productivity hit -- that&#39;s true -- but that plateaus out
within 6 months if you do it right. At the end of it, rather than having one
developer, you have two developers. Even if the junior is <em>half</em> as productive
as the senior, then it&#39;s still a 1.5x growth in the productivity of your team.</p>

<p>At Marketplacer we&#39;ve hired juniors within the last year that I would consider
to be very productive members of the team, <em>and</em> they&#39;re great people to work
with to boot. We would&#39;ve missed out on these people if we didn&#39;t invest the
time in hiring and mentoring them and instead focussed on only hiring seniors
who had existing Rails app development experience.</p>

<p>You might be thinking &quot;but what if they leave&quot;? That&#39;s a risk you take with
any hire of any skill level. If people are leaving your company, you should be
reflecting on why they&#39;re leaving in the first place. Was it really them, or
was it your company? Does your company have a culture that someone would want
to leave? Is your company focussed on building a culture that people want to
stay in, or are they only interested in shipping code?</p>

<h2>Finding Juniors</h2>

<p>Where can you find those juniors to start with? Well, let&#39;s start with Code
Academies. Not any particular one -- although <a href="https://www.turing.io">Turing</a>
is my favourite. Code Academies solve <em>part</em> of this lack of mentoring problem.</p>

<p>Code academies get new programmers to pay thousands of dollars to learn the
tricks of the trade. Sometimes, these new programmers even get a &quot;guarantee&quot;
from the code academy that they&#39;ll get a job at the end of the course. The
code academies teach these newbies a range of programming skills. At the end
of this, the newbie programmers have enough skills to know the basics of
things like HTML, CSS, JavaScript and Ruby and can usually find their way
around a Rails app easily enough. These people are very &quot;green&quot; and then
they&#39;re thrust out into the community to work at companies.</p>

<p>Unfortunately, due to our senior hiring addiction, we&#39;re not hiring these
fresh faces. The code academies produce great talent, and we&#39;re not picking it
up. These people are left to struggle for months at a time in developing their
skills before they can even get a look in at a company. I&#39;ve spoken to many
juniors in that position.</p>

<p>Not all of these graduates have the time to spend doing that skill
development, as they often have full time jobs or other responsibilities to
take care of. Thankfully, they get a lot of assistance from their code
academies after they&#39;ve graduated. Well, at least the <em>good</em> code academies do
that.</p>

<p>I would love to see companies breaking their addiction to seniors and more
actively hiring from these code academies. More companies need to make
mentorship / apprenticeship a part of what they do. The students that graduate
from code academies are eager to learn and are, in my experience, very highly
motivated.</p>

<p>There are definitely juniors who have that same kind of eagerness-to-learn and
motivation who have never been to a code academy. These people have learned by
themselves and by being mentored by people in the community. I can think of
<em>at least</em> 5, perhaps even 10, of these people who would make great hires in a
company&#39;s mentorship / apprenticeship program.</p>

<p>If I were in charge of hiring at Marketplacer, I would hire a motivated
junior, pay them a wage well enough to live off and mentor them.</p>

<p>Asim Aslam (@chuhnk) had a good tweet about this too:</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">When hiring remember that someone once gave you an opportunity when you didn&#39;t have the experience. Hire smart raw talent and mentor them.</p>&mdash; Asim Aslam (@chuhnk) <a href="https://twitter.com/chuhnk/status/720756690493259777">April 14, 2016</a></blockquote>

<p>There&#39;s a great book I encourage you all to read: it&#39;s called <em>The Talent
Code</em>. As the subtitle says &quot;Greatness isn&#39;t born. It&#39;s grown.&quot; The book
covers how skills of all varieties are grown in sports, music and plenty of
other areas. All the industries that are covered in the book have active
mentorship and apprenticeship programs. Yet, this is not cared about in the
programming community for reasons mentioned earlier: we&#39;re still quite a young
community.</p>

<p>I&#39;ll let you in on the secret that&#39;s in that book: for anyone to get better at
anything, they need to practice the hell out of it. How do we expect to have
seniors to hire if we&#39;re not hiring juniors and letting them improve their
skills by practicing on real world applications?</p>

<p>So many people are talking about mentoring and hiring juniors. Let&#39;s start
doing it.</p>

<h2>Mentorship</h2>

<p>Now that I&#39;ve (hopefully) convinced you to hire a junior developer, you might
be wondering what you do once you have one.</p>

<p>I help run the Melbourne Ruby Hack Night and it&#39;s a judgement-free environment
where anyone and everyone can bring along a Ruby project and work on it. Some
people are even there for the first time learning about Ruby itself, which is
great to see. These Hack Nights work because these new developers feel safe
and welcome and that no question is too &quot;dumb&quot; to ask.</p>

<p>You can start mentoring at your company by fostering that Hack Night-esque
environment. It should be OK to put up your hand and ask a question about
<em>anything</em>. If the questioner is getting eyerolls, sighs, or other passive
aggressive signals from someone else, then that&#39;s not the kind of environment
where a junior is going to learn.</p>

<p>A great way to build that kind of fostering environment is to encourage pair
programming. Pairing with juniors on small tasks initially is a great way to
build up their confidence. When I&#39;ve been mentoring juniors, the number one
thing that I find that they&#39;re lacking isn&#39;t the skill, but the confidence.
They know the answer, but they aren&#39;t sure if it&#39;s the <em>right</em> answer. They
question if they&#39;re using the right syntax or even if they should be writing
the code that particular way. When a senior pairs with a junior, they can
encourage them to try out things and learn from the things that they try. If
the junior gets it wrong, the senior can ensure them that it&#39;s OK to get
things wrong and to guide them back on track. Pairing is the quickest way to
upskill a junior and I can highly, highly recommend it.</p>

<p>I paired daily with some developers when I worked at GetUp and in a few
months time they were confident Rails developers who could find their way
easily around that Rails application. I&#39;ve done the same at other companies too
and each time I&#39;ve seen great professional growth in the juniors that I&#39;ve
mentored. One of the best feelings in the world is when a junior says
&quot;Ahhh, I understand!&quot;.</p>

<p>Pairing also helps reinforce your own knowledge. If you can&#39;t explain
something to someone clearly, then you do not understand it well enough
yourself. Pairing is helpful to the junior because they get knowledge out of
it, but it&#39;s also helpful to the senior: they learn how to share what&#39;s in
their brain with other people in a clearer fashion.</p>

<p>What should you pair with your junior on? Well, Lydia Guarino has some good
tweets about that. </p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">5) For junior devs, a good guideline for scope is something that can be completed in 2-3 days. You want to keep your feedback loop short.</p>&mdash; Lydia Guarino (@lydiaguarino) <a href="https://twitter.com/lydiaguarino/status/720090654575996928">April 13, 2016</a></blockquote>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">5) Tasks with scope of more than 3 days are tasks that are not defined well enough. Break them down further.</p>&mdash; Lydia Guarino (@lydiaguarino) <a href="https://twitter.com/lydiaguarino/status/720090891231166464">April 13, 2016</a></blockquote>

<p>I agree with both of these. Juniors thrive best when they&#39;re given quick wins.
You want that nice tight feedback loop to keep their confidence growing. Every
time they &quot;win&quot; at code, their confidence gets that little bit more boosted.</p>

<p>Once they&#39;ve built up a bit of confidence, you can let them go solo on a task.
There isn&#39;t a set timeframe for when this happens; it&#39;s all about how
confident the junior is with their own abilities. </p>

<p>Let them loose on something small and make it clear that they can ask any
questions about what they&#39;re doing and that there is no wrong way of doing it.
Once they&#39;re done, get them to submit their work in a pull request -- you
might have to teach them what one is first -- and then sit together and review
it.</p>

<p>Sitting together is important here because &quot;why are you doing this?&quot; written
in text has no emotion, compared to it spoken with body language. Juniors may
interpret a &quot;why are you doing this?&quot; comment as aggressive like &quot;UGH! Why are
you doing this?&quot;. </p>

<p>Focussing on in-person communication helps establish a rapport between the
developers much better than text-based communication ever will.</p>

<p>If a junior has made a mistake in the pull request then you can discuss it
with them and correct the mistake. This way, that mistake will never make it
to a live production environment.</p>

<p>Code review also allows the senior to assess how well the junior
has been doing on the tasks they&#39;ve been given. If they&#39;re doing well on a
2-day task, then it&#39;s probably going to be OK to give them a 4-day task too.
If not, then some more mentoring may be required.</p>

<p>Ultimately, your mentorship should be about making the junior feel welcome and
safe within your team. In fact, this should be what&#39;s happening with
<em>everyone</em> in your team. Google ran a project that they called &quot;Project
Aristotle&quot;, wherein <a href="https://rework.withgoogle.com/blog/five-keys-to-a-successful-google-team/">they attempted to find how to build effective teams</a>. They interviewed hundreds of their own employees and they came up with 5 things:</p>

<p><img src="https://lh3.googleusercontent.com/eQ_WsRq5-q-m_41eEI6GLEObqpxBYJd1pm96gIa-eRSn-QXlPjwO5K6O-DHU8sxny3ChnIQE0mjpnXaaW7QAhQ=s0" alt="Google&#39;s 5 key dynamics for effective teams"></p>

<p>The #1 item on this list is &quot;Psychological safety&quot;: &quot;Team members feel safe to take risks and be vulnerable in front of each other.&quot;</p>

<p>Google is not special. They&#39;re made up of people just like your company is
made up of people. You should keep this in mind when mentoring your juniors,
and working with other people in your team.</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
]]></content>
 </entry>
 
 <entry>
   <title>Working with date ranges in Active Record</title>
   <link href="http://ryanbigg.com/2016/03/working-with-date-ranges-in-active-record"/>
   <updated>2016-03-09T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2016/03/working-with-date-ranges-in-active-record</id>
   <content type="html"><![CDATA[<p><strong>TL;DR: <a href="https://github.com/radar/by_star">Use the by_star gem and save yourself a lot of hassle</a>.</strong></p>

<p>When you&#39;re trying to get records for a particular date range in Active Record, for example from the beginning of the month to the end of the month, you may be tempted to write code like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">beginning_of_month</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">beginning_of_month</span>
<span class="n">end_of_month</span> <span class="o">=</span> <span class="n">beginning_of_month</span><span class="o">.</span><span class="n">end_of_month</span>
<span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">created_at</span><span class="p">:</span> <span class="n">beginning_of_month</span><span class="o">.</span><span class="n">.end_of_month</span><span class="p">)</span>
</code></pre></div>
<p>Let&#39;s say that the month is March 2016 (and it is, at the time of writing). This query will get you all posts between the 1st of March and the 31st of March, but not in the way you expect it. It will get you all posts between 00:00:00 of the 1st of March and 00:00:00 of 31st of March, which is probably not what you want, as it misses the last days posts completely. </p>

<p>What you&#39;ll want is all the posts between 00:00:00 of the 1st of March and 23:59:59.99999 of the 31st of March.</p>

<p>To do this, you <em>could</em> use <code>Time.current</code> instead:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">beginning_of_month</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">beginning_of_month</span>
<span class="n">end_of_month</span> <span class="o">=</span> <span class="n">beginning_of_month</span><span class="o">.</span><span class="n">end_of_month</span>
<span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">created_at</span><span class="p">:</span> <span class="n">beginning_of_month</span><span class="o">.</span><span class="n">.end_of_month</span><span class="p">)</span>
</code></pre></div>
<p>This will give you the right set of posts, because <code>Time.current.end_of_month</code> is something like <code>Thu, 31 Mar 2016 23:59:59 UTC +00:00</code> (or it might even be in your local time zone, like `Thu, 31 Mar 2016 23:59:59 AEDT +11:00).</p>

<p>Or you could even do this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">beginning_of_month</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">beginning_of_month</span>
<span class="n">beginning_of_next_month</span> <span class="o">=</span> <span class="n">beginning_of_month</span><span class="o">.</span><span class="n">next_month</span>
<span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">created_at</span><span class="p">:</span> <span class="n">beginning_of_month</span><span class="o">.</span><span class="n">.beginning_of_next_month</span><span class="p">)</span>
</code></pre></div>
<p>This will also give you the right set of posts, because <code>beginning_of_month.next_month</code> is something like <code>Fri, 1 Apr 2016 00:00:00 UTC +00:00</code> (or it might even be in your local time zone, like `Thu, 31 Mar 2016 23:59:59 AEDT +11:00).</p>

<p>Or you could use <a href="https://github.com/radar/by_star">the <code>by_star</code> gem</a>. I wrote this gem to easily query date /
time ranges in Active Record and it has saved me a lot of frustration. The above code examples would then become:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Post</span><span class="o">.</span><span class="n">by_month</span><span class="p">(</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span>
</code></pre></div>
<p>This will retrieve all posts by the current month, and that means all the posts between 00:00:00 of the 1st of March and 23:59:59.99999 of the 31st of March will be returned if I ran this query today.</p>

<h2>Conclusion</h2>

<p><a href="https://github.com/radar/by_star">Use the by_star gem and save yourself a lot of hassle</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Truncating indexes in Elasticsearch 2</title>
   <link href="http://ryanbigg.com/2016/02/truncating-indexes-in-elasticsearch-2"/>
   <updated>2016-02-22T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2016/02/truncating-indexes-in-elasticsearch-2</id>
   <content type="html"><![CDATA[<p>In pre-2.0 versions of elasticsearch, you may have been truncating indexes using <code>delete_by_query</code>. This has been moved in Elasticsearch 2.0 out to a plugin, which can be installed with:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">bin/plugin install delete-by-query
</code></pre></div>
<p>Where <code>bin/plugin</code> is located wherever you installed Elasticsearch. On my Mac,
that path is <code>/usr/local/Cellar/elasticsearch/2.2.0_1/libexec</code> because I
installed Elasticsearch with Homebrew. If you&#39;re on Ubuntu and you installed
it from Elasticsearch&#39;s own package repo, it will be at
<code>/usr/share/elasticsearch</code>.</p>

<p>I&#39;m using the Elasticsearch Ruby gem to interact with my Elasticsearch instance, and this is the code I&#39;m using to truncate the indexes:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Index</span>
  <span class="k">class</span> <span class="nc">Indexers</span>
    <span class="k">def</span> <span class="nf">truncate_indexes</span>
      <span class="n">client</span> <span class="o">=</span> <span class="no">Elasticsearch</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
      <span class="n">client</span><span class="o">.</span><span class="n">delete_by_query</span><span class="p">(</span><span class="ss">index</span><span class="p">:</span> <span class="n">index_names</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="p">{</span> <span class="ss">query</span><span class="p">:</span> <span class="p">{</span> <span class="ss">match_all</span><span class="p">:</span> <span class="p">{}</span> <span class="p">}</span> <span class="p">})</span>
      <span class="n">client</span><span class="o">.</span><span class="n">indices</span><span class="o">.</span><span class="n">flush</span><span class="p">(</span><span class="ss">index</span><span class="p">:</span> <span class="n">index_names</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This method is called after each spec has finished running. The <code>index_names</code>
is just a list of indexes that the <code>Index::Indexers</code> class knows about. The
<code>delete_by_query</code> functionality is available here from the <code>delete-by-query</code>
plugin that was installed. The <code>indices.flush</code> call is necessary because the
next query may return data that the <code>delete_by_query</code> request was supposed to
delete. The <code>flush</code> call clears the transaction log and memory and writes data
to disk, ensuring that the next query won&#39;t return data that was deleted.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Programming Phoenix Review</title>
   <link href="http://ryanbigg.com/2015/12/programming-phoenix"/>
   <updated>2015-12-24T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2015/12/programming-phoenix</id>
   <content type="html"><![CDATA[<p>During this Christmas break I&#39;ve been taking some time off from writing Multitenancy with Rails -- which I&#39;ll get back to <em>after</em> Christmas is over -- and instead of writing books I&#39;m reading them.</p>

<p><a href="https://pragprog.com/titles/phoenix/">Programming Phoenix</a> is the only book that I&#39;ve been reading so far. I&#39;ve now read through the whole thing. Despite that I&#39;ve filed over 40 errata on the book (hey, it is a beta book) I <em>mostly</em> enjoyed the book.</p>

<hr>

<p>Programming Phoenix takes you through building a complete Phoenix application, introducing familiar concepts like controllers, models and templates. Those parts are familiar because they&#39;re much the same in Phoenix as they are in Rails; with some differences. Models have changesets. Templates relate to Views. Unlike Rails&#39; &quot;magical&quot; callbacks (in both models and controllers), these are just simply defined and used functions in Phoenix.</p>

<p>The latter chapters cover a range of things, like adding in live &quot;annotations&quot; to a video as its being watched. Think of that kind of like a live chatroom, except as the video plays, the annotations from previous watches also appear. This is done using Websockets, which are supported in Rails now with ActionCable, but it just <em>feels</em> a lot less hacky with Phoenix than it does with Rails. Elixir handles it better, <a href="http://www.phoenixframework.org/blog/the-road-to-2-million-websocket-connections">reaching two million connections recently</a> to a single (albeit quite beefy) server. I can&#39;t myself think of something to use Websockets for, but it is still exciting nevertheless.</p>

<p>The final two chapters, &quot;OTP&quot; (Open Telecom Platform) and &quot;Observer and Umbrellas&quot; cover some of the real strengths of Elixir and its underlying foundation of Erlang. These two chapters get you to build a system which connects to Wolfram Alpha&#39;s API, and then demonstrate how to keep this new system separate from the original application, while still being able to connect these two systems together and communicate between them. In the Ruby world, typically this would be done with HTTP calls, but in the Elixir world it is just a matter of communicating across Elixir processes. This inter-process communication is quite quick in comparison to HTTP because it doesn&#39;t have that overhead.</p>

<p>What I loved from these final chapters was seeing Elixir&#39;s supervision capabilities in action. In one of those latter chapters, you create a small application (<code>Rumbl.Counter</code>) which dies after a couple of seconds. A Supervisor for the main application (<code>Rumbl</code>) restarts this smaller application automatically when it dies. Ruby doesn&#39;t have that kind of capability; instead you need to rely on tools like upstart. It&#39;s quite nice having it built into the language because then you don&#39;t have to learn something completely different to ensure your servers don&#39;t fall over.</p>

<hr>

<p>The book is written by Jos&eacute; &quot;The Elixir Guy&quot; Valim, Chris &quot;The Phoenix Guy&quot; McCord and Bruce &quot;The <a href="https://pragprog.com/book/btlang/seven-languages-in-seven-weeks">Seven Languages</a> Guy&quot; Tate. It&#39;s great to see that it&#39;s the core developers who are invested in writing documentation for the community. Unlike a certain other community who has a main core developer who tells contributors to go fuck themselves when they ask for documentation regarding new features. Further to that point, both Jos&eacute; and Chris are extremely active on the #elixir-lang channel on Freenode, which is also great to see.</p>

<p>I am not sure if it is because the book has three authors, but there are some parts where I&#39;m reading it and enjoying it. Then there are sections like &quot;Anatomy of a Plug&quot; which goes <em>way too deep</em> into what a Plug is and how it works, and &quot;Exploring Ecto in the Console&quot; which, again, goes rather deep but doesn&#39;t tie that content <em>solidly</em> back to what we&#39;re doing in the book at that present moment. It&#39;d be like a fiction book <em>intricately</em> explaining what&#39;s in the house of the neighbour of the protagonist, but then the neighbour is not mentioned any more past that. </p>

<p>Like, why does it even matter that Ecto supports &quot;search functions like <code>ilike</code> and <code>like</code>&quot; or that Plug has <code>path_info</code> and <code>scheme</code> fields? Neither of those are relevant to the content at-hand at that point of time, and it feels disconnected. Those things should be mentioned in their respective guides, not in this book. Perhaps those sections will mysteriously disappear once this book reaches the production editing phase. </p>

<p>It feels like it would be better off showing what a Plug is within the context of the application... and they do that later on. Then after that go into the detail. But I could do without the pages and pages of extra seemingly &quot;useless&quot; info <em>before</em> I get hooked on what you&#39;re trying to sell.</p>

<p>In addition to that, there are some places where the content feels like it&#39;s saying &quot;we&#39;re going to do this now because I said we&#39;re going to do it&quot;; particularly in Chapter 5, the Authentication chapter. The chapter jumps to creating a registration changeset with no reason why it needs to be created, then later on explains why it has to be created. The explanation needs work there.</p>

<p>This is where the TDD/BDD of Rails 4 in Action holds up. In that book, it&#39;s more like &quot;we&#39;re going to do this because the test says we need to do it&quot;. Programming Phoenix saves that kind of testing for Chapter 8, with the given reason being that having testing throughout every chapter can be distracting and repetitive. While I can see the point there -- there was vigorous nodding over here reading Chapter 8&#39;s intro -- that very same testing can be helpful for demonstrating industry best-practices to newbies. Otherwise what you&#39;ll get is a bunch of newbies who read the first 7 chapters and think that writing code without tests is How It Is Done(tm). </p>

<p>Having tests also helps show off the usefulness of regression testing too. A thing broke and now we&#39;re going to write a test for a fix, watch the test go red, fix the thing, and watch the test go green. I think that kind of thing is helpful to newbies to have, as they&#39;re the most likely to make mistakes within their application.</p>

<p>Despite these complaints, the book has been worthwhile reading. I am mainly nitpicking, because I&#39;m an author of another programming book and I have moments where I think that I could write parts better. That has yet to be proven.</p>

<p>The parallels between Rails and Phoenix are helping with the learning of the new framework, and the differences between them are not too mind-bending to be beyond comprehension. The first 8 chapters cover topics that should be familiar to any Rails developer: starting a new project, adding in models and controllers. Adding validations to the model with changesets -- which are a <em>very</em> cool feature that I wouldn&#39;t be surprised if Active Record 6.0 picked up. </p>

<p>The remaining 4 chapters of the book venture off into territory that is probably unexplored by most Rails developers. I know that I personally have never spent time using Websockets or having to do anything like inter-process communication in Ruby. These last four chapters were a breath of fresh air for my skills. I feel like I really learned something valuable in those chapters.</p>

<p>Overall, Programming Phoenix is a fantastic book that will become even better once the authors spend more time on it and the editors do their bit. I really recommend reading this book, but with a small caveat: read <a href="https://pragprog.com/book/elixir/programming-elixir">Programming Elixir</a> first to get familiar with the underlying language of the Phoenix framework. Then it&#39;ll be smooth sailing for you.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Open source work</title>
   <link href="http://ryanbigg.com/2015/11/open-source-work"/>
   <updated>2015-11-16T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2015/11/open-source-work</id>
   <content type="html"><![CDATA[<p>As of today I am quitting all maintenance roles / responsibilities of any open source project I am involved in. I am now looking for maintainers for any of those projects. Volunteers can contact me@ryanbigg.com to discuss handovers.</p>

<p>I work full-time, a full 40 hours a week. Outside of that work, I am writing <a href="https://leanpub.com/multi-tenancy-rails-2">Multitenancy with Rails, 2nd Edition</a>. That work gets done primarily on my way into and out of the office, a 30 minute train journey one-way. I also spend the occasional weekend day doing some writing.</p>

<p>Outside of this full-time work, I have lots of &quot;life stuff&quot; that I&#39;d like to do. Things like spending time with my wife, going outside or just generally relaxing. Having open source emails sitting in my inbox during those times makes me feel guilty for doing those things instead of working on open source.</p>

<p>I do not have the time or energy to invest in open source any more. I am not being paid at all to do any open source work, and so the work that I do there is time that I could be spending doing &quot;life stuff&quot;, or writing. It is not fair to expect me to do <em>even more work</em> outside of my regular work, and then not get fairly compensated (time or money) for it. It&#39;s also a great recipe for burnout and making me just generally grumpy. To have an open source email sit in the inbox for days or weeks at a time just leads me to feeling more guilty about not having found time + energy to get to it yet.</p>

<p>It&#39;s for this reason that I&#39;ve decided to end all my engagements with open source effective today. I will not be responding to any comments, issues or pull requests that get filed on any repository that I am in charge of. The only thing I will be responding to (in this regard) is volunteers who want to take over the maintenance of the projects.</p>

<p>Thank you for respecting my decision.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Active Record, change_column and scales</title>
   <link href="http://ryanbigg.com/2015/11/active-record-change_column-and-scales"/>
   <updated>2015-11-10T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2015/11/active-record-change_column-and-scales</id>
   <content type="html"><![CDATA[<p>I discovered a fun quirk of Active Record today. I&#39;m not sure if it&#39;s a bug or if it&#39;s just me doing something silly, but in these kinds of cases I&#39;ve learned to lean more towards the latter. Here&#39;s how it&#39;s done.</p>

<p>Start with a fresh Rails app, using MySQL:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rails new shop -d mysql
</code></pre></div>
<p>Create a new <code>Variant</code> model:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rails g model variant price:decimal
</code></pre></div>
<p>We just so happen to know that we need to specify a precision (numbers before the decimal) and scale (numbers after the decimal) for this column, and we (read: I) can never remember the syntax for that in the <code>generate</code> command, so we edit the migration to provide both a <code>precision</code> and <code>scale</code> for this column, turning it into this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CreateVariants</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:variants</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">decimal</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">precision</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">scale</span><span class="p">:</span> <span class="mi">2</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Running this migration with <code>rake db:migrate</code> will generate a <code>db/schema.rb</code> which looks like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="ss">version</span><span class="p">:</span> <span class="mi">20151110060233</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">create_table</span> <span class="s2">&quot;variants&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="ss">:cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="o">.</span><span class="n">decimal</span>  <span class="s2">&quot;price&quot;</span><span class="p">,</span>      <span class="ss">precision</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">scale</span><span class="p">:</span> <span class="mi">2</span>
    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;created_at&quot;</span><span class="p">,</span>                          <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;updated_at&quot;</span><span class="p">,</span>                          <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>A <code>show columns from variants;</code> MySQL query will show this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">+------------+---------------+------+-----+---------+----------------+
| Field      | Type          | Null | Key | Default | Extra          |
+------------+---------------+------+-----+---------+----------------+
| id         | int(11)       | NO   | PRI | NULL    | auto_increment |
| price      | decimal(10,2) | YES  |     | NULL    |                |
| created_at | datetime      | NO   |     | NULL    |                |
| updated_at | datetime      | NO   |     | NULL    |                |
+------------+---------------+------+-----+---------+----------------+
</code></pre></div>
<p>Note here that the <code>price</code> field has a <code>precision</code> of 10 and <code>scale</code> of 2; that&#39;s indicated by <code>decimal(10,2)</code>. That&#39;s good, because that&#39;s what we specified inside our migration.</p>

<p>Let&#39;s stop here and create three variants in our console:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rails console
Variant.create(price: 18.49)
Variant.create(price: 26.99)
Variant.create(price: null)
</code></pre></div>
<p>These are just for demonstration purposes. No real data was harmed in the writing of this blog post.</p>

<p>The <code>price</code> column here doesn&#39;t have a default value and it allows for null values. There&#39;s data in here already which has <code>null</code> and that just won&#39;t do, because we want prices to always be a decimal number to make it easy to manage in our code. Having to do <code>to_f</code> to convert <code>nil</code> to <code>0.0</code> is not that smart. We&#39;re better than that!</p>

<p>So we&#39;ll go ahead and create a new migration to do the the <code>default</code> and <code>null</code> modifications to this <code>price</code> column:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rails g migration add_default_to_variants_price
</code></pre></div>
<p>Inside that migration, we write this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">AddDefaultToVariantsPrice</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="no">Variant</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">price</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="s2">&quot;price = 0&quot;</span><span class="p">)</span>
    <span class="n">change_column</span> <span class="ss">:variants</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:decimal</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Pretty simple stuff. We change all the variants where the price is <code>nil</code> (<code>null</code>) to have a price set to <code>0</code>. Then we set the <code>default</code> to be <code>0.0</code> and also tell it that we don&#39;t want <code>null</code> values in this column. If we didn&#39;t do the <code>update_all</code> call first, AR would bomb out because we tried to set <code>null: false</code> on a column which already had nulls.</p>

<p>We then run this migration (<code>rake db:migrate</code>), and this is where things go bad.</p>

<p>To start with, let&#39;s open <code>rails console</code> and run <code>Variant.first</code>. This is the variant that has a price set to <code>26.99</code>. Well, it&#39;s not that any more:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#&lt;Variant id: 1, price: 27,
</code></pre></div>
<p>Yes, it&#39;s now 27.</p>

<p>What happened? Let&#39;s look at our <code>schema.rb</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="ss">version</span><span class="p">:</span> <span class="mi">20151110061535</span><span class="p">)</span> <span class="k">do</span>

  <span class="n">create_table</span> <span class="s2">&quot;variants&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="ss">:cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="o">.</span><span class="n">decimal</span>  <span class="s2">&quot;price&quot;</span><span class="p">,</span>      <span class="ss">precision</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;created_at&quot;</span><span class="p">,</span>                            <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;updated_at&quot;</span><span class="p">,</span>                            <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div>
<p>Ok, that says it&#39;s got a <code>precision: 10</code>, but where&#39;s the scale from the first migration gone? It&#39;s gone away.</p>

<p>Let&#39;s confirm this in MySQL too:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mysql&gt; SHOW COLUMNS from variants;
+------------+---------------+------+-----+---------+----------------+
| Field      | Type          | Null | Key | Default | Extra          |
+------------+---------------+------+-----+---------+----------------+
| id         | int(11)       | NO   | PRI | NULL    | auto_increment |
| price      | decimal(10,0) | NO   |     | 0       |                |
| created_at | datetime      | NO   |     | NULL    |                |
| updated_at | datetime      | NO   |     | NULL    |                |
+------------+---------------+------+-----+---------+----------------+
</code></pre></div>
<p>The precision has stayed at 10, but the scale has changed to 0.</p>

<p>But why does this happen?</p>

<p>Because in the second migration, we didn&#39;t specify a precision and a scale.</p>

<p>Instead of this line:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">change_column</span> <span class="ss">:variants</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:decimal</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</code></pre></div>
<p>We should have:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">change_column</span> <span class="ss">:variants</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:decimal</span><span class="p">,</span> <span class="ss">precision</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">scale</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</code></pre></div>
<p>Otherwise, it defaults to a precision of 10 and scale of 0 <em>and</em> helpfully rounds up your prices for you.</p>

<p>Isn&#39;t that handy?</p>
]]></content>
 </entry>
 
 <entry>
   <title>My self-publishing success story</title>
   <link href="http://ryanbigg.com/2015/08/my-self-publishing-success-story"/>
   <updated>2015-08-06T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2015/08/my-self-publishing-success-story</id>
   <content type="html"><![CDATA[<p>Everyone loves a good success story. Here&#39;s mine. I&#39;ll cover my experience
going through a traditional publisher with Rails 3 in Action and have that
fail, and then discovering joy and happiness through the path of self-
publishing my own books through Leanpub.</p>

<h3><a name='rails-3-in-action'></a><a href='#rails-3-in-action'>Rails 3 in Action</a></h3>

<p>I was approached in 2010 to write a book called <a href="https://manning.com/katz">Rails 3 in
Action</a>. I was so very excited to join that project
and write a book. Excited because up until that point, the longest thing that
I had written was a few of the Rails guides and my own blog posts. A book
would be an excellent way to share my knowledge about Rails with the worldwide
Rails community. So I signed up.</p>

<p>Then it didn&#39;t go so well. I wrote about that in a couple of other blog posts, mainly <a href="http://ryanbigg.com/2011/11/don-t-print-hard-copies">&quot;Don&#39;t Print Hard Copies&quot;</a>, <a href="http://ryanbigg.com/2010/12/the-writing-process">&quot;The Writing Process&quot;</a> and <a href="http://ryanbigg.com/2012/11/no-more-writing-for-manning/">&quot;No more writing for Manning&quot;</a>. The long and short of it is that I found Manning incredibly hard to work with due to their tooling and my tendency to want to control everything from how the book looks to when I push updates to its content.</p>

<p>So I quit that project because it was causing me a lot of stress to have to
deal with the tooling and to not be in control of things.</p>

<p>Then I rejoined it again in November last year because Steve Klabnik burned
out from the tooling and writing process, and also because I wanted to not
have Steve&#39;s work go to waste. I brought on Rebecca Skinner as a co-author at
that time too. We set about updating the content for Rails 4.2.</p>

<p>Then I quit again in April of this year due to the same reasons I quit the
first time and let Rebecca finish off the book. It&#39;s currently going through
proofing through Manning&#39;s processes. And by &quot;currently&quot; I mean it&#39;s been in
there since April. 3 months to proof and print a book seems a bit long in my
opinion, but what can you do about it?</p>

<h3><a name='multitenancy-with-rails'></a><a href='#multitenancy-with-rails'>Multitenancy with Rails</a></h3>

<p>After I quit Rails 3 in Action I was burned out quite heavily. I took time off
from writing and at the end of 2011 I moved from Sydney to Melbourne. Then when I got to Melbourne,
I had the itch to write something again: <a href="https://leanpub.com/multi-tenancy-rails">a book about building a multitenanted Rails application</a>. I talked with my friends Phil Arndt, Josh Adams and Rob Yurkowski about this project, and somehow <a href="https://leanpub.com">Leanpub</a> came up.</p>

<p>Leanpub lets you write books in Markdown and upload that Markdown to a Dropbox
folder. To push new updates, you go into your account&#39;s dashboard and hit the
&quot;Publish&quot; button. This was a welcome change from writing in XML and uploading
books to an SVN server and then using a website built in the late-90s or early
&#39;00s!</p>

<p>(Alternatively, you can generate your own files and upload them to Leanpub too if you don&#39;t want to write in Markdown. This is what I&#39;ve been doing for <a href="https://leanpub.com/ddr">Deep Dive Rails</a> and it&#39;s working wonders. More on that in probably a different blog post.)</p>

<p>The switch to Leanpub was... it was life-changing. Publishing a book didn&#39;t
have to be hard! I could just push a button whenever I felt like it and the
readers could be reading what I wrote in a matter of minutes. Leanpub made
everything so much easier compared with Manning.</p>

<p>I wrote Multitenancy with Rails over about a year and all the while during
that time, something interesting was happening: people were buying the book
and I was getting money for it each month. I originally sold the book for $10
and then raised the price $5 for every chapter that I completed. This way, it
gave people the incentive to get on board (Rails pun!) with reading the book
before it was complete.</p>

<p>This had two awesome effects:</p>

<ol>
<li>I would get money each month as more people bought it.</li>
<li>I would get feedback on the early drafts from readers.</li>
</ol>

<h3><a name='royalties'></a><a href='#royalties'>Royalties</a></h3>

<p>Here&#39;s the royalties chart for all of my income from Leanpub since Feb 2012 to the current day.</p>

<p><img src="/images/success-story/leanpub-royalties.png" alt="Leanpub Royalties"></p>

<p>Contrast it with the royalties I get from Manning from June 2010 to the current day:</p>

<p><img src="/images/success-story/manning-royalties.png" alt="Manning Royalties"></p>

<p>To be fair, the dry-spell since January 2012 is partly because Manning
overpaid my royalties by $3.8k. Just a small clerical error, I&#39;m sure. But
since then, Rails 4 in Action has been earning money I haven&#39;t seen anything
for our work on it.</p>

<p>The monthly income is a great motivator to the writing process because it&#39;s a
monthly reminder that people think it&#39;s worthwhile buying and (probably)
reading the books that I publish on Leanpub.</p>

<p>Secondly, the royalty split between Leanpub is much nicer: they take a 10%
slice of the royalties, + 50 cents. This means that when I sell a book for
$20, I make $17.50 from that, and Leanpub makes $2.50. Roughly 35% of that
$17.50 ($6.125) goes to tax, but the rest ($11.35) is mine to keep. I <em>might</em>
get some of that tax back in the form of a tax return, but it&#39;s not something that I expect.</p>

<p>Here&#39;s a pie chart:</p>

<p><img src="/images/success-story/leanpub-royalty-split.png" alt="Leanpub Royalties split"></p>

<p>For Manning, it&#39;s harder to break this down because the royalty rates vary
between 12.5% for print books, and 50% for ebooks. I get a royalty statement
from Manning every quarter for Rails 3 in Action which has the numbers so I
can attempt to break it down. I don&#39;t yet get a royalty statement for Rails 4
in Action because it has not been published.</p>

<p>Rails 3 in Action has sold 2,003 print books and 2,371 ebooks. I had expected
these numbers to be more skewed towards ebooks, but there you go. The price
has been the same forever: $50 for the print book with a free ebook (counted
as a print book sale) or $40 for just the ebook. So with those numbers in
mind, the total made for Rails 3 in Action over all time has been $100,150 for
the print books and $94,480 for the ebooks, which is a grand total of $194,630.</p>

<p>Using the royalty split above, we can work that out that the authors get 12.5%
of $100,150, which is $12,518.75 for print books and 50% of $94,480 which is
$47,240. A grand total of $59,758.75.</p>

<p>The rest of the money, 87.5% of $100,150 ($87,631.25) and 50% of $94,480
($47,240) goes to Manning. A grand total of $134,871.25.</p>

<p>Using those figures, I can generate a pie chart similar to the Leanpub one above:</p>

<p><img src="/images/success-story/manning-royalty-split.png" alt="Manning Royalties split"></p>

<p>(Tax isn&#39;t shown on this chart because the &quot;Authors&quot; royalties are split
between Yehuda and myself and we pay different tax rates. While I know my tax
rate, I don&#39;t know Yehuda&#39;s!)</p>

<p>Manning receives over two-thirds of the money earned for Rails 3 in Action and
will earn the same split for Rails 4 in Action. This is a personal sore point
for me, because I&#39;m a greedy bastard and for plenty of other reasons. For
instance, it makes sense that the royalties earned for a print book are low,
because producing print books takes effort, time and money. So that&#39;s logical.
But a 50/50 cut for ebooks seems a bit, well, unbalanced.</p>

<p>Clearly though, publishing my books through Leanpub is the better option if
what I&#39;m optimising for is money. Leanpub gets 10% + 50c of whatever book I
sell. Manning gets between 50-87.5%, which is almost 4-7 times as much as
Leanpub.</p>

<p>However, I don&#39;t optimise for money. If your intention is to write a book for
the sole purpose of earning extra dollar dollar bills, then I have some advice
for you: you&#39;re damn crazy and you shouldn&#39;t write it because the probability
of you earning enough money to be happy is extremely low. Books don&#39;t earn
even close to a sustainable level of income.</p>

<p>What I optimise for is (selfishly) my own happiness first, then reader
happiness a very close second. My reasoning for that is that if I don&#39;t enjoy
writing a book, then the book won&#39;t be very fun to read. My own happiness
comes first to make sure that a good book comes out at the end.</p>

<p>That&#39;s a nice segue into our next topic: writing tools and feedback cycles.</p>

<h3><a name='writing-tools'></a><a href='#writing-tools'>Writing tools and feedback cycles</a></h3>

<p>I want to talk about two things here: feedback cycles and writing tools.</p>

<h4>Feedback cycles</h4>

<p>When publishing a book, you kinda want to know immediately if anyone&#39;s reading
it. Peoeple <em>buying</em> the book is different to people <em>reading</em> the book. A
good indicator for this is the feedback that comes through in the form of,
mostly, errata reporting. Errata reporting means that people found errors in
the book, and that means that they read the book! That&#39;s great!</p>

<p>Fixing those errata reports quickly is essential to producing a high-quality
book. The faster you can kick out a new edition of the book and solve the
error, the sooner it&#39;ll be that nobody will ever come across <em>that</em> particular
error again.</p>

<p>With Manning, the process was this:</p>

<ol>
<li>Find mistake in book and fix it.</li>
<li>Commit the fix to SVN.</li>
<li>Get rejected for the commit because some other author has pushed their book to SVN since the last time you did.</li>
<li>Checkout from SVN.</li>
<li>Commit the fix to SVN for real.</li>
<li>Go to Manning&#39;s author-only site and login.</li>
<li>Find your book in the list of books.</li>
<li>Click the gear icon.</li>
<li>Find the chapter that you updated.</li>
<li>Scroll down the list of revisions for that chapter.</li>
<li>Click the radio button to select &quot;Latest&quot; (which uses the latest version of that chapter) and then click &quot;Update&quot;. This flags this particular revision to be ready for Manning&#39;s system. </li>
<li>Wait for someone from Manning to publish a new MEAP copy, which can take weeks.</li>
</ol>

<p>12 steps and it takes a couple of weeks (usually) until the book is updated. Oh, and at step #11 you might be told that somewhere in your 2,000+ line XML file, something is invalid.</p>

<p>With Leanpub, the process is this:</p>

<ol>
<li>Find mistake in book and fix it.</li>
<li>Commit change to GitHub.</li>
<li>Copy file to Dropbox folder. (can be optional if you get Leanpub to read from GitHub!)</li>
<li>Go to Leanpub&#39;s author-only area for the book.</li>
<li>Click &quot;Publish&quot;, &quot;Publish New Version&quot;</li>
<li>Hit the big blue button &quot;Publish new version&quot;.</li>
</ol>

<p>6 steps and the book is available instantly for readers! Markdown doesn&#39;t fail
to compile when it&#39;s invalid, it just looks weird and the weirdness is generally quite obvious (everything is plus-sized after a certain point, for instance) and so it&#39;s easy enough to fix.</p>

<p>During the publishing process you can enter release notes as well. On Leanpub,
the choice to release a new version of a book is in the hands of the author,
and not the publishing company. This is the way it should be: the author
typically has one book on the go, whereas a publishing company has many. This
6-step process is the kind of process I could only dream about when writing
Rails 3 in Action.</p>

<p>For readers to send feedback to a Manning book they have to submit new topics
to a forum. This makes it really hard to track which topics have been
addressed and which haven&#39;t. For the update of Rails 4 in Action, we created a
repository on GitHub at
<a href="https://github.com/rubysherpas/r4ia">rubysherpas/r4ia</a> and asked readers to
file issues there. That way, when we fixed an issue on the book properly, we
could close it with a simple commit message like &quot;Fixes rubysherpas/r4ia#10&quot;.</p>

<p>If I was collaborating on a book again, I would definitely go down the GitHub
repo-for-errata path again because it makes that aspect of the writing process
so much simpler.</p>

<p>For Multitenancy with Rails, I&#39;ve gone with more of a personal approach: I&#39;ve
included my email in the foreword to the book and asked if people encounter
errors that they email me directly. This system works really well as I use the
unarchived emails as an indication of what book bugs haven&#39;t been fixed yet.</p>

<p>TODO: mention Twist here too</p>

<h4>Picking a tool to write a book in</h4>

<ul>
<li>Discuss Word, Docbook, Markdown and AsciiDoc here.</li>
</ul>

<h3>Conclusion</h3>

<p>I wrote this post to answer questions that I get from people who ask what the
writing process was like. The two main things that I tell people that bugged
me about writing for a publisher were the writing tools and the royalty split.</p>

<p>Bad writing tools definitely hampered my ability to write, especially when I
spent a lot of my time fighting SVN to accept my files, or tracking down where
the XML files were invalid. Using Markdown, GitHub, and Leanpub&#39;s Dropbox
integration is one of the winning combinations for writing a book, and it&#39;s
what I use for <a href="https://leanpub.com/multi-tenancy-rails">Multitenancy with Rails</a>.</p>

<p>I use Asciidoc and GitHub for writing <a href="https://leanpub.com/ddr">Deep Dive Rails</a>. It took a little while to learn how the <code>asciidoctor</code> gem worked and then a little more time to figure out the PDF configuration, but it&#39;s looking really great now and I can tweak it very easily. I have control of what my book looks like! As an author, that&#39;s a pretty exciting thing because a book is a personal thing.</p>

<p>Yeah, I&#39;ve spent a lot of time messing around with the <code>asciidoctor</code> gem but
it&#39;s been way more fun than bashing my head against SVN or XML. It&#39;s way more
understandable, for starters!</p>

<p>There&#39;s nothing that can be done about the royalty split for Rails 3/4 in
Action. To be frank about it, I signed a contract that allows Manning to take
full ownership of Rails 3/4 in Action and to pay me what they pay me. It means
that even if I ask them super-nicely (and not-so-super-nicely), they still
won&#39;t give me the rights to the book. It&#39;s absolutely my fault, and I have
learned my lesson from that. I&#39;ve fulfiled my end of the bargain, and here&#39;s
hoping that they (again) fulfil theirs by paying us authors the royalties we
get.</p>

<p>What I can do in the future is avoid publishers altogether and just continue
self-publishing. It&#39;s what I advise anyone who&#39;s considering writing a book
these days. Self-publishing allows you to get your book out there faster than
through a traditional publisher and you get to have complete control of it.</p>

<p>So if you&#39;re considering writing a book, check out
<a href="https://leanpub.com">Leanpub</a>&#39;s offering and see if it suits you.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Deploying a Rails application on Ubuntu: Passenger Edition</title>
   <link href="http://ryanbigg.com/2015/07/deploying-a-rails-application-on-ubuntu-passenger-edition"/>
   <updated>2015-07-08T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2015/07/deploying-a-rails-application-on-ubuntu-passenger-edition</id>
   <content type="html"><![CDATA[<p>In this guide, I&#39;ll cover the basics of deploying a Rails application to Ubuntu 14.04 on a Digital Ocean box. This guide will work on non-Digital-Ocean boxes too, and it might work on different Ubuntu versions. Try it out and find out :)</p>

<p>If you find any mistakes in this guide, please let me know in the comments below.</p>

<p>In the guide, we&#39;ll be using:</p>

<ul>
<li><a href="https://github.com/postmodern/ruby-install"><strong>ruby-install</strong></a>: To install a Ruby version system-wide.</li>
<li><strong>nginx</strong>: A webserver to serve our Rails application with.</li>
<li><a href="https://www.phusionpassenger.com/"><strong>Passenger</strong></a>: The proxy between nginx and Rails which automatically starts + stops Rails application &quot;worker processes&quot;.</li>
<li><strong>Capistrano</strong>: A very helpful tool that automates your deployment workflow.</li>
</ul>

<p>While you <em>could</em> serve traffic from your production site using <code>rails s</code>, there are many issues with that:</p>

<ol>
<li>It runs on port 3000, whereas most websites run on port 80.</li>
<li>If it dies, you will need to restart it manually.</li>
<li>It will crash under heavy load because the web server it uses (WEBrick) has not been designed for production use.</li>
</ol>

<p>So instead, we&#39;ll be using nginx and Passenger.</p>

<p>Before we can run our Ruby on Rails application on the server, we&#39;ll need to install Ruby.</p>

<h2>Installing a Ruby version</h2>

<p>In order to install Ruby, we&#39;ll need to install the <code>build-essential</code> package. This package gives us the build tools that we&#39;ll need to compile Ruby.</p>

<p>We first need to make sure that our <code>apt</code> sources are up-to-date. If they&#39;re not, installing the <code>build-essential</code> pcakage might fail. We will do this by logging into the machine as root, and then running this command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">apt-get update
</code></pre></div>
<p>Next, we&#39;ll need to install the <code>build-essential</code> package itself:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">apt-get install build-essential
</code></pre></div>
<p>With those tools installed, we will now install a Ruby version with the <code>ruby-install</code> tool. Follow the <a href="https://github.com/postmodern/ruby-install#install">install steps for ruby-install</a> (reproduced here for your convienience):</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">wget -O ruby-install-0.5.0.tar.gz https://github.com/postmodern/ruby-install/archive/v0.5.0.tar.gz
tar -xzvf ruby-install-0.5.0.tar.gz
cd ruby-install-0.5.0/
make install
</code></pre></div>
<p>We will now install Ruby 2.2.2 system-wide by running this command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby-install --system ruby 2.2.2 -- --disable-install-rdoc
</code></pre></div>
<p>We&#39;re installing it system-wide so that it&#39;s available for all users on this machine.  The <code>--disable-install-rdoc</code> tells Ruby to skip the part about installing RDoc documentation for Ruby on this machine. This is a production machine and we don&#39;t need RDoc.</p>

<blockquote>
<p>Eventually, we&#39;ll be having each application have its own user on this machine. While we <em>could</em> use <code>ruby-install</code> on a per-user basis, it makes much more sense (and is easier!) to have it on a system-wide level.</p>
</blockquote>

<p>Once that command finishes running, let&#39;s remove the <code>ruby-install</code> package + directory:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rm -r ~/ruby-install-*
</code></pre></div>
<p>It might make sense at this point to install Rails, but we should definitely let Bundler take care of that during the application deployment process. Let&#39;s just install Bundler for now:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem install bundler
</code></pre></div>
<h2>Deploying the application</h2>

<p>To deploy the application, we&#39;re going to use a gem called Capistrano. Capistrano has been a mainstay of the Ruby community for some time now due to its flexibility and reliability.</p>

<p>With Capistrano, we&#39;ll be able to (git) clone the Rails application to the server and run any necessary configuration steps that are required to get our application running, such as <code>bundle install</code>, <code>rake assets:precompile</code>, and configuring a database.</p>

<h3>Creating a new user</h3>

<p>The first thing to do is to create a new user on the machine where we&#39;re deploying to for the application. This user will be sandboxed into its own directory, which means the application will only have access to that user&#39;s home directory. </p>

<blockquote>
<p>If we installed the application as root and Rails had a Remote Code Execution vulnerability, the box could get taken over by some malicious hackers.</p>
</blockquote>

<p>Let&#39;s create this new application user now:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">useradd -d /home/rails_app -m -s /bin/bash rails_app
</code></pre></div>
<p><strong>I&#39;ve used <code>rails_app</code> here just as an example. You should use your application&#39;s name.</strong></p>

<p>The <code>-d</code> option specifies the home directory of the user and the <code>-m</code> option tells <code>useradd</code> to create that directory if it doesn&#39;t already exist. The <code>-s</code> option tells it that we want to use the <code>/bin/bash</code> shell.</p>

<p>Next, we&#39;ll want to make it so that we can connect to the server as this user. This is so that when we deploy the application, we do so as the user that we just created. If you&#39;ve setup GitHub already, you probably already have setup an SSH key. If not, follow <a href="https://help.github.com/articles/generating-ssh-keys/">this excellent guide from GitHub</a>.</p>

<p>To allow you to connect to the application server as the new user, we&#39;ll need to copy over the public key (<code>~/.ssh/id_rsa.pub</code>) to the server. The easiest way to do this is to copy it over to root first. On your own personal computer, run this command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">scp ~/.ssh/id_rsa.pub root@yourmachine.example.com:~/key
</code></pre></div>
<p>Then on the server, move the key over to the new user&#39;s home directory:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mkdir -p /home/rails_app/.ssh
mv key /home/rails_app/.ssh/authorized_keys
chown -R rails_app /home/rails_app/.ssh
chmod 600 /home/rails_app/.ssh/authorized_keys
</code></pre></div>
<p>Once you&#39;ve run those commands, you should be able to SSH into the machine as that user without requiring a password.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ssh rails_app@yourmachine.example.com
</code></pre></div>
<p>If you run <code>ruby -v</code> after connecting, you should see this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-linux]
</code></pre></div>
<p>This indicates that Ruby can be found for your user, and that we can proceed to deploying the application.</p>

<p>Before we move onto the next section, we&#39;ll need to generate a &quot;deploy key&quot; for this user. This will be used by GitHub to grant this user access to the repository on GitHub.</p>

<p>We will generate that key by running this command on the server as our application&#39;s user:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ssh-keygen -t rsa
</code></pre></div>
<p>On our repository on GitHub, we can go to &quot;Settings&quot;, then &quot;Deploy Keys&quot; and add a new deploy key:</p>

<p><img src="/images/ubuntu-deploy-guide/add_deploy_key.png" alt="Add deploy key"></p>

<p>In the &quot;Title&quot; we can put whatever we feel like, but in the &quot;Key&quot; field we&#39;ll need to put the contents of the <code>~/.ssh/id_rsa.pub</code> file that the <code>ssh-keygen</code> command generated. Create the new deploy key now.</p>

<p>We&#39;ll need to set Git up on this machine so that we can clone the repo to test it out, and later to actually deploy the application. Let&#39;s install it now with this command <strong>ran as root</strong>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">apt-get install git-core
</code></pre></div>
<p>Switch back to the <code>rails_app</code> user. We can test if this key is working by running <code>git clone git@github.com:you/example_app.git</code> (or whatever your repo is). If the key is setup correctly, then the clone will work.</p>

<h2>Deploying with Capistrano</h2>

<p>Next, we&#39;ll automate the deployment of our code to the server with Capistrano. We can install Capistrano as a gem dependency of the application by adding these two lines to the <code>Gemfile</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">&#39;capistrano-rails&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;capistrano-passenger&#39;</span>
</code></pre></div>
<p>We can then run <code>bundle install</code> to install <code>capistrano-rails</code> and <code>capistrano-passenger</code> and their dependencies. To install Capistrano into our application, we&#39;ll need to run <code>bundle exec cap install</code>. This will install a couple of files in our application that will be used to configure how Capistrano deploys the application to our servers.</p>

<p>The first of these files is <code>config/deploy.rb</code>. Near the top of this file are these two lines:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;my_app_name&#39;</span>
<span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;git@example.com:me/my_repo.git&#39;</span>
</code></pre></div>
<p>We will need to change the <code>application</code> to match the name of our application (<code>rails_app</code> is mine, but your application name is different!), and change the <code>repo_url</code> to be the <code>git@github.com</code> URL for our application. We should also change the path of the application so that it deploys to the home directory of the user:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/home/rails_app/app&#39;</span>
</code></pre></div>
<p>Next, we&#39;ll need to tell Capistrano where to deploy the application to. We can do this by adding this as the first line in <code>config/deploy/production.rb</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">server</span> <span class="s1">&#39;app.example.com&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&#39;rails_app&#39;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="sx">%w{app db web}</span>
</code></pre></div>
<p>Finally, we&#39;ll need to tell Capistrano to run <code>bundle install</code> when the application is deployed, as well as to run the migrations and compile the assets. We can do this by uncommenting these lines in <code>Capfile</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;capistrano/bundler&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;capistrano/rails/assets&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;capistrano/rails/migrations&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;capistrano/passenger&#39;</span>
</code></pre></div>
<p>Here&#39;s what each of those do:</p>

<ul>
<li><code>capistrano/bundler</code> is responsible for running <code>bundle install</code> (with some fancy deployment options as you&#39;ll see later) during an application deployment. This ensures that the gems on the server are up to date with whatever&#39;s specified in the <code>Gemfile.lock</code>.</li>
<li><code>capistrano/rails/assets</code> is responsible for precompiling the assets upon deploy.</li>
<li><code>capistrano/rails/migrations</code> is responsible for running the migrations for a new release (if any) during a new deploy.</li>
<li><code>capistrano/passenger</code> will restart the application on every single deploy, ensuring that only the latest code is running.</li>
</ul>

<p>This sets up most of the Capistrano configuration. There&#39;s a couple more pieces that we will address as they come up. </p>

<p>There&#39;s two more thing to do before we can deploy the application to the server: we&#39;ll need to install the development headers for whatever database system we&#39;re using and we&#39;ll need to install a JavaScript runtime. </p>

<h2>Database setup</h2>

<p>Install one of the following packages as the <code>root</code> user on that machine:</p>

<ul>
<li>By default, a Rails application uses SQLite3. To install SQLite3&#39;s development headers, run this command:</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">apt-get install libsqlite3-dev
</code></pre></div>
<ul>
<li>If you&#39;re using MySQL, run:</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">apt-get install libmysqlclient-dev
</code></pre></div>
<ul>
<li>If you&#39;re using PostgreSQL, run:</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">apt-get install libpq-dev
</code></pre></div>
<p>If you&#39;re using MySQL or PostgreSQL, you&#39;ll need to install their servers.</p>

<ul>
<li>For MySQL, the package to install is <code>mysql-server</code>.</li>
<li>For PostgreSQL, the package to install is <code>postgresql-9.3</code></li>
</ul>

<h2>JavaScript runtime</h2>

<p>My preferred JavaScript runtime is the <code>nodejs</code> package. You can install it with <code>apt-get install nodejs</code>. This package will be used by the server to during <code>rake assets:precompile</code> to precompile the JavaScript assets.</p>

<h2>Deploying the first version</h2>

<p>We can now run <code>bundle exec cap production deploy</code> to deploy our application to our server. The first deploy might be a bit slow while all the gem dependencies are installed on the server. Patience is required for this step.</p>

<p>When it&#39;s complete, the final line should look like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">INFO [9fa64154] Finished in 0.194 seconds with exit status 0 (successful).
</code></pre></div>
<p>Capistrano has set up your application directory and it has deployed it to a directory at <code>/home/rails_app/app/releases/&lt;timestamp&gt;</code>. This directory is unique to this release so that you may choose to rollback (with <code>bundle exec cap production rollback</code>) if something goes wrong.</p>

<p>Capistrano started out by cloning your application into the directory it created. It then:</p>

<ul>
<li>Ran <code>bundle install</code> to install your application&#39;s gem dependencies.</li>
<li>Ran <code>rake assets:precompile</code> to precompile your application&#39;s assets.</li>
<li>Ran <code>rake db:migrate</code> to migrate the production database for the application up to the latest version.</li>
</ul>

<p>The next step Capistrano will do is symlink the release directory to <code>/home/rails_app/app/current</code>. This is so that we have a sensible name with which to access the current release of our application.</p>

<p>At the end of all of that, it will also check the number of releases in the application directory. If there are more than 5, it will delete the oldest ones and keep only the 5 most recent. Again: these are kept around so that you may choose to rollback if something goes wrong.</p>

<p>With the application deployed, let&#39;s get it to serve our first production request by installing nginx + Passenger and then configuring them.</p>

<h2>Installing nginx + Passenger</h2>

<p>We can install a standalone edition of nginx using the Passenger installer, which massively simplifies what we&#39;re about to do. Without it, we would need to install nginx and Passenger, then we would need to configure these to work with each other.</p>

<p>Before we can install that, we&#39;ll need to install one more package:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">apt-get install libcurl4-openssl-dev
</code></pre></div>
<p>This installs Curl development headers with SSL support, which Passenger uses during the installation process.</p>

<p>To install Passenger, we will run <code>gem install passenger</code>, as root.</p>

<p>Next, we&#39;ll need to install Passenger and nginx, which we will do by running <code>passenger-install-nginx-module</code> and following the steps. We want to select Ruby when it prompts us for which languages we&#39;re interested in, of course. When it asks if we want Passenger to download + install nginx for us, we&#39;ll select the first option; &quot;Yes: download, compile and install Nginx for me.&quot;</p>

<p>This is another part where we&#39;ll need to wait a bit while Passenger compiles all the things it needs. Once it&#39;s done, it will tell us to put this configuration in our nginx config:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">server {
   listen 80;
   server_name www.yourhost.com;
   root /somewhere/public;   # &lt;--- be sure to point to &#39;public&#39;!
   passenger_enabled on;
}
</code></pre></div>
<p>The <code>listen</code> directive tells nginx to listen for connections on port 80. The <code>server_name</code> directive is the address of your server, and you should change this from <code>www.yourhost.com</code> to whatever your server is. The <code>root</code> directive tells nginx where to find the application. The <code>passenger_enabled</code> directive should be very obvious.</p>

<p>Open <code>/opt/nginx/conf/nginx.conf</code> and delete the <code>server</code> block inside the <code>http</code> block, and replace it with the above example. Update the values in the example to be specific to your application.</p>

<p>You can start nginx by running:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/opt/nginx/sbin/nginx
</code></pre></div>
<p>If we try to access our application now, we&#39;ll see a &quot;Incomplete response received from application&quot; error. In order to diagnose one of these, we can look in <code>/opt/nginx/logs/error.log</code>, which will tell us what caused that:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">*** Exception RuntimeError in Rack application object (Missing `secret_token` and `secret_key_base` for &#39;production&#39; environment, set these values in `config/secrets.yml`) (process 5076, thread 0x007fd841f79d58(Worker 1)):
</code></pre></div>
<p>It&#39;s telling us that we&#39;re missing the <code>secret_token</code> and <code>secret_key_base</code> for the production environment in <code>config/secrets.yml</code>. If we look at our application&#39;s <code>config/secrets.yml</code>, we&#39;ll see indeed that this is missing:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">development:
  secret_key_base: [redacted]

test:
  secret_key_base: [redacted]

# Do not keep production secrets in the repository,
# instead read values from the environment.
production:
  secret_key_base: &lt;%= ENV[&quot;SECRET_KEY_BASE&quot;] %&gt;
</code></pre></div>
<p>While the comment above the production key (and the code itself!) says to read it from the environment, I personally think it&#39;s easier to have a <code>config/secrets.yml</code> with the secret key kept on the server itself, and then have that copied over on each deploy.</p>

<h2>Generating a secret key</h2>

<p>To that end, we will put a <code>config/secrets.yml</code> in the <code>/home/rails_app/app/shared</code> directory and tell Capistrano to copy that file over during deployment. We&#39;re creating the file in the <code>shared</code> directory because it&#39;s going to be a file that is shared across all releases of our application.</p>

<p>To generate the <code>secret_key_base</code> value for the production key inside the new <code>config/secrets.yml</code> file, we will run <code>rake secret</code> inside our application. This will give you a very long key, such as:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">eaccffd1c5d594d4bf8307cac62cddb0870cdfa795bf2257ca173bedabc389a399b066e3b48cc0544604a4a77da38b9af4b46448fdad2efac9b668a18ad47ddf
</code></pre></div>
<p><strong>Don&#39;t use this one, because it is not secret! Generate one yourself.</strong></p>

<p>When you&#39;ve generated it, log into the server as <code>rails_app</code> and create a new file at <code>/home/rails_app/app/shared/config/secrets.yml</code> with this content:</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">secret_key_base</span><span class="p-Indicator">:</span> <span class="s">&quot;&lt;key</span><span class="nv"> </span><span class="s">generated</span><span class="nv"> </span><span class="s">by</span><span class="nv"> </span><span class="s">rake</span><span class="nv"> </span><span class="s">secret&gt;&quot;</span>
</code></pre></div>
<p>Next, we&#39;ll need to uncomment the line in <code>config/deploy.rb</code> for the <code>linked_files</code> option. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">set :linked_files, fetch(:linked_files, []).push(&#39;config/secrets.yml&#39;)
</code></pre></div>
<p>We&#39;ve taken out <code>config/database.yml</code> for the time being just so we can confirm that we&#39;re passed this <code>secrets.yml</code> issue. After we&#39;ve dealt with that, we&#39;ll come back and look at creating a shared <code>database.yml</code>.</p>

<p>Let&#39;s run another deploy now with <code>bundle exec cap production deploy</code>. This deploy should fix our <code>secrets.yml</code> problem. Making a request to the application might work now if you&#39;re using SQLite3. If not, then you&#39;ll need to wait until the next section is over before that will all work.</p>

<h2>Database configuration</h2>

<p>If you&#39;re not using SQLite3 in production, then you&#39;ll need to setup a database for your application. This guide will only configure PostgreSQL, since that is what I personally am most familiar with.</p>

<p>The first thing that you will need to do is to create a database + user in PostgreSQL for this user. To do that, run these commands:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo su postgres
createdb rails_app
createuser rails_app
</code></pre></div>
<blockquote>
<p>While the database name can be different to the username, the username that we use for PostgreSQL must be the same as the user that you use to SSH onto the server to deploy the application. When the application tries connecting to the database, it will do it using the same name as the user that the application runs under; which has been <code>rails_app</code> in this guide.</p>
</blockquote>

<p>We switch to the <code>postgres</code> user as it has superuser rights on our database which means it can execute the <code>createdb</code> and <code>createuser</code> commands. The <code>root</code> user of the machine cannot run these commands itself. You&#39;ll need to switch back from the postgres user back to root, which you can do by running <code>exit</code>.</p>

<p>Once we&#39;ve run those commands, we can test to see if it&#39;s working by running <code>psql</code> as the <code>rails_app</code> user. If it is working, then we will see a <code>psql</code> console like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">psql (9.3.9)
Type &quot;help&quot; for help.

rails_app=&gt;
</code></pre></div>
<p>Great! Now we can setup the database configuration for the application. The first step is to change the database engine that the application uses in its <code>Gemfile</code> from <code>sqlite3</code> to the PostgreSQL gem, <code>pg</code>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">&#39;pg&#39;</span>
</code></pre></div>
<p>Next, we will need to run <code>bundle install</code> to update our application&#39;s dependencies. We will need to ensure that we change our local <code>config/database.yml</code> to use PostgreSQL as well. You&#39;ll want to be using the same database software locally and on the server, as that means that you have identical environments across the different machines.</p>

<p>The next step is to put a <code>config/database.yml</code> in the <code>/home/rails_app/app/shared</code> directory which only contains a <code>production</code> key:</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgresql</span>
  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rails_app</span>
</code></pre></div>
<p>We can copy this file over on deploy by updating <code>config/deploy.rb</code> and changing the <code>linked_files</code> line to this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">set</span> <span class="ss">:linked_files</span><span class="p">,</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:linked_files</span><span class="p">,</span> <span class="o">[]</span><span class="p">)</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s1">&#39;config/database.yml&#39;</span><span class="p">,</span> <span class="s1">&#39;config/secrets.yml&#39;</span><span class="p">)</span>
</code></pre></div>
<p><strong>We&#39;ll need to commit the changes to the <code>Gemfile</code> + <code>Gemfile.lock</code> before continuing here.</strong></p>

<p>The application will now work after one more run of <code>bundle exec cap production deploy</code>. Try it out yourself by visiting your app.</p>

<p>Your app should now be deployed to your server. Go ahead and try it out.</p>

<h2>Conclusion</h2>

<p>Your application is now deployed, but the fun doesn&#39;t stop here. You may need to tweak the <code>PassengerMaxInstances</code> configuration setting inside the <code>VirtualHost</code> block for your application to increase or decrease the amount of instances running on the machine, depending on how much free RAM you have. If you&#39;re running out of RAM, decrease this number. It entirely depends on the application, so just experiment to find out what value suits you.</p>

<p>The entire <a href="https://www.phusionpassenger.com/documentation/Users%20guide%20Apache.html">Passenger Users Guide</a> is a good read for other bits of tweaking too.</p>

<p>You may wish to setup exception tracking for your application now that it has been deployed to production, and for that I recommend <a href="https://rollbar.com">Rollbar</a>. It&#39;s very easy to setup for any Rails application and they have instructions on how to do that on their site.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Mac OS X, Ruby, ruby-install, chruby and You</title>
   <link href="http://ryanbigg.com/2015/06/mac-os-x-ruby-ruby-install-chruby-and-you"/>
   <updated>2015-06-09T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2015/06/mac-os-x-ruby-ruby-install-chruby-and-you</id>
   <content type="html"><![CDATA[<p><strong>Last updated: April 26th, 2016</strong></p>

<p>
  <strong>This beginner's guide will set up with Ruby 2.3.1, chruby, ruby-install and Rails 4.2.6 and is specifically written for a <em>development</em> environment on Mac OS X, but will probably work on many other operating systems with slight modifications.</strong>
</p>

<p>This guide is <em>almost</em> a copy of my older <a href='http://ryanbigg.com/2014/10/ubuntu-ruby-ruby-install-chruby-and-you/'>Ubuntu, Ruby, ruby-install, chruby, Rails and You</a> guide, but it's written primarily for Mac OS X.</p>

<p>This guide will cover installing a couple of things:</p>

<ul>
<li><a href="https://github.com/postmodern/ruby-install"><strong>ruby-install</strong></a>: a very lightweight way to install multiple Rubies on the same box.</li>
<li><a href="https://github.com/postmodern/chruby"><strong>chruby</strong></a>: a way to easily switch between those Ruby installs</li>
<li><strong>Ruby 2.3.1</strong>: at the time of writing the newest current stable release of Ruby.</li>
<li><strong>Bundler</strong>: a package dependency manager used in the Ruby community</li>
<li><strong>Rails 4.2.6</strong>: at the time of writing the newest current stable release of Rails.</li>
</ul>

<p>By the end of this guide, you will have these things installed and have some very, very easy ways to manage gem dependencies for your different applications / libraries, as well as having multiple Ruby versions installed and usable all at once.</p>

<p>We assume you have <code>sudo</code> access to your machine, and that you have an understanding of the basic concepts of Ruby, such as &quot;What is RubyGems?&quot; and more importantly &quot;How do I turn this computer-thing on?&quot;. This knowledge can be garnered by reading the first chapter of <a href="https://manning.com/black2">any Ruby book</a>.</p>

<p>If you&#39;re looking for a good Rails book, I wrote one called <a href="http://manning.com/bigg2">Rails 4 in Action</a>.</p>

<h3>Housekeeping</h3>

<p>The first thing we&#39;re going to need to install is XCode which you can get from the Mac App Store. We&#39;ll use XCode to install the Command Line Tools which install some libraries that Ruby will use to compile itself.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">xcode-select --install
</code></pre></div>
<p>First of all, we&#39;re going to need to install some package management script so that we can install packages such as Git, MySQL and other things exceptionally easy. The best package management system on Mac OS X for this is <a href="https://brew.sh">homebrew</a>. We can install this by using this command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre></div>
<p>Next, we&#39;ll install <code>chruby</code> and <code>ruby-install</code>.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install chruby ruby-install
</code></pre></div>
<h3>ruby-install</h3>

<p>First we fetch the ruby-install file, extract it into a directory, then make it. You can verify that these steps have worked by running the following command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ ruby-install -V
</code></pre></div>
<p>If you see this, then you&#39;ve successfully installed ruby-install:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby-install: 0.6.0
</code></pre></div>
<h3>Ruby</h3>

<p>Our next step is to install Ruby itself, which we can do with this command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby-install --latest ruby
</code></pre></div>
<p>This command will take a couple of minutes, so grab your $DRINKOFCHOICE and go outside or something. Once it&#39;s done, we&#39;ll have Ruby 2.3.1 installed.</p>

<p>Now we&#39;ll need to load chruby automatically, which we can do by adding these lines to <code>~/.bashrc</code>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">source /usr/local/share/chruby/chruby.sh
source /usr/local/share/chruby/auto.sh
</code></pre></div>
<p>In order for this to take effect, we&#39;ll need to source that file:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">. ~/.bashrc
</code></pre></div>
<p>Alternatively, opening a new terminal tab/window will do the same thing.</p>

<p>To verify that chruby is installed and has detected our Ruby installation, run <code>chruby</code>. If you see this, then it&#39;s working:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby-2.3.1
</code></pre></div>
<p>Now we need to make that Ruby the default Ruby for our system, which we can do by creating a new file called <code>~/.ruby-version</code> with this content:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby-2.3.1
</code></pre></div>
<p>This file tells <code>chruby</code> which Ruby we want to use by default. To change the ruby version that we&#39;re using, we can run <code>chruby ruby-2.3.1</code> for example -- assuming that we have Ruby 2.3.1 installed first!</p>

<p>Did this work? Let&#39;s find out by running <code>ruby -v</code>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin15]
</code></pre></div>
<h3>Rails</h3>

<p>Now that we have a version of Ruby installed, we can install Rails. Because our Ruby is installed to our home directory, we don&#39;t need to use that nasty <code>sudo</code> to install things; we&#39;ve got write-access! To install the Rails gem we&#39;ll run this command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem install rails -v 4.2.6 --no-document
</code></pre></div>
<p>This will install the <code>rails</code> gem and the multitude of gems that it and its dependencies depend on, including Bundler.</p>

<h3>MySQL</h3>

<p>Before you can use MySQL, you&#39;ll need to install it with Homebrew:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install mysql
</code></pre></div>
<p>After this, <code>gem install mysql</code> should succeed.</p>

<h3>PostgreSQL</h3>

<p>Before you can use PostgreSQL, you&#39;ll need to install it with Homebrew:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install postgresql
</code></pre></div>
<p>After this, <code>gem install pg</code> should succeed.</p>

<h3>Fin</h3>

<p>And that&#39;s it! Now you&#39;ve got a Ruby environment you can use to write your (first?) Rails application in with such minimal effort. A good read after this would be the <a href='http://guides.rubyonrails.org'>official guides for Ruby on Rails</a>.</p>

<p>The combination of chruby and ruby-install is such a powerful tool and comes in handy for day-to-day Ruby development. Use it, and not the packages from apt to live a life of development luxury.</p>

<h3>Postscript</h3>

<p>A previous version of this guide used RVM. RVM has overtime become bloated and unwieldy. There are many features of RVM that developers simply don&#39;t use, and so using a simpler solution is a better way of doing things as it will lead to less confusion. For instance, RVM provides gemsets which is a feature that is no longer necessary with the advent of Bundler. Even if you don&#39;t want to use Bundler (i.e. you&#39;re crazy) then there&#39;s smaller more specifically-targeted tools for that, such as <a href="https://github.com/seattlerb/ohmygems">ohmygems</a>. RVM&#39;s days as the leading way to install Ruby are over, and this guide has been updated to reflect that. There are better tools.</p>

<p>I&#39;ve opted for chruby+ruby-install in this guide because they&#39;ve consistently worked for me and are very, very easy to install. I know of a great many other people who have also used, and continue to use, these tools and I&#39;ve not heard of any of them complaining. Therefore I can only wholeheartedly recommend them to the readers of this post.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Getting started with Ruby and Rails</title>
   <link href="http://ryanbigg.com/2015/04/getting-started-with-ruby-and-rails"/>
   <updated>2015-04-30T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2015/04/getting-started-with-ruby-and-rails</id>
   <content type="html"><![CDATA[<p>There are a lot of people who wish to get started with Ruby and Rails, but
don&#39;t know where to start. I hope that this post will serve as a guide for
those people.</p>

<h2>Operating Systems</h2>

<h3>Windows</h3>

<p>People try to develop Ruby and Ruby on Rails apps on Windows and they struggle
with it. You can try developing on it, but know that it&#39;s going to be more
painful than the other options (Linux or Mac).</p>

<p>It&#39;s for this reason that I recommend installing Ubuntu in a VM
(using <a href="https://www.virtualbox.org/">VirtualBox</a>) on your Windows PC if you&#39;re
in that environment.</p>

<h3>Ubuntu</h3>

<p>Once you&#39;ve got Ubuntu setup, you can follow my <a href="http://ryanbigg.com/2014/10/ubuntu-ruby-ruby-install-chruby-and-you/">Ubuntu, Ruby, ruby-install,
chruby, Rails and You blog post</a>
which will setup a proper development environment for you on Ubuntu.</p>

<p><strong>Don&#39;t install Ruby packages from <code>apt</code></strong>. That way lies pain and suffering.</p>

<h3>Mac</h3>

<p>If you&#39;re on Mac, you can follow many of the same steps in the Ubuntu guide.
Install ruby-install, chruby as per that guide, and then you can install
<a href="http://brew.sh/">Homebrew</a>, and then install PostgreSQL by running this
command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install postgresql
</code></pre></div>
<p>Or MySQL with this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install mysql
</code></pre></div>
<h2>Getting started with Ruby</h2>

<h3>The Ruby Koans</h3>

<p><strong>FREE</strong></p>

<p>Your environment is now setup and now you&#39;re wondering where to go from here.
I <em>always</em> recommend the <a href="http://rubykoans.com/">Ruby Koans</a> which, as their
site says:</p>

<blockquote>
<p>The Koans walk you along the path to enlightenment in order to learn Ruby. The goal is to learn the Ruby language, syntax, structure, and some common functions and libraries. We also teach you culture. Testing is not just something we pay lip service to, but something we live. It is essential in your quest to learn and do great things in the language.</p>
</blockquote>

<p>The Koans are a fantastic introduction to Ruby and if I had my way, it&#39;d be
where all newbies started to learn. You don&#39;t have to complete them all, just
try your best. It&#39;s time I admitted: I&#39;ve never actually completed the Koans
myself. One day I might.</p>

<h3>The Well-Grounded Rubyist</h3>

<p><strong>NON-FREE</strong></p>

<p>If a book is more your style, then <a href="http://manning.com/black3">The Well-Grounded
Rubyist</a> is the one that I would recommend. The
very first version of this book (Ruby for Rails) is what I learned Ruby from.
I don&#39;t link to it here because it was out of date when I read it and that
makes it even more out of date now.</p>

<h3>Jumpstart Labs Tutorials</h3>

<p><strong>FREE</strong></p>

<p>I also recommend checking out the <a href="http://tutorials.jumpstartlab.com/">Jumpstart Labs
Tutorials</a>, which are written by the
people who run <a href="http://turing.io">Turing Academy</a>. These include tutorials
that will introduce you to Ruby in 100 minutes, as well as some Sinatra and
Rails tutorials so that you can wrap your head around applying Ruby to web development.</p>

<h2>Getting started with Rails</h2>

<h3>Rails 4 in Action</h3>

<p><strong>NON-FREE</strong></p>

<p>It&#39;d be remiss of me to not mention my own book, <a href="https://manning.com/bigg2">Rails 4 in
Action</a> in this section. In the book, we build a
ticket-tracking application from the ground up using Behaviour Driven
Development. Thousands of people have found it to be a great introduction to
Rails, and some people have even gotten Rails jobs after having read it.</p>

<h3>Rails Tutorial</h3>

<p><strong>FREE</strong></p>

<p>If you don&#39;t want to shell out the money for my book (and why not?!), then the
free <a href="https://www.railstutorial.org/">Rails Tutorial</a> is the next-best-thing.
In that tutorial, you build a Twitter-like application from scratch. </p>

<h2>More reading / viewing / listening</h2>

<p>Before you go ahead and read this list, you should take some time to go through the resources above and gain a basic understanding of Ruby + Rails. Consider these supplementary to the above list.</p>

<h3>Books</h3>

<ul>
<li><a href="http://www.confidentruby.com/">Confident Ruby</a></li>
<li><a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional-Series/dp/0321584104">Eloquent Ruby</a></li>
<li><a href="http://www.poodr.com/">Practical Object-Oriented Design in Ruby</a></li>
</ul>

<h3>Podcasts</h3>

<ul>
<li><a href="http://rubyrogues.com">Ruby Rogues</a></li>
</ul>

<h3>Screencasts</h3>

<ul>
<li><a href="http://rubytapas.com">Ruby Tapas</a> - Bite sized screencasts about Ruby</li>
<li><a href="https://railscasts.com">Railscasts</a> - Screencasts about Ruby on Rails</li>
</ul>

<p>If you think of anything that should be added to this post, please leave a comment.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Filtering by index in Elasticsearch</title>
   <link href="http://ryanbigg.com/2014/12/filtering-by-index-in-elasticsearch"/>
   <updated>2014-12-03T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2014/12/filtering-by-index-in-elasticsearch</id>
   <content type="html"><![CDATA[<p>Today I needed to filter by indexes in an Elasticsearch instance, and so I googled for how to do this but I couldn&#39;t find anything other than the <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-indices-filter.html">indicies filter</a> which isn&#39;t helpful without a proper context of where to use it in a query.</p>

<p>Instead of that filter, this is what I came up with to do the filtering:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">client</span> <span class="o">=</span> <span class="no">Elasticsearch</span><span class="o">.</span><span class="n">new</span>
<span class="n">client</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="ss">index</span><span class="p">:</span> <span class="s2">&quot;logstash-2014.12.03,logstash-2014.12.02...&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="p">{</span>
  <span class="ss">query</span><span class="p">:</span> <span class="p">{</span>
    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div>
<p>I hope this post can help other people who are looking for the same thing.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Ubuntu, Ruby, ruby-install, chruby, Rails and You</title>
   <link href="http://ryanbigg.com/2014/10/ubuntu-ruby-ruby-install-chruby-and-you"/>
   <updated>2014-10-05T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/10/ubuntu-ruby-ruby-install-chruby-and-you</id>
   <content type="html"><![CDATA[<p><strong>Last updated: 28th January 2016</strong></p>

<p><strong>This beginner&#39;s guide will set your machine up with Ruby 2.3.0 using chruby+ruby-install and Rails 4.2.5 and is specifically written for a <em>development</em> environment on Ubuntu 14.04, but will probably work on many other operating systems, including older / newer versions of Ubuntu and Debian. YMMV.</strong></p>

<h2>Under no circumstance should you install Ruby, Rubygems or any Ruby-related packages from apt-get. This system is out-dated and leads to major headaches. Avoid it for Ruby-related packages. We do Ruby, we know what&#39;s best. Trust us.</h2>

<p>This guide will cover installing a couple of things:</p>

<ul>
<li><a href="https://github.com/postmodern/ruby-install"><strong>ruby-install</strong></a>: a very lightweight way to install multiple Rubies on the same box.</li>
<li><a href="https://github.com/postmodern/chruby"><strong>chruby</strong></a>: a way to easily switch between those Ruby installs</li>
<li><strong>Ruby 2.3.0</strong>: at the time of writing the newest current stable release of Ruby.</li>
<li><strong>Bundler</strong>: a package dependency manager used in the Ruby community</li>
<li><strong>Rails 4.2.5</strong>: at the time of writing the newest current stable release of Rails.</li>
</ul>

<p>By the end of this guide, you will have these things installed and have some very, very easy ways to manage gem dependencies for your different applications / libraries, as well as having multiple Ruby versions installed and usable all at once.</p>

<p>We assume you have <code>sudo</code> access to your machine, and that you have an understanding of the basic concepts of Ruby, such as &quot;What is RubyGems?&quot; and more importantly &quot;How do I turn this computer-thing on?&quot;. This knowledge can be garnered by reading the first chapter of <a href="https://manning.com/black2">any Ruby book</a>.</p>

<p>If you&#39;re looking for a good Rails book, I wrote one called <a href="http://manning.com/bigg2">Rails 4 in Action</a>.</p>

<h3>Housekeeping</h3>

<p>First of all, we&#39;re going to run <code>sudo apt-get update</code> so that we have the latest sources on our box so that we don&#39;t run into any package-related issues, such as not being able to install some packages.</p>

<p>Next, we&#39;ll run another command which will install the essential building tools that will be used to install Ruby:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo apt-get install build-essential
</code></pre></div>
<p>And now we&#39;re ready to install ruby-install.</p>

<h3>ruby-install</h3>

<p>The installation instructions can be found <a href="https://github.com/postmodern/ruby-install#install">on the README of ruby-install</a>, but I&#39;ll repeat them here so you don&#39;t have to go over there:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">wget -O ruby-install-0.6.0.tar.gz \
  https://github.com/postmodern/ruby-install/archive/v0.6.0.tar.gz
tar -xzvf ruby-install-0.6.0.tar.gz
cd ruby-install-0.6.0/
sudo make install
</code></pre></div>
<p>First we fetch the ruby-install file, extract it into a directory, then make it. You can verify that these steps have worked by running the following command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ ruby-install -V
</code></pre></div>
<p>If you see this, then you&#39;ve successfully installed ruby-install:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby-install: 0.6.0
</code></pre></div>
<h3>Ruby</h3>

<p>Our next step is to install Ruby itself, which we can do with this command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby-install --latest ruby 2.3.0
</code></pre></div>
<p>This command will take a couple of minutes, so grab your $DRINKOFCHOICE and go outside or something. Once it&#39;s done, we&#39;ll have Ruby 2.3.0 installed. In order to use this Ruby version, we&#39;ll need to install chruby as well. The instructions <a href="https://github.com/postmodern/chruby#install">can be found in chruby&#39;s README</a> too, but I will reproduce them here:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">wget -O chruby-0.3.9.tar.gz \
  https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz
tar -xzvf chruby-0.3.9.tar.gz
cd chruby-0.3.9/
sudo make install
</code></pre></div>
<p>After this has been installed, we&#39;ll need to load chruby automatically, which we can do by adding these lines to your shells configuration file using the following command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">cat &gt;&gt; ~/.$(basename $SHELL)rc &lt;&lt;EOF
source /usr/local/share/chruby/chruby.sh
source /usr/local/share/chruby/auto.sh
EOF
</code></pre></div>
<p>In order for this to take effect, we&#39;ll reload the shell</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">exec $SHELL
</code></pre></div>
<p>Alternatively, opening a new terminal tab/window will do the same thing.</p>

<p>To verify that chruby is installed and has detected our Ruby installation, run <code>chruby</code>. If you see this, then it&#39;s working:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby-2.3.0
</code></pre></div>
<p>Now we need to make that Ruby the default Ruby for our system, which we can do by creating a new file called <code>~/.ruby-version</code> with this content:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby-2.3.0
</code></pre></div>
<p>This file tells <code>chruby</code> which Ruby we want to use by default. To change the ruby version that we&#39;re using, we can run <code>chruby ruby-2.3.0</code> for example -- assuming that we have Ruby 2.3.0 installed first!</p>

<p>Did this work? Let&#39;s find out by running <code>ruby -v</code>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-linux]
</code></pre></div>
<h3>Rails</h3>

<p>Now that we have a version of Ruby installed, we can install Rails. Because our Ruby is installed to our home directory, we don&#39;t need to use that nasty <code>sudo</code> to install things; we&#39;ve got write-access! To install the Rails gem we&#39;ll run this command:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem install rails -v 4.2.5 --no-rdoc --no-ri
</code></pre></div>
<p>This will install the <code>rails</code> gem and the multitude of gems that it and its dependencies depend on, including Bundler.</p>

<h3>MySQL</h3>

<p>If you&#39;re planning on using the <code>mysql2</code> gem for your application then you&#39;ll want to install the <code>libmysqlclient-dev</code> package before you do that. Without it, you&#39;ll get an error when the gem tries to compile its native extensions:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Building native extensions.  This could take a while...
ERROR:  Error installing mysql2:
    ERROR: Failed to build gem native extension.

    /home/ryan/.rubies/ruby-2.3.0/bin/ruby extconf.rb
checking for ruby/thread.h... yes
checking for rb_thread_call_without_gvl() in ruby/thread.h... yes
checking for rb_thread_blocking_region()... yes
checking for rb_wait_for_single_fd()... yes
checking for rb_hash_dup()... yes
checking for rb_intern3()... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lm... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lz... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lsocket... no
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lnsl... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lmygcc... no
checking for mysql_query() in -lmysqlclient... no
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
</code></pre></div>
<p>Install this package using <code>sudo apt-get install libmysqlclient-dev</code>.</p>

<h3>PostgreSQL</h3>

<p>Similar to the <code>mysql2</code> gem&#39;s error above, you&#39;ll also get an error with the <code>pg</code> gem if you don&#39;t have the <code>libpq-dev</code> package installed you&#39;ll get this error:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Building native extensions.  This could take a while...
ERROR:  Error installing pg:
    ERROR: Failed to build gem native extension.

    /home/ryan/.rubies/ruby-2.3.0/bin/ruby extconf.rb
checking for pg_config... no
No pg_config... trying anyway. If building fails, please try again with
 --with-pg-config=/path/to/pg_config
checking for libpq-fe.h... no
Can&#39;t find the &#39;libpq-fe.h header
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
</code></pre></div>
<p>Install this package using <code>sudo apt-get install libpq-dev</code>.</p>

<h3>SQLite3</h3>

<p>Just like MySQL and PostgreSQL before it, attempting to install the <code>sqlite3</code> gem will result in this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Gem::Ext::BuildError: ERROR: Failed to build gem native extension.

    /home/ryan/.rubies/ruby-2.3.0/bin/ruby extconf.rb
checking for sqlite3.h... no
sqlite3.h is missing. Try &#39;port install sqlite3 +universal&#39;,
&#39;yum install sqlite-devel&#39; or &#39;apt-get install libsqlite3-dev&#39;
and check your shared library search path (the
location where your sqlite3 shared library is located).
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
</code></pre></div>
<p>Fix this issue by running <code>sudo apt-get install libsqlite3-dev</code>.</p>

<h3>JavaScript Runtime</h3>

<p>Rails requires a JavaScript runtime to run its precompile step for the asset pipeline. If you attempt to run <code>rake assets:precompile</code> without one of these, you&#39;ll see this message:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ExecJS::RuntimeUnavailable: Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes.
</code></pre></div>
<p>To fix this error install <code>nodejs</code>, which comes with a JavaScript runtime:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo apt-get install nodejs
</code></pre></div>
<h3>Fin</h3>

<p>And that&#39;s it! Now you&#39;ve got a Ruby environment you can use to write your (first?) Rails application in with such minimal effort. A good read after this would be the <a href='http://guides.rubyonrails.org'>official guides for Ruby on Rails</a>.</p>

<p>The combination of chruby and ruby-install is such a powerful tool and comes in handy for day-to-day Ruby development. Use it, and not the packages from apt to live a life of development luxury.</p>

<h3>Postscript</h3>

<p>A previous version of this guide used RVM. RVM has overtime become bloated and unwieldy. There are many features of RVM that developers simply don&#39;t use, and so using a simpler solution is a better way of doing things as it will lead to less confusion. For instance, RVM provides gemsets which is a feature that is no longer necessary with the advent of Bundler. Even if you don&#39;t want to use Bundler (i.e. you&#39;re crazy) then there&#39;s smaller more specifically-targeted tools for that, such as <a href="https://github.com/seattlerb/ohmygems">ohmygems</a>. RVM&#39;s days as the leading way to install Ruby are over, and this guide has been updated to reflect that. There are better tools.</p>

<p>I&#39;ve opted for chruby+ruby-install in this guide because they&#39;ve consistently worked for me and are very, very easy to install. I know of a great many other people who have also used, and continue to use, these tools and I&#39;ve not heard of any of them complaining. Therefore I can only wholeheartedly recommend them to the readers of this post.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Working Remotely</title>
   <link href="http://ryanbigg.com/2014/10/working-remotely"/>
   <updated>2014-10-02T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/10/working-remotely</id>
   <content type="html"><![CDATA[<p>The news came out today that <a href="http://venturebeat.com/2014/10/01/after-raising-50m-reddit-forces-remote-workers-to-relocate-to-sf-or-get-fired/">Reddit is requiring all workers to move to San Francisco</a>. Of course, DHH (the guy who wrote <a href="http://37signals.com/remote/">a book about working remotely</a>) had an opinion about this:</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" lang="en"><p>What a coincidence <a href="https://twitter.com/sama">@sama</a> is &quot;not a fan of remote work&quot;, <a href="https://twitter.com/yishan">@yishan</a> sought his advice on canning remoters &quot;as friend&quot;, <a href="https://t.co/Bb5yjKZ68Q">https://t.co/Bb5yjKZ68Q</a></p>&mdash; DHH (@dhh) <a href="https://twitter.com/dhh/status/517475492296151040">October 2, 2014</a></blockquote>

<blockquote class="twitter-tweet" lang="en"><p>I&#39;m sure telling your your kids that daddy/mommy has to uproot the family for San Fran goes down smooth once you mention Optimal Teamwork.</p>&mdash; DHH (@dhh) <a href="https://twitter.com/dhh/status/517479897808531457">October 2, 2014</a></blockquote>

<blockquote class="twitter-tweet" lang="en"><p>Wanting to hire the very best and insisting they all live in San Francesco is simply delusional. Far more great people outside SF than in it</p>&mdash; DHH (@dhh) <a href="https://twitter.com/dhh/status/517481377487671296">October 2, 2014</a></blockquote>

<p>I haven&#39;t read DHH&#39;s book, but I agreed with him and even went as far as retweeting the last two tweets, which is unusual as I typically view DHH as person with extreme opinions and a &quot;fuck you&quot; kind of attitude that is rather grating when you&#39;re on the receiving end of it. Today though, he was spot on.</p>

<p>I worked remotely for two and a half years in my last job, wrote a book with an entirely remote team and therefore I can self-proclaim myself to be an expert on remote working. I would even go as far as to say that I&#39;ve done the best work of my life while being a remote worker. So when I hear about a company which self-proclaims itself to be &quot;The Frontpage of the Internet&quot; -- i.e. the front page of a globally distributed computer network -- moving their entire staff to San Francisco for &quot;optimal teamwork&quot;, it sounds very strange.</p>

<p>What even is &quot;optimal teamwork&quot;, anyway? You think that by magically gathering people in one building you&#39;re going to make them work any better than if they were apart? Do you think that they&#39;re going to not &quot;slack off&quot; because their boss can now come up behind them at any given moment? Do you think that they&#39;ll communicate better because they&#39;re all together?</p>

<p>No, they&#39;ll just work the same as they did before. They&#39;ll still slack off because humans aren&#39;t robots and like taking breaks every now and again from their work. It&#39;s actually provably beneficial to let people take breaks when they feel it&#39;s necessary to do so.</p>

<p>It&#39;ll be very interesting to see or hear about how bringing Reddit&#39;s team together works, or doesn&#39;t work and how many Redditors decide that the SF move is not for them.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Go package management</title>
   <link href="http://ryanbigg.com/2014/09/go-package-management"/>
   <updated>2014-09-02T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/09/go-package-management</id>
   <content type="html"><![CDATA[<p>In Ruby-land, we have a wonderful tool called Bundler to manage package dependencies. I can specify dependencies like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.1.5&#39;</span>
</code></pre></div>
<p>When I run <code>bundle install</code>, Bundler will install not only the <code>rails</code> dependency, but all of its dependencies and all of their dependencies and so on. It will then take note of the dependencies which have been resolved and save them to a <code>Gemfile.lock</code>. I can commit this file to Git and push it up to GitHub, then when other people work on my project they can clone it and run <code>bundle install</code> on their machine and work with the exact same dependencies. Another benefit of this is that I can have multiple versions of Rails installed on the machine and when I use Bundler, it will use the correct version of Rails as specified in the Gemfile.</p>

<p>There&#39;s tools out there in Go-land, such as <a href="https://github.com/mattn/gom">gom</a> and <a href="https://github.com/tools/godep">godep</a> which provide similar functionality. I prefer <code>godep</code>, but truth be told I wish that there was a Bundler-for-Go. Godep saves the dependencies in a JSON file:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;ImportPath&quot;</span><span class="p">:</span> <span class="s2">&quot;github.com/radar/my-project&quot;</span><span class="p">,</span>
  <span class="nt">&quot;GoVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;go1.3&quot;</span><span class="p">,</span>
  <span class="nt">&quot;Packages&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">&quot;./...&quot;</span>
  <span class="p">],</span>
  <span class="nt">&quot;Deps&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&quot;ImportPath&quot;</span><span class="p">:</span> <span class="s2">&quot;github.com/codegangsta/cli&quot;</span><span class="p">,</span>
      <span class="nt">&quot;Comment&quot;</span><span class="p">:</span> <span class="s2">&quot;1.2.0-22-g687db20&quot;</span><span class="p">,</span>
      <span class="nt">&quot;Rev&quot;</span><span class="p">:</span> <span class="s2">&quot;687db20fc379d1686465a28e9959707cd1acc990&quot;</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="nt">&quot;ImportPath&quot;</span><span class="p">:</span> <span class="s2">&quot;github.com/fatih/color&quot;</span><span class="p">,</span>
      <span class="nt">&quot;Rev&quot;</span><span class="p">:</span> <span class="s2">&quot;3161cccfa22c6243e02aa984cf2886d022024cec&quot;</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="nt">&quot;ImportPath&quot;</span><span class="p">:</span> <span class="s2">&quot;gopkg.in/check.v1&quot;</span><span class="p">,</span>
      <span class="nt">&quot;Rev&quot;</span><span class="p">:</span> <span class="s2">&quot;5b76b26efe7f426789852e983fbde4de62c42282&quot;</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div>
<p>This is a pretty good solution. <code>godep save</code> will update the dependencies (similar to <code>bundle update</code>), and <code>godep restore</code> will install the dependencies (similar to <code>bundle install</code>) if they aren&#39;t available in <code>GOPATH</code> already.</p>

<hr>

<p>Here&#39;s what I would like though: I want a way that I can specify dependencies for Go projects like I can specify for Ruby projects. Ruby projects have a <code>.gemspec</code> file <a href="http://git.io/teWNMw0">which lists dependencies</a>, and I would like Go projects to do the same thing. For instance, in my project I&#39;d like to specify my dependencies in a very simple JSON syntax (let&#39;s call it <code>deps.json</code>):</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">[</span>
  <span class="p">{</span>
    <span class="err">path:</span> <span class="nt">&quot;github.com/codegangsta/cli&quot;</span><span class="p">,</span>
    <span class="err">rev:</span> <span class="nt">&quot;1.2.0&quot;</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="err">path:</span> <span class="nt">&quot;github.com/fatih/color&quot;</span><span class="p">,</span>
    <span class="err">rev:</span> <span class="nt">&quot;master&quot;</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">]</span>
</code></pre></div>
<p>Then I would like to run a <code>bundle install</code>-equivalent which creates a <code>deps.json.lock</code>:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">[</span>
  <span class="p">{</span>
    <span class="err">path:</span> <span class="nt">&quot;github.com/codegangsta/cli&quot;</span><span class="p">,</span>
    <span class="err">rev:</span> <span class="nt">&quot;565493f259bf868adb54d45d5f4c68d405117adf&quot;</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="err">path:</span> <span class="nt">&quot;github.com/fatih/color&quot;</span><span class="p">,</span>
    <span class="err">rev:</span> <span class="nt">&quot;3161cccfa22c6243e02aa984cf2886d022024cec&quot;</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">]</span>
</code></pre></div>
<p>That&#39;s the first step. The second step is a lot more complex than that, and it involves fetching the dependencies from their sources and setting up a proper <code>GOPATH</code>. See, the issue with the normal <code>GOPATH</code> is that all your dependencies are thrown into the one <code>src</code> directory. This means that if you want to use &quot;Version A&quot; of a project in &quot;Codebase A&quot; and &quot;Version B&quot; of that same project in &quot;Codebase B&quot;, you&#39;re going to have a bad time. This is why I think having a <em>global</em> <code>GOPATH</code> is a terrible idea.</p>

<p>Instead, there should be a project-specific <code>GOPATH</code>. It looks the same as a normal <code>GOPATH</code>, but has the correct dependencies in it. For instance, instead of having a <code>~/Projects/go/src/github.com/radar/my-project</code>, I would have <code>~/Projects/go/my-project</code>, and then underneath that it would have <code>bin</code>, <code>pkg</code> and <code>src</code> directories relevant only to that project. The project&#39;s code itself would exist within <code>Projects/go/my-project/src/github.com/radar/my-project</code>, only because that&#39;s what Go expects.</p>

<p>To setup the project, I would create <code>~/Projects/go/my-project/src/github.com/radar/my-project</code>, and then run that <code>bundle install</code> equivalent. This would clone <code>github.com/codegangsta/cli</code> into <code>~/Projects/go/my-project/src/github.com/codegangsta/cli</code>, and check it out to the ref specified in <code>deps.json.lock</code>. It would then do the same thing with <code>github.com/fatih/color</code>. Now I have the first layer of dependencies that <code>my-project</code> needs.</p>

<p>The third step is where it gets <em>even more difficult</em>. These first layer of dependencies <em>might</em> have dependencies themselves, and so this tool should check for <code>deps.json.lock</code> (or <code>deps.json</code>) within those projects and resolve them as well. This is difficult because you may run into issues like circular dependencies and conflicting version requirements.</p>

<p>I believe if project setup was done this way, multiple Go projects on the same machine can use varying dependencies very easily.</p>

<p>There&#39;s of course caveats: potential disk usage problems, every project needs a <code>deps.json</code>, and the resolution problems. By no means am I suggesting that this is <em>The Way Things Should Be Done</em>. It&#39;s just something that occurred to me tonight that could be a potential beginning towards a solution for the Go package management puzzle.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Thoughts on Go</title>
   <link href="http://ryanbigg.com/2014/08/thoughts-on-go"/>
   <updated>2014-08-08T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/08/thoughts-on-go</id>
   <content type="html"><![CDATA[<p>I&#39;ve had an interest in Go now for about a year. I&#39;ve not done much with it before this week besides go through the <a href="https://github.com/cdarwin/go-koans">go-koans</a> (recommended!) and build a couple of very light projects with it, like an IRC bot that didn&#39;t do much. I&#39;ve also made a couple of commits to <a href="https://github.com/bjeanes/go-lifx">Bo Jeanes&#39; go-lifx</a> project, which is Go bindings for LIFX lights. It&#39;s still very much a work-in-progress, but it was fun to dip my toes into the Go waters again.</p>

<p>This was the first week that not only that I wrote Go code <em>for my job</em>, but I actually got to deploy it in a live production context. And it was the first week at my new job at LIFX, too. All this little program does now is read some stats from a JSON file and report them back to our analytics service. The earlier version was written in Ruby, which meant that Ruby needed to be compiled on this box just for one little script. Having the little script in Go means that we no longer need to compile Ruby on that box; a small victory but a victory nonetheless.</p>

<p>I dislike that I don&#39;t know much about Go still at this stage. That probably boils down to me not really having a proper use for it until recent. It could also be because a lot of the Go documentation out there is similar to a cookbook that only explains the properties of the ingredients, rather than having recipes. I enjoy learning by example and I think other people do also, because they bought <a href="https://manning.com/bigg2">a book that I wrote</a> that&#39;s all about the examples.</p>

<p>I like that the Go packages themselves are pretty well-documented. I especially like that I know what <em>type</em> of object I&#39;m supposed to be passing in. Take <a href="http://golang.org/pkg/time/#Unix"><code>time.Unix</code></a> for example. It works similarly to <code>Time.at(unix_time)</code> in Ruby. The Go documentation for <code>time.Unix</code> clearly indicates that it takes two arguments, both of which are of the <code>int64</code> type, and that it returns a Time &quot;instance&quot;. That&#39;s something that I didn&#39;t think I would like, given that I&#39;ve been doing Ruby for so long and it has a little thing called duck-typing where methods can be defined on anything and everything. A Ruby motto could perhaps be: &quot;If it quacks like a duck, let&#39;s pretend it is a duck for fear of finding out what it truly is.&quot; In Ruby, methods can return whatever they want and more often than not, to know what a method returns you have to look at how that method is defined. Oh, and in Go methods can return multiple values, like <code>json.Marshal</code> (like <code>to_json</code> in Ruby) which will return the marshalled JSON (as an array of bytes) as well as (possibly) an error if that marshalling fails for some reason.</p>

<p>I like that you can compile your program down to a binary file very easily and then deploy it to a server. For instance, on the <code>go-lifx</code> project, we can (and do) provide some very simple binaries that are compiled from the code within that project using Go&#39;s built-in tool: <code>go build</code>. </p>

<p>I also enjoy the <code>go get</code> tool. It took me a while to figure out that if I structured my <code>~/Projects/go</code> directory properly, that my Go experience would be more fluid. The proper way to structure it is:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Projects/go
  -&gt; src
    -&gt; github.com
      -&gt; bjeanes
        -&gt; go-lifx
</code></pre></div>
<p>I&#39;ve set <code>GOPATH</code> to <code>~/Projects/go</code> and so then when I type <code>go get github.com/codegangsta/cli</code> it will install it into <code>~/Projects/go/src/github.com/codegangsta/cli</code>. I can then reference it in my Go program very simply:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import (
  &quot;github.com/codegangsta/cli&quot;
)
</code></pre></div>
<p>That way, if I want to use it in another project then I can do it in exactly the same way.</p>

<p>Finally, the <code>go fmt</code> tool is the tool to end all (most?) coding syntax debates. It enforces tab-indentation, and blank spaces for alignment. It does a couple more things, which are <a href="http://golang.org/cmd/gofmt/">explained in gofmt&#39;s documentation</a>.</p>

<p>Overall, I enjoy the language and look forward to learning more about it, as well as finding other situations where we can use it at LIFX.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Add header to Rack::Test request</title>
   <link href="http://ryanbigg.com/2014/08/add-header-to-rack-test-request"/>
   <updated>2014-08-06T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/08/add-header-to-rack-test-request</id>
   <content type="html"><![CDATA[<p>I couldn&#39;t find any results on the Google for the title of this blog post, so I&#39;m writing it here.</p>

<p>All I wanted to do was to send through a header. I tried this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">it &quot;test&quot; do
  get &#39;/test&#39;, {}, { &#39;Test-Header&#39; =&gt; &#39;Test value&#39; }
  expect(last_response.status).to eq(200)
end
</code></pre></div>
<p>That doesn&#39;t work, because that third argument is actually the Rack <code>env</code> object.</p>

<p>The correct way to do it is this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">it &quot;test&quot; do
  header &#39;Test-Header&#39;, &#39;Test value&#39;
  get &#39;/test&#39;
  expect(last_response.status).to eq(200)
end
</code></pre></div>]]></content>
 </entry>
 
 <entry>
   <title>Ryan Bigg is now a Git...</title>
   <link href="http://ryanbigg.com/2014/07/ryan-bigg-is-now-a-git"/>
   <updated>2014-07-22T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/07/ryan-bigg-is-now-a-git</id>
   <content type="html"><![CDATA[<p>Yes, the <a href="http://spreecommerce.com/blog/farewell-ryan-bigg">rumours are true</a>, I am leaving Spree Commerce. This makes me a git because there&#39;s one and only one Community Manager at Spree, and so that void will need to be filled by someone else. Thankfully Jeff Dutil is going to step into my role as interim Community Manager for the time being.</p>

<p>I&#39;m also a git for tricking you all:</p>

<blockquote class="twitter-tweet" lang="en"><p>Ryan Bigg is now a GitHubber! <a href="https://t.co/jYm8bKVV1z">https://t.co/jYm8bKVV1z</a></p>&mdash; Ryan Bigg (@ryanbigg) <a href="https://twitter.com/ryanbigg/statuses/491321781781684224">July 21, 2014</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<p>I&#39;m not going to work for GitHub. I&#39;m going to work at <a href="http://lifx.co">LIFX</a> as a Ruby programmer there, starting August 4th. It was exceptionally lonely working in this Melbourne timezone mostly by myself, and I was getting complacent at Spree. I want a bigger challenge while I still have the time and energy for it. </p>

<p>LIFX seems like a perfect fit in regards to those things. I&#39;ll be working with people in an office in Richmond (not far from where I currently work at <a href="http://inspire9.com.au">Inspire9</a>), and the work will be something different to the ecommerce work that I&#39;ve been doing for 2.5 years. The Internet of Things is a really neat concept and I am really looking forward to working at LIFX.</p>

<hr>

<p>I first worked with Spree when I worked with my old job building the <a href="https://shop.abc.net.au/">ABC online store</a>. I was also working on the <a href="https://guides.rubyonrails.org/engines.html">Engines Guide</a> at this point, so my interest around Rails engines was still quite intense. </p>

<p>Josh Adams pinged me about <a href="https://groups.google.com/forum/#!msg/spree-user/P0iywDQokto">a discussion regarding namespaces on the spree user mailing list</a> and I just <a href="https://groups.google.com/forum/#!msg/spree-user/P0iywDQokto/jhtAftv7RK8J">had to reply</a>. That week, Sean from Spree messaged me over IRC and asked if I wanted a job. A month later I started working there on the namespacing work and gradually took over the maintenance of the project from Sean and Brian while they worked on developing Spree Commerce as a business.</p>

<p>As a result of that, I&#39;ve made <a href="https://github.com/spree/spree/graphs/contributors">over 3000 commits</a> and posted 7,000 issue comments. Over two and a half years, that averages out to 3 commits per day and almost 8 comments. I&#39;ve also posted 15,000 messages in the Spree IRC channel. I don&#39;t know the email stats, but I would guess it falls within the same range. I apologise for all the spam.</p>

<p>I&#39;m immensely proud of my work at Spree. It&#39;s been an interesting challenge to work on building something as complex as an ecommerce platform and still keeping it neat and tidy in comparison to certain other ecommerce frameworks. I know the Spree team will keep up the great work that they&#39;ve been doing on Wombat. The future of Spree is looking bright, and I wish them all the best.</p>

<hr>

<p>Lastly, I&#39;d like to thank Matt Allen from <a href="http://lookahead.com.au">Lookahead Search</a> for talking with me about this decision and other jobs. There&#39;s quite a lot of jobs out there (for someone with my supposed talents) and it was hard making the decision between the places that I had talked to during my job hunt. Matt is extremely patient and a good friend and I appreciate his help a ton.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Initial thoughts on Lotus</title>
   <link href="http://ryanbigg.com/2014/06/initial-thoughts-on-lotus"/>
   <updated>2014-06-19T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/06/initial-thoughts-on-lotus</id>
   <content type="html"><![CDATA[<p>Following on from my <a href="http://ryanbigg.com/2014/06/spree-factories-and-callbacks/">last post</a>, I&#39;ve been experimenting some more with my <a href="https://github.com/radar/spree_poro">spree_poro</a>, and I&#39;ve been looking at how to work with some kind of data store persistence more sophisticated than the <code>Spree::Data</code> constant that I had used previously. I wanted something more sophisticated than running <code>select</code>s over arrays.</p>

<p><a href="http://lotusrb.org">Lotus</a> bills itself as a &quot;complete web framework for Ruby&quot; and also uses the words &quot;simple&quot;, &quot;fast&quot;, and &quot;lightweight&quot;. In my limited experience of only using the <code>Lotus::Model</code> part of the framework, I can say it&#39;s all of those things. <code>Lotus::Model</code> itself is less than 600 lines and my tests (now 50 of them) still run in &lt;0.05 seconds.</p>

<p><code>Lotus::Model</code> departs from the ActiveRecord way of doing things by having four main types of objects: entities, mappers, repositories and adapters. The creator of Lotus (Luca Guida) has <a href="http://lucaguidi.com/2014/04/23/introducing-lotus-model.html">a great post outlining what each of those do</a>.</p>

<p>I&#39;ve added <code>Lotus::Model</code> to spree_poro (in a <a href="https://github.com/radar/spree_poro/tree/lotus">new branch</a>) and I have it persisting zones, tax rates, tax categories and products; not to a database but to memory. It would be very easy for me to switch this over to an SQL database, thanks to how Lotus is designed. </p>

<p>Having the entities separate from the persistence code means there&#39;s a clear separation between the business logic of the entities and the persistence logic of the repositories. If I want to test that finding tax rates based on an order&#39;s tax zone works, I no longer test that on the <code>Spree::TaxRate</code> model. Instead, that responsibility falls to the <code>Spree::TaxRateRepository</code>, and so <a href="https://github.com/radar/spree_poro/blob/fac4921d87c6a047e8b2df380137f3866cac2442/spec/spree/repositories/tax_rate_spec.rb">that is where it&#39;s tested</a>. This means that I could even get away with stubbing <code>Spree::TaxRateRepository.match</code> in the normal <code>TaxRate</code> specs to return some plain Ruby objects, and those tests do not need to care about any persistence layer at all.</p>

<p>I am very interested to see how this whole Lotus thing pans out. It&#39;s very easy to understand at this point in time, other than that I can&#39;t work out how to properly do polymorphic associations (as is necessary for promotions within Spree, sadly). Perhaps that would be a feature that comes eventually to Lotus, or we re-architect the way Spree is designed to work more with Lotus.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Spree, Factories and Callbacks</title>
   <link href="http://ryanbigg.com/2014/06/spree-factories-and-callbacks"/>
   <updated>2014-06-17T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2014/06/spree-factories-and-callbacks</id>
   <content type="html"><![CDATA[<p>During last week, I was trying to wrap my head around Spree&#39;s code again. I continued my efforts yesterday and tweeted this:</p>

<blockquote class="twitter-tweet" lang="en"><p>Realtalk: I think we’ve dug ourselves a nice hole in Spree by relying too much on callbacks + Factory Girl factories.</p>&mdash; The Bigg Man Himself (@ryanbigg) <a href="https://twitter.com/ryanbigg/statuses/478316786576674816">June 15, 2014</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Some people have asked me to explain what I mean by this, and hopefully I can do that in this blog post. </p>

<p>Spree is a pretty complex chunk of code which has been built up over the past 6 years and it&#39;s always been based off &quot;the Rails way&quot; of doing things. Being a Rails developer myself, I enjoy this because the design of Spree is not dissimilar to any other Rails app that I worked on before coming to work on Spree full time. The models in both Rails apps and Spree itself are in <code>app/models</code>, and the controllers are in <code>app/controllers</code> and so on.</p>

<p>A lot of people have come to disagree with the general way that Rails applications are designed. Just look around the internet and you&#39;ll see talks like <a href="https://www.youtube.com/watch?v=CGN4RFkhH2M&amp;feature=kp">Matt Wynne&#39;s &quot;Hexagonal Rails&quot;</a> and <a href="http://www.confreaks.com/videos/759-rubymidwest2011-keynote-architecture-the-lost-years">Uncle Bob Martin&#39;s &quot;Architecture the Lost Years&quot;</a>.</p>

<p>You would think that I would generally agree with the way Rails apps and Spree are architected, given that I <a href="https://manning.com/bigg2">wrote a book</a> about Rails and I am the <a href="https://github.com/spree/spree/graphs/contributors">#1 committer to Spree</a>.</p>

<p>You&#39;d be <em>mostly</em> right. I&#39;m familiar with it all, and so I like. There&#39;s still a lot to be desired, however.</p>

<p>I&#39;ve come to find the architecture of Rails ties it all too closely together. Take for example <a href="https://gist.github.com/radar/00e321fb4be0c20666aa">this Gist of SQL, generated from when Spree creates a line item from a factory</a>. SQL like this is generated at the top of the test <a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/spec/models/spree/calculator/default_tax_spec.rb">within <code>spec/models/spree/calculator/default_tax_spec.rb</code></a>. This SQL is a result of an abuse of factories on one hand, and quite a large amount of callbacks within Spree itself. There is no reason other than convenience that these factories are used; they create all the other &quot;necessary&quot; objects for our test, and sometimes even unnecessary ones. </p>

<p>Just by creating that one line item, the test file has inserted 20 records into the database, and has issued 34 <code>UPDATE</code> commands. I have no clue as to how many of those are required.</p>

<p>Sure, the factories provide some good. For instance, the line item factory creates a variant, which creates a product, and a product has a tax category. From the line item&#39;s variant&#39;s product&#39;s tax category, we can work out how much tax this line item is supposed to incur.</p>

<p>If you look through the code for this spec, there&#39;s not a single place where database persistence is necessary. All this test needs to do is to take some items and, based off the tax rates available, calculate the correct amounts.</p>

<p>Why does this test need to add data to the database and then read it? Couldn&#39;t the whole code of this be done with plain old Ruby objects and the persistence left to something else?</p>

<h2>PORO Spree</h2>

<p>The answer to that is yes. I&#39;ve done just that in my <a href="https://github.com/radar/spree_poro">spree_poro</a> project. I&#39;ve cheated a little by passing around a <code>Spree::Data</code> constant rather than using something more responsible like the Repository Pattern (<a href="https://twitter.com/sj26/status/478462521343348737">hat-tip to @sj26</a>), but the whole idea is there.</p>

<p>Take a look at the <a href="https://github.com/radar/spree_poro/blob/master/spec/spree/tax_rate_spec.rb">TaxRate spec file</a>. Rather than factories, all the information is setup in the test. It&#39;s all Plain Old Ruby Objects. It does nothing with the &quot;database&quot;, other than that <code>Spree::Data</code> cheat I mentioned earlier.</p>

<p>Oh, and it&#39;s fast. It runs 52 examples in 0.08 seconds. From start to finish, I get test feedback in about 1.5 seconds, which perfectly suits my short attention span.</p>

<h2>Callbacks</h2>

<p>Besides the callback hooks that live in <code>Spree::ItemAdjustments</code> that allow people to hook into the adjustment cycle within Spree, there&#39;s no other callbacks within the <code>spree_poro</code> system. It is my honest belief that we should be able to do everything that Spree does already in this small, enclosed system, sans factories and sans callbacks.</p>

<p>Within Spree-proper, there&#39;s a lot of callbacks. Take this chain of events that happens when an adjustment is created from a promotion:</p>

<ol>
<li><a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/promotion/actions/create_item_adjustments.rb#L32">create_adjustment is called</a>, which instantly persists an Adjustment object to the database.</li>
<li><a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/adjustment.rb#L42"><code>update_adjustable_adjustment_total</code> is called</a>, which <a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/adjustment.rb#L101-L104">calls out to one of the POROs already within Spree</a></li>
<li><a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/item_adjustments.rb#L38-L45">Spree::ItemAdjustments#update_adjustments</a> fetches all the promotional adjustments for the object <em>from the database</em>, and calls <code>Spree::Adjustment#update!</code>.</li>
<li><a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/adjustment.rb#L84-L97">Spree::Adjustment#update!</a> computes the adjustment&#39;s value based on the source&#39;s (promotion action&#39;s) calculator, and then <em>saves that to the database</em>. If it&#39;s a promotion, it&#39;ll <em>save again</em> by updating the eligibility of the promotion (which is a <a href="https://github.com/spree/spree/blob/4687e608b49236c2850500b026a9fbbab37dc96c/core/app/models/spree/promotion.rb#L72-L75">whole other rabbit hole</a>).</li>
</ol>

<p>I really think this could be all improved by having an <code>Order</code> object in-memory and acting upon that. The <code>Adjustment</code> objects would be on the in-memory <code>Order</code> object now, much like they are in <code>spree_poro</code>. Any changes to that object are persisted back to the database much later on. It&#39;s not the code&#39;s job to care about these changes getting back to the database. It&#39;s the code&#39;s job to perform these calculations and return us a result. Some <em>other</em> code needs to take care of persisting it back to the database.</p>

<p>This is why I think Rails apps are &quot;tied too closely together&quot;. We have the &quot;model&quot; which is this thing which contains <em>both</em> the business logic and the persistence logic. They should&#39;ve been separate concerns from the beginning. Having the one class that can do both things has lead us down this trap.</p>

<p>If I was going to re-architect Spree -- or any large Rails app for that matter -- something like <a href="https://github.com/radar/spree_poro">spree_poro</a> is where I would start. I wouldn&#39;t start with a Rails app, or even a Rails engine. I would start here: in a small repo of code that has tests written before any code, then the code implements the business rules and the tests pass. Refactoring happens then, because otherwise <a href="https://codeclimate.com/github/radar/spree_poro">CodeClimate</a> would say nasty things about the code. The Rails engine can call out to it later.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Community Management</title>
   <link href="http://ryanbigg.com/2014/04/community-management"/>
   <updated>2014-04-02T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2014/04/community-management</id>
   <content type="html"><![CDATA[<p>I&#39;ve been the &quot;Community Manager&quot; for Spree for a couple of years now. It&#39;s a
job where I answer user support requests wherever they happen: IM, email, IRC,
Stack Overflow. I&#39;ve been splitting this up with some development on Spree,
building features like the new adjustments system whilst getting some great
feedback about them from the community.</p>

<p>Over time, it&#39;s been getting busier and busier and I&#39;ve ended up doing more
&quot;community management&quot; and less programming and it&#39;s been burning me out. When
I&#39;m programming, I know that I&#39;m working towards a goal. When I&#39;m answering
emails, there&#39;s always more emails to answer the next day. It just doesn&#39;t
feel like progress is happening at all.</p>

<p>We&#39;ve just passed our busiest time of the year. People have found Spree and
want to either start using it, or port over from their existing ecommerce
platform. These people generally start asking questions at the end of January
and it quietens down around about now, picking up slightly in June (I don&#39;t
know why, it just does) and the later months of the year due to Black Friday /
Christmas / people wanting things done &quot;Right Now Or Else&quot; by the end of the
year.</p>

<p>During this extremely busy phase, I&#39;ve really dialed back on the programming
part of my job and I&#39;ve been dedicating most of my time to answering user
support requests, mainly in the form of trying to keep my email inbox at an
amount as close to zero as possible. The community benefits from this work
because those people asking the questions get the support they need and they
can continue on doing their own things. That&#39;s a great thing. When people are
using something that I helped build <em>and they like using it</em>; that is one of
the best feelings in the world. It&#39;s part of the reason why I&#39;ve stayed here
in this job longer than any other job I&#39;ve had. It&#39;s also a pretty awesome
team to work with.</p>

<p>After SpreeConf (26-27th Feb), I did an email inbox cull and still had 500+
emails to read through and reply to. This is part of my job, and it seemed
overwhelming. I was occassionally grumpy and short with my words. It&#39;s only
last week -- <em>a whole month later</em> -- that I was able to get this inbox number
down to less than 50. As I write this now, it sits at almost 200.</p>

<p>But there&#39;s a legitimate reason for that. For the past two days I&#39;ve been
doing exclusively programming work. I closed Airmail and worked for two days
in Sublime Text, iTerm and Chrome. It felt <em>glorious</em>. It felt like <em>progress</em>.</p>

<p>Last Friday at approximately 4:40pm my time and ridiculous o&#39; clock (1:40am) in DC,
Sean passed on a message from one of our clients who said something to the
effect that Magento&#39;s order interface in the admin backend was better than
Spree&#39;s order interface. Now, there&#39;s not many things Magento is better at
than Spree, but this is (supposedly) one of them. I agreed whole-heartedly with the
message, but it was 4:40pm on a Friday and I was thinking/dreaming of the
weekend.</p>

<p>I&#39;ve personally been wanting to change the admin backend for quite a while. It
doesn&#39;t adjust itself depending on the order&#39;s checkout steps, which is a
feature that we implemented about 6 major Spree releases. It just hasn&#39;t been
that important to work on as other things have been.</p>

<p>This little comment ate at me all weekend. How could we be <em>worse</em> than
Magento at something? Was that even possible? Yes, it was. The order interface
reloaded the entire page after every single change and it was infuriating. It
felt sluggish. Creating an order in Spree&#39;s admin backend shouldn&#39;t be
tedious, it should be <em>fast</em>.</p>

<p><a href='http://ryanbigg.com/videos/old_admin.mov'>Here&#39;s a video of the admin order interface</a></p>

<p>So on Monday I worked on improving this. I rewrote templates from ERB to
Underscore templates. I converted some JavaScript code that was defining top-
level functions into some CoffeeScript+Backbone code that defined those
functions as proper events within Backbone views.</p>

<p>I made it fast. <a href='http://ryanbigg.com/videos/new_admin.mov'>Here&#39;s a video of the new admin order interface</a></p>

<p>This felt like progress, because it is progress. I&#39;m improving something
within Spree rather than answering emails, and I feel really good about it.</p>

<p>So what I&#39;m going to be doing now is devoting at least a day a week to purely
coding on Spree. All the emails can wait an extra day. Hopefully those emails
will be answered by someone else.</p>

<p>You can see the code for these recent changes over on <a href='https://github.com/radar/spree/tree/new-order-interface'>my new-order-interface branch</a>.</p>
]]></content>
 </entry>
 
 
</feed>